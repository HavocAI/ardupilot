/**
 * @file ssmbattery.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Mon Mar 17 18:55:04 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef SSMBATTERY_H
#define SSMBATTERY_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SSMBATTERY_QUERY_FRAME_FRAME_ID (0x400ff80u)
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_FRAME_ID (0x4008000u)
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_FRAME_ID (0x4018000u)
#define SSMBATTERY_TOTAL_INFORMATION_0_FRAME_ID (0x4028000u)
#define SSMBATTERY_TOTAL_INFORMATION_1_FRAME_ID (0x4038000u)
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_FRAME_ID (0x4048000u)
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_FRAME_ID (0x4058000u)
#define SSMBATTERY_STATUS_INFORMATION_0_FRAME_ID (0x4068000u)
#define SSMBATTERY_STATUS_INFORMATION_1_FRAME_ID (0x4078000u)
#define SSMBATTERY_STATUS_INFORMATION_2_FRAME_ID (0x4088000u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_FRAME_ID (0x4098000u)
#define SSMBATTERY_CHARGING_INFORMATION_FRAME_ID (0x40b8000u)
#define SSMBATTERY_LIMITING_FRAME_ID (0x40d8000u)
#define SSMBATTERY_FAULT_FRAME_ID (0x40e8000u)

/* Frame lengths in bytes. */
#define SSMBATTERY_QUERY_FRAME_LENGTH (8u)
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_LENGTH (8u)
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_LENGTH (8u)
#define SSMBATTERY_TOTAL_INFORMATION_0_LENGTH (8u)
#define SSMBATTERY_TOTAL_INFORMATION_1_LENGTH (8u)
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_LENGTH (8u)
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_LENGTH (8u)
#define SSMBATTERY_STATUS_INFORMATION_0_LENGTH (8u)
#define SSMBATTERY_STATUS_INFORMATION_1_LENGTH (8u)
#define SSMBATTERY_STATUS_INFORMATION_2_LENGTH (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_LENGTH (8u)
#define SSMBATTERY_CHARGING_INFORMATION_LENGTH (8u)
#define SSMBATTERY_LIMITING_LENGTH (8u)
#define SSMBATTERY_FAULT_LENGTH (8u)

/* Extended or standard frame types. */
#define SSMBATTERY_QUERY_FRAME_IS_EXTENDED (1)
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_TOTAL_INFORMATION_0_IS_EXTENDED (1)
#define SSMBATTERY_TOTAL_INFORMATION_1_IS_EXTENDED (1)
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_STATUS_INFORMATION_0_IS_EXTENDED (1)
#define SSMBATTERY_STATUS_INFORMATION_1_IS_EXTENDED (1)
#define SSMBATTERY_STATUS_INFORMATION_2_IS_EXTENDED (1)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_CHARGING_INFORMATION_IS_EXTENDED (1)
#define SSMBATTERY_LIMITING_IS_EXTENDED (1)
#define SSMBATTERY_FAULT_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define SSMBATTERY_STATUS_INFORMATION_1_BAT_STATE_STATIONARY_CHOICE (0u)
#define SSMBATTERY_STATUS_INFORMATION_1_BAT_STATE_CHARGING_CHOICE (1u)
#define SSMBATTERY_STATUS_INFORMATION_1_BAT_STATE_DISCHARGING_CHOICE (2u)

#define SSMBATTERY_STATUS_INFORMATION_1_CHG_DETECT_DISCONNECTED_CHOICE (0u)
#define SSMBATTERY_STATUS_INFORMATION_1_CHG_DETECT_CONNECTED_CHOICE (1u)

#define SSMBATTERY_STATUS_INFORMATION_1_LOARD_DETECT_DISCONNECTED_CHOICE (0u)
#define SSMBATTERY_STATUS_INFORMATION_1_LOARD_DETECT_CONNECTED_CHOICE (1u)

#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO1_OFF_CHOICE (0u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO1_ON_CHOICE (1u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO2_ON_CHOICE (2u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO3_ON_CHOICE (4u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO4_ON_CHOICE (8u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO5_ON_CHOICE (16u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO6_ON_CHOICE (32u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO7_ON_CHOICE (64u)
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_DO8_ON_CHOICE (128u)

#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_POWER_KEY_OFF_CHOICE (0u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_POWER_KEY_ON_CHOICE (1u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_KEY_ON_CHOICE (2u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_SOFT__SWITCH_ON_CHOICE (4u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_DI1_ON_CHOICE (8u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_DI2_ON_CHOICE (16u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_DI3_ON_CHOICE (32u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_DI4_ON_CHOICE (64u)
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_DI5_ON_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_SINGLE_UNIT_VOLTAGE_HIGH_L1_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_CELL_VOLTAGE_HIGH_L2_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_SINGLE_UNIT_LOW_VOLTAGE_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_CELL_VOLTAGE_LOW_L2_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_TOTAL_PRESSURE_HIGH_L1_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_TOTAL_PRESSURE_HIGH_L2_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_TOTAL_PRESSURE_LOW_L1_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_TOTAL_PRESSURE_LOW_L2_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_CHARGING_TEMP_HIGH_L1_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_CHARGING_TEMP_HIGH_L2_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_CHARGING_TEMP_LOW_L1_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_CHARGING_TEMP_LOW_L2_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_DISCHARGE_TEMP_HIGH_L1_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_DISCHARGE_TEMP_HIGH_L2_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_DISCHARGE_TEMP_LOW_L1_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_DISCHARGE_TEMP_LOW_L2_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_CHARGING_OVERCURRENT_L1_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_CHARGING_OVERCURRENT_L2_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_DISCHARGE_OVERCURRENT_L1_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_DISCHARGE_OVERCURRENT_L2_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_SOC_HIGH_L1_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_SOC_HIGH_L2_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_SOC_LOW_L1_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_SOC_LOW_L2_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_PRESSURE_DIFF_HIGH_L1_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_PRESSURE_DIFF_HIGH_L2_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_TEMP_DIFF_HIGH_L1_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_TEMP_DIFF_HIGH_L2_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_MOS_TEMP_HIGH_L1_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_MOS_TEMP_HIGH_L2_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_AMBIENT_TEMP_HIGH_L1_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_AMBIENT_TEMP_HIGH_L2_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_CHARGING_MOS_OVER_TEMP_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_DISCHARGE_MOS_OVER_TEMP_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_CHARGING_MOS_TEMP_SENSOR_FAIL_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_DISCHARGE_MOS_TEMP_SENSOR_FAIL_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_CHARGING_MOS_ADHESION_FAIL_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_DISCHARGE_MOS_ADHESION_FAIL_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_CHARGING_MOS_OPEN_CIRCUIT_FAIL_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_DISCHARGE_MOS_CIRCUIT_FAIL_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_AFE_CHIP_FAIL_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_UNIT_ACQUISITION_FAIL_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_TEMP_SENSOR_FAIL_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_EEPROM_STORAGE_FAIL_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_RTC_CLOCK_FAIL_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_PRECHARGE_FAIL_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_VEHICLE_COMM_FAIL_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_INTERNAL_NETWORK_FAIL_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_MODULE_FAIL_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_PRESSURE_DETECTION_FAIL_CHOICE (2u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_SHORT_CIRCUIT_PROTECTION_FAIL_CHOICE (4u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_LOW_VOLTAGE_CHARGE_PROHIBITION_CHOICE (8u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_GPS__SOFT_SWITCH_DISCONNECTED_CHOICE (16u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_CHARGER_OUT_OF_CABINET_CHOICE (32u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_THERMAL_RUNAWAY_FAIL_CHOICE (64u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_HEATING_FAIL_CHOICE (128u)

#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_BALANCE_FAULTS_NO__ERROR_CHOICE (0u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_BALANCE_FAULTS_BALANCE_MODULE_COMM_FAIL_CHOICE (1u)
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_BALANCE_FAULTS_EQUALIZATION_CONDITIONS_NOT_MET_CHOICE (2u)

#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_NONE_CHOICE (0u)
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_KEY_CHOICE (1u)
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_BUTTON_CHOICE (2u)
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_485_CHOICE (4u)
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_CAN_CHOICE (8u)
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_CURRENT_CHOICE (16u)

#define SSMBATTERY_LIMITING_LIMIT_CUR_STATE_OFF_CHOICE (0u)
#define SSMBATTERY_LIMITING_LIMIT_CUR_STATE_ON_CHOICE (1u)

/* Frame Names. */
#define SSMBATTERY_QUERY_FRAME_NAME "query_frame"
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_NAME "cell_voltage_information"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_NAME "cell_temperature_information"
#define SSMBATTERY_TOTAL_INFORMATION_0_NAME "total_information_0"
#define SSMBATTERY_TOTAL_INFORMATION_1_NAME "total_information_1"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_NAME "cell_voltage_statistical_information"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_NAME "unit_temperature_statistical_information"
#define SSMBATTERY_STATUS_INFORMATION_0_NAME "status_information_0"
#define SSMBATTERY_STATUS_INFORMATION_1_NAME "status_information_1"
#define SSMBATTERY_STATUS_INFORMATION_2_NAME "status_information_2"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_NAME "hardware_and_battery_failure_information"
#define SSMBATTERY_CHARGING_INFORMATION_NAME "charging_information"
#define SSMBATTERY_LIMITING_NAME "limiting"
#define SSMBATTERY_FAULT_NAME "fault"

/* Signal Names. */
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_0_NAME "DataByte_0"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_1_NAME "DataByte_1"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_2_NAME "DataByte_2"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_3_NAME "DataByte_3"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_4_NAME "DataByte_4"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_5_NAME "DataByte_5"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_6_NAME "DataByte_6"
#define SSMBATTERY_QUERY_FRAME_DATA_BYTE_7_NAME "DataByte_7"
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_MODULE_NAME "Module"
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_VOLT1_NAME "Volt1"
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_VOLT2_NAME "Volt2"
#define SSMBATTERY_CELL_VOLTAGE_INFORMATION_VOLT3_NAME "Volt3"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_MODULE_NAME "Module"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER1_NAME "Temper1"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER2_NAME "Temper2"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER3_NAME "Temper3"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER4_NAME "Temper4"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER5_NAME "Temper5"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER6_NAME "Temper6"
#define SSMBATTERY_CELL_TEMPERATURE_INFORMATION_TEMPER7_NAME "Temper7"
#define SSMBATTERY_TOTAL_INFORMATION_0_SUM_V_NAME "SumV"
#define SSMBATTERY_TOTAL_INFORMATION_0_CURR_NAME "Curr"
#define SSMBATTERY_TOTAL_INFORMATION_0_SOC_NAME "SOC"
#define SSMBATTERY_TOTAL_INFORMATION_0_LIFE_NAME "Life"
#define SSMBATTERY_TOTAL_INFORMATION_1_POWER_NAME "Power"
#define SSMBATTERY_TOTAL_INFORMATION_1_TOTAL_ENERGY_NAME "Total_Energy"
#define SSMBATTERY_TOTAL_INFORMATION_1_MOS_TEMP_NAME "MOS_Temp"
#define SSMBATTERY_TOTAL_INFORMATION_1_BOARD_TEMP_NAME "Board_Temp"
#define SSMBATTERY_TOTAL_INFORMATION_1_HEAT_TEMP_NAME "Heat_Temp"
#define SSMBATTERY_TOTAL_INFORMATION_1_HEAT_CUR_NAME "Heat_Cur"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_MAX_V_NAME "MaxV"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_MAX_V_NO_NAME "MaxVNo"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_MIN_V_NAME "MinV"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_MIN_V_NO_NAME "MinVNo"
#define SSMBATTERY_CELL_VOLTAGE_STATISTICAL_INFORMATION_DIFF_V_NAME "DiffV"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_MAX_T_NAME "MaxT"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_MAX_T_NO_NAME "MaxTNo"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_IK_B_NAME "ikB"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_MIN_T_NAME "MinT"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_DIFF_T_NAME "DiffT"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_RESERVED0_NAME "Reserved0"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_RESERVED1_NAME "Reserved1"
#define SSMBATTERY_UNIT_TEMPERATURE_STATISTICAL_INFORMATION_RESERVED2_NAME "Reserved2"
#define SSMBATTERY_STATUS_INFORMATION_0_CHG_MOS_STATE_NAME "ChgMOSState"
#define SSMBATTERY_STATUS_INFORMATION_0_DIS_CHG_MOS_STATE_NAME "DisChgMOSState"
#define SSMBATTERY_STATUS_INFORMATION_0_PRE_MOS_STATE_NAME "PreMOSState"
#define SSMBATTERY_STATUS_INFORMATION_0_HEAT_MOS_STATE_NAME "HeatMOSState"
#define SSMBATTERY_STATUS_INFORMATION_0_FAN_MOS_STATE_NAME "FanMOSState"
#define SSMBATTERY_STATUS_INFORMATION_0_RESERVED0_NAME "Reserved0"
#define SSMBATTERY_STATUS_INFORMATION_0_RESERVED1_NAME "Reserved1"
#define SSMBATTERY_STATUS_INFORMATION_0_RESERVED2_NAME "Reserved2"
#define SSMBATTERY_STATUS_INFORMATION_1_BAT_STATE_NAME "BatState"
#define SSMBATTERY_STATUS_INFORMATION_1_CHG_DETECT_NAME "ChgDetect"
#define SSMBATTERY_STATUS_INFORMATION_1_LOARD_DETECT_NAME "LoardDetect"
#define SSMBATTERY_STATUS_INFORMATION_1_DO_STATE_NAME "DOState"
#define SSMBATTERY_STATUS_INFORMATION_1_DI_STATE_NAME "DIState"
#define SSMBATTERY_STATUS_INFORMATION_2_CELL_NUMBER_NAME "cell_number"
#define SSMBATTERY_STATUS_INFORMATION_2_NTC_NUMBER_NAME "ntc_number"
#define SSMBATTERY_STATUS_INFORMATION_2_REMAIN_CAPACITY1_NAME "Remain_Capacity1"
#define SSMBATTERY_STATUS_INFORMATION_2_REMAIN_CAPACITY2_NAME "Remain_Capacity2"
#define SSMBATTERY_STATUS_INFORMATION_2_REMAIN_CAPACITY3_NAME "Remain_Capacity3"
#define SSMBATTERY_STATUS_INFORMATION_2_REMAIN_CAPACITY4_NAME "Remain_Capacity4"
#define SSMBATTERY_STATUS_INFORMATION_2_CYCLE_TIME_H_NAME "Cycle_Time_H"
#define SSMBATTERY_STATUS_INFORMATION_2_CYCLE_TIME_L_NAME "Cycle_Time_L"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_VOLTAGE_FAULTS_NAME "VoltageFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_TEMP_FAULTS_NAME "TempFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_OVERCURRENT_FAULTS_NAME "OvercurrentFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_PRESSURE_TEMP_FAULTS_NAME "PressureTempFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MOS_FAULTS_NAME "MOSFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_SYSTEM_FAULTS_NAME "SystemFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_MODULE_FAULTS_NAME "ModuleFaults"
#define SSMBATTERY_HARDWARE_AND_BATTERY_FAILURE_INFORMATION_BALANCE_FAULTS_NAME "BalanceFaults"
#define SSMBATTERY_CHARGING_INFORMATION_REST_CHG_TIME_NAME "Rest_chg_time"
#define SSMBATTERY_CHARGING_INFORMATION_WAKEUP_SOURCE_NAME "Wakeup_source"
#define SSMBATTERY_LIMITING_LIMIT_CUR_STATE_NAME "limit_cur_state"
#define SSMBATTERY_LIMITING_LIMIC_CUR_NAME "limic_cur"
#define SSMBATTERY_LIMITING_PWM_DUTY_NAME "pwm_duty"
#define SSMBATTERY_LIMITING_RESERVED0_NAME "Reserved0"
#define SSMBATTERY_FAULT_PAGE_NO_NAME "Page_no"
#define SSMBATTERY_FAULT_FAULT_BITS_NAME "Fault_bits"

/**
 * Signals in message query_frame.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_query_frame_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_3;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_6;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_byte_7;
};

/**
 * Signals in message cell_voltage_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_cell_voltage_information_t {
    /**
     * Range: 1..255 (1..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t module;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t volt1;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t volt2;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t volt3;
};

/**
 * Signals in message cell_temperature_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_cell_temperature_information_t {
    /**
     * Range: 1..255 (1..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t module;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper1;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper2;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper3;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper4;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper5;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper6;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t temper7;
};

/**
 * Signals in message total_information_0.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_total_information_0_t {
    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t sum_v;

    /**
     * Range: 0..60000 (-3000.0..3000.0 A)
     * Scale: 0.1
     * Offset: -3000
     */
    uint16_t curr;

    /**
     * Range: 0..1000 (0..100 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t soc;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t life;
};

/**
 * Signals in message total_information_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_total_information_1_t {
    /**
     * Range: 0..255 (0..255 W)
     * Scale: 1
     * Offset: 0
     */
    uint16_t power;

    /**
     * Range: 0..65535 (0..65535 WH)
     * Scale: 1
     * Offset: 0
     */
    uint16_t total_energy;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t mos_temp;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t board_temp;

    /**
     * Range: 0..255 (-40..215 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t heat_temp;

    /**
     * Range: 0..255 (0..255 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_cur;
};

/**
 * Signals in message cell_voltage_statistical_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_cell_voltage_statistical_information_t {
    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t max_v;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t max_v_no;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t min_v;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t min_v_no;

    /**
     * Range: 0..65535 (0..65.535 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t diff_v;
};

/**
 * Signals in message unit_temperature_statistical_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_unit_temperature_statistical_information_t {
    /**
     * Range: 0..165 (-40..125 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t max_t;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t max_t_no;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ik_b;

    /**
     * Range: 0..165 (-40..125 °C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t min_t;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t diff_t;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved2;
};

/**
 * Signals in message status_information_0.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_status_information_0_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dis_chg_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pre_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heat_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_mos_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved0;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved2;
};

/**
 * Signals in message status_information_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_status_information_1_t {
    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t chg_detect;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t loard_detect;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t do_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t di_state;
};

/**
 * Signals in message status_information_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_status_information_2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cell_number;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ntc_number;

    /**
     * Range: 0..255 (0..255 mAH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t remain_capacity1;

    /**
     * Range: 0..255 (0..255 mAH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t remain_capacity2;

    /**
     * Range: 0..255 (0..255 mAH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t remain_capacity3;

    /**
     * Range: 0..255 (0..255 mAH)
     * Scale: 1
     * Offset: 0
     */
    uint8_t remain_capacity4;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cycle_time_h;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cycle_time_l;
};

/**
 * Signals in message hardware_and_battery_failure_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_hardware_and_battery_failure_information_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t voltage_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temp_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t overcurrent_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pressure_temp_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mos_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t module_faults;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t balance_faults;
};

/**
 * Signals in message charging_information.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_charging_information_t {
    /**
     * Range: 0..65535 (0..65535 min)
     * Scale: 1
     * Offset: 0
     */
    uint16_t rest_chg_time;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t wakeup_source;
};

/**
 * Signals in message limiting.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_limiting_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t limit_cur_state;

    /**
     * Range: 270000..330000 (-3000..3000 A)
     * Scale: 0.1
     * Offset: -30000
     */
    uint16_t limic_cur;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pwm_duty;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved0;
};

/**
 * Signals in message fault.
 *
 * All signal values are as on the CAN bus.
 */
struct ssmbattery_fault_t {
    /**
     * Range: 1..255 (1..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t page_no;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fault_bits;
};

/**
 * Pack message query_frame.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_query_frame_pack(
    uint8_t *dst_p,
    const struct ssmbattery_query_frame_t *src_p,
    size_t size);

/**
 * Unpack message query_frame.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_query_frame_unpack(
    struct ssmbattery_query_frame_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from query_frame.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_query_frame_init(struct ssmbattery_query_frame_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_query_frame_data_byte_7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_query_frame_data_byte_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_query_frame_data_byte_7_is_in_range(uint8_t value);

/**
 * Pack message cell_voltage_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_cell_voltage_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_cell_voltage_information_t *src_p,
    size_t size);

/**
 * Unpack message cell_voltage_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_cell_voltage_information_unpack(
    struct ssmbattery_cell_voltage_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from cell_voltage_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_cell_voltage_information_init(struct ssmbattery_cell_voltage_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_voltage_information_module_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_information_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_information_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_information_volt1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_information_volt1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_information_volt1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_information_volt2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_information_volt2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_information_volt2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_information_volt3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_information_volt3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_information_volt3_is_in_range(uint16_t value);

/**
 * Pack message cell_temperature_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_cell_temperature_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_cell_temperature_information_t *src_p,
    size_t size);

/**
 * Unpack message cell_temperature_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_cell_temperature_information_unpack(
    struct ssmbattery_cell_temperature_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from cell_temperature_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_cell_temperature_information_init(struct ssmbattery_cell_temperature_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_module_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_module_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_module_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_temperature_information_temper7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_temperature_information_temper7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_temperature_information_temper7_is_in_range(uint8_t value);

/**
 * Pack message total_information_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_total_information_0_pack(
    uint8_t *dst_p,
    const struct ssmbattery_total_information_0_t *src_p,
    size_t size);

/**
 * Unpack message total_information_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_total_information_0_unpack(
    struct ssmbattery_total_information_0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from total_information_0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_total_information_0_init(struct ssmbattery_total_information_0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_total_information_0_sum_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_0_sum_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_0_sum_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_total_information_0_curr_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_0_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_0_curr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_total_information_0_soc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_0_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_0_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_total_information_0_life_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_0_life_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_0_life_is_in_range(uint8_t value);

/**
 * Pack message total_information_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_total_information_1_pack(
    uint8_t *dst_p,
    const struct ssmbattery_total_information_1_t *src_p,
    size_t size);

/**
 * Unpack message total_information_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_total_information_1_unpack(
    struct ssmbattery_total_information_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from total_information_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_total_information_1_init(struct ssmbattery_total_information_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_total_information_1_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_total_information_1_total_energy_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_total_energy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_total_energy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_total_information_1_mos_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_mos_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_mos_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_total_information_1_board_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_board_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_board_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_total_information_1_heat_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_heat_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_heat_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_total_information_1_heat_cur_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_total_information_1_heat_cur_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_total_information_1_heat_cur_is_in_range(uint8_t value);

/**
 * Pack message cell_voltage_statistical_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_cell_voltage_statistical_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_cell_voltage_statistical_information_t *src_p,
    size_t size);

/**
 * Unpack message cell_voltage_statistical_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_cell_voltage_statistical_information_unpack(
    struct ssmbattery_cell_voltage_statistical_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from cell_voltage_statistical_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_cell_voltage_statistical_information_init(struct ssmbattery_cell_voltage_statistical_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_statistical_information_max_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_statistical_information_max_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_statistical_information_max_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_voltage_statistical_information_max_v_no_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_statistical_information_max_v_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_statistical_information_max_v_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_statistical_information_min_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_statistical_information_min_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_statistical_information_min_v_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_cell_voltage_statistical_information_min_v_no_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_statistical_information_min_v_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_statistical_information_min_v_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_cell_voltage_statistical_information_diff_v_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_cell_voltage_statistical_information_diff_v_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_cell_voltage_statistical_information_diff_v_is_in_range(uint16_t value);

/**
 * Pack message unit_temperature_statistical_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_unit_temperature_statistical_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_unit_temperature_statistical_information_t *src_p,
    size_t size);

/**
 * Unpack message unit_temperature_statistical_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_unit_temperature_statistical_information_unpack(
    struct ssmbattery_unit_temperature_statistical_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from unit_temperature_statistical_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_unit_temperature_statistical_information_init(struct ssmbattery_unit_temperature_statistical_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_max_t_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_max_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_max_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_max_t_no_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_max_t_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_max_t_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_ik_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_ik_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_ik_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_min_t_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_min_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_min_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_diff_t_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_diff_t_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_diff_t_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_reserved0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_reserved0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_reserved0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_reserved1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_reserved1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_reserved1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_unit_temperature_statistical_information_reserved2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_unit_temperature_statistical_information_reserved2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_unit_temperature_statistical_information_reserved2_is_in_range(uint8_t value);

/**
 * Pack message status_information_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_status_information_0_pack(
    uint8_t *dst_p,
    const struct ssmbattery_status_information_0_t *src_p,
    size_t size);

/**
 * Unpack message status_information_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_status_information_0_unpack(
    struct ssmbattery_status_information_0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from status_information_0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_status_information_0_init(struct ssmbattery_status_information_0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_chg_mos_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_chg_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_chg_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_dis_chg_mos_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_dis_chg_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_dis_chg_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_pre_mos_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_pre_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_pre_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_heat_mos_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_heat_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_heat_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_fan_mos_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_fan_mos_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_fan_mos_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_reserved0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_reserved0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_reserved0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_reserved1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_reserved1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_reserved1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_0_reserved2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_0_reserved2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_0_reserved2_is_in_range(uint8_t value);

/**
 * Pack message status_information_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_status_information_1_pack(
    uint8_t *dst_p,
    const struct ssmbattery_status_information_1_t *src_p,
    size_t size);

/**
 * Unpack message status_information_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_status_information_1_unpack(
    struct ssmbattery_status_information_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from status_information_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_status_information_1_init(struct ssmbattery_status_information_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_1_bat_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_1_bat_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_1_bat_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_1_chg_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_1_chg_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_1_chg_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_1_loard_detect_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_1_loard_detect_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_1_loard_detect_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_1_do_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_1_do_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_1_do_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_1_di_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_1_di_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_1_di_state_is_in_range(uint8_t value);

/**
 * Pack message status_information_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_status_information_2_pack(
    uint8_t *dst_p,
    const struct ssmbattery_status_information_2_t *src_p,
    size_t size);

/**
 * Unpack message status_information_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_status_information_2_unpack(
    struct ssmbattery_status_information_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from status_information_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_status_information_2_init(struct ssmbattery_status_information_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_cell_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_cell_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_cell_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_ntc_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_ntc_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_ntc_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_remain_capacity1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_remain_capacity1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_remain_capacity1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_remain_capacity2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_remain_capacity2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_remain_capacity2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_remain_capacity3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_remain_capacity3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_remain_capacity3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_remain_capacity4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_remain_capacity4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_remain_capacity4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_cycle_time_h_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_cycle_time_h_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_cycle_time_h_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_status_information_2_cycle_time_l_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_status_information_2_cycle_time_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_status_information_2_cycle_time_l_is_in_range(uint8_t value);

/**
 * Pack message hardware_and_battery_failure_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_hardware_and_battery_failure_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_hardware_and_battery_failure_information_t *src_p,
    size_t size);

/**
 * Unpack message hardware_and_battery_failure_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_hardware_and_battery_failure_information_unpack(
    struct ssmbattery_hardware_and_battery_failure_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from hardware_and_battery_failure_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_hardware_and_battery_failure_information_init(struct ssmbattery_hardware_and_battery_failure_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_voltage_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_voltage_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_voltage_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_temp_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_temp_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_temp_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_overcurrent_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_overcurrent_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_overcurrent_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_pressure_temp_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_pressure_temp_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_pressure_temp_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_mos_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_mos_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_mos_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_system_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_system_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_system_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_module_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_module_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_module_faults_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_hardware_and_battery_failure_information_balance_faults_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_hardware_and_battery_failure_information_balance_faults_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_hardware_and_battery_failure_information_balance_faults_is_in_range(uint8_t value);

/**
 * Pack message charging_information.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_charging_information_pack(
    uint8_t *dst_p,
    const struct ssmbattery_charging_information_t *src_p,
    size_t size);

/**
 * Unpack message charging_information.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_charging_information_unpack(
    struct ssmbattery_charging_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from charging_information.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_charging_information_init(struct ssmbattery_charging_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_charging_information_rest_chg_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_charging_information_rest_chg_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_charging_information_rest_chg_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_charging_information_wakeup_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_charging_information_wakeup_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_charging_information_wakeup_source_is_in_range(uint8_t value);

/**
 * Pack message limiting.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_limiting_pack(
    uint8_t *dst_p,
    const struct ssmbattery_limiting_t *src_p,
    size_t size);

/**
 * Unpack message limiting.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_limiting_unpack(
    struct ssmbattery_limiting_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from limiting.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_limiting_init(struct ssmbattery_limiting_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_limiting_limit_cur_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_limiting_limit_cur_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_limiting_limit_cur_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_limiting_limic_cur_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_limiting_limic_cur_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_limiting_limic_cur_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ssmbattery_limiting_pwm_duty_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_limiting_pwm_duty_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_limiting_pwm_duty_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_limiting_reserved0_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_limiting_reserved0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_limiting_reserved0_is_in_range(uint8_t value);

/**
 * Pack message fault.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ssmbattery_fault_pack(
    uint8_t *dst_p,
    const struct ssmbattery_fault_t *src_p,
    size_t size);

/**
 * Unpack message fault.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ssmbattery_fault_unpack(
    struct ssmbattery_fault_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from fault.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ssmbattery_fault_init(struct ssmbattery_fault_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_fault_page_no_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_fault_page_no_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_fault_page_no_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ssmbattery_fault_fault_bits_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ssmbattery_fault_fault_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ssmbattery_fault_fault_bits_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
