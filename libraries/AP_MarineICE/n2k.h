/**
 * @file n2k.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Wed Apr 16 11:07:39 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef N2K_H
#define N2K_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_FRAME_ID (0x18ff64feu)
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_FRAME_ID (0x18ff65feu)
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_FRAME_ID (0x18ff66feu)
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_FRAME_ID (0x18ff67feu)
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_FRAME_ID (0x18ff69feu)
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_FRAME_ID (0x18ff6efeu)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_FRAME_ID (0x18e800feu)
#define N2K_PGN_59904_ISO_REQUEST_FRAME_ID (0x18ea00feu)
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_FRAME_ID (0x18eb00feu)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_FRAME_ID (0x18ee00feu)
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_FRAME_ID (0x18fde9feu)
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdeafeu)
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdebfeu)
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdecfeu)
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_FRAME_ID (0x18fdedfeu)
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_FRAME_ID (0x18fdeefeu)
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_FRAME_ID (0x18fdeffeu)
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdf0feu)
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_FRAME_ID (0x18fdf1feu)
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_FRAME_ID (0x18fdf2feu)
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdf3feu)
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_FRAME_ID (0x18fdf4feu)
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_FRAME_ID (0x18fdf5feu)
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdf6feu)
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_FRAME_ID (0x18fdf7feu)
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_FRAME_ID (0x18fdf8feu)
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdf9feu)
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_FRAME_ID (0x18fdfafeu)
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_FRAME_ID (0x18fdfbfeu)
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_FRAME_ID (0x18fdfcfeu)
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_FRAME_ID (0x18fdfdfeu)
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_FRAME_ID (0x18fdfefeu)
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_FRAME_ID (0x18fdfffeu)
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_FRAME_ID (0x18fe00feu)
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_FRAME_ID (0x18fe01feu)
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_FRAME_ID (0x18fe02feu)
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_FRAME_ID (0x18fe03feu)
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_FRAME_ID (0x18fe04feu)
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_FRAME_ID (0x18fe05feu)
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_FRAME_ID (0x18fe06feu)
#define N2K_PGN_65280_FURUNO_HEAVE_FRAME_ID (0x18ff00feu)
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_FRAME_ID (0x18ff04feu)
#define N2K_PGN_65288_SEATALK_ALARM_FRAME_ID (0x18ff08feu)
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_FRAME_ID (0x18ff09feu)
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_FRAME_ID (0x18ff0afeu)
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_FRAME_ID (0x18ff0cfeu)
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_FRAME_ID (0x18ff16feu)
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_FRAME_ID (0x18ff1dfeu)
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_FRAME_ID (0x18ff20feu)
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_FRAME_ID (0x18ff3cfeu)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_FRAME_ID (0x18ff3dfeu)
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_FRAME_ID (0x18ff41feu)
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_FRAME_ID (0x18ff46feu)
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_FRAME_ID (0x18ff4ffeu)
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_FRAME_ID (0x18ff50feu)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_FRAME_ID (0x18ff51feu)
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_FRAME_ID (0x18ff5bfeu)
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_FRAME_ID (0x18ff5efeu)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_FRAME_ID (0x18ff63feu)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_FRAME_ID (0x18ff80feu)
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_FRAME_ID (0x18ff81feu)
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_FRAME_ID (0x18ff82feu)
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_FRAME_ID (0x18ff8cfeu)
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_FRAME_ID (0x18ffc8feu)
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_FRAME_ID (0x19ee00feu)
#define N2K_PGN_126983_ALERT_FRAME_ID (0x19f007feu)
#define N2K_PGN_126984_ALERT_RESPONSE_FRAME_ID (0x19f008feu)
#define N2K_PGN_126985_ALERT_TEXT_FRAME_ID (0x19f009feu)
#define N2K_PGN_126986_ALERT_CONFIGURATION_FRAME_ID (0x19f00afeu)
#define N2K_PGN_126987_ALERT_THRESHOLD_FRAME_ID (0x19f00bfeu)
#define N2K_PGN_126988_ALERT_VALUE_FRAME_ID (0x19f00cfeu)
#define N2K_PGN_126992_SYSTEM_TIME_FRAME_ID (0x19f010feu)
#define N2K_PGN_126993_HEARTBEAT_FRAME_ID (0x19f011feu)
#define N2K_PGN_126996_PRODUCT_INFORMATION_FRAME_ID (0x19f014feu)
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_FRAME_ID (0x19f016feu)
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_FRAME_ID (0x19f101feu)
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_FRAME_ID (0x19f105feu)
#define N2K_PGN_127245_RUDDER_FRAME_ID (0x19f10dfeu)
#define N2K_PGN_127250_VESSEL_HEADING_FRAME_ID (0x19f112feu)
#define N2K_PGN_127251_RATE_OF_TURN_FRAME_ID (0x19f113feu)
#define N2K_PGN_127252_HEAVE_FRAME_ID (0x19f114feu)
#define N2K_PGN_127257_ATTITUDE_FRAME_ID (0x19f119feu)
#define N2K_PGN_127258_MAGNETIC_VARIATION_FRAME_ID (0x19f11afeu)
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_FRAME_ID (0x19f200feu)
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_FRAME_ID (0x19f201feu)
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_FRAME_ID (0x19f202feu)
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_FRAME_ID (0x19f203feu)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_FRAME_ID (0x19f205feu)
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_FRAME_ID (0x19f206feu)
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_FRAME_ID (0x19f207feu)
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_FRAME_ID (0x19f208feu)
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_FRAME_ID (0x19f209feu)
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_FRAME_ID (0x19f20afeu)
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_FRAME_ID (0x19f20cfeu)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_FRAME_ID (0x19f20dfeu)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_FRAME_ID (0x19f20efeu)
#define N2K_PGN_127503_AC_INPUT_STATUS_FRAME_ID (0x19f20ffeu)
#define N2K_PGN_127504_AC_OUTPUT_STATUS_FRAME_ID (0x19f210feu)
#define N2K_PGN_127505_FLUID_LEVEL_FRAME_ID (0x19f211feu)
#define N2K_PGN_127506_DC_DETAILED_STATUS_FRAME_ID (0x19f212feu)
#define N2K_PGN_127507_CHARGER_STATUS_FRAME_ID (0x19f213feu)
#define N2K_PGN_127508_BATTERY_STATUS_FRAME_ID (0x19f214feu)
#define N2K_PGN_127509_INVERTER_STATUS_FRAME_ID (0x19f215feu)
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_FRAME_ID (0x19f216feu)
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_FRAME_ID (0x19f217feu)
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_FRAME_ID (0x19f218feu)
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_FRAME_ID (0x19f219feu)
#define N2K_PGN_127514_AGS_STATUS_FRAME_ID (0x19f21afeu)
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_FRAME_ID (0x19f300feu)
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_FRAME_ID (0x19f301feu)
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_FRAME_ID (0x19f302feu)
#define N2K_PGN_127750_CONVERTER_STATUS_FRAME_ID (0x19f306feu)
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_FRAME_ID (0x19f307feu)
#define N2K_PGN_128000_LEEWAY_ANGLE_FRAME_ID (0x19f400feu)
#define N2K_PGN_128001_VESSEL_ACCELERATION_FRAME_ID (0x19f401feu)
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_FRAME_ID (0x19f402feu)
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_FRAME_ID (0x19f403feu)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_FRAME_ID (0x19f406feu)
#define N2K_PGN_128007_THRUSTER_INFORMATION_FRAME_ID (0x19f407feu)
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_FRAME_ID (0x19f408feu)
#define N2K_PGN_128259_SPEED_FRAME_ID (0x19f503feu)
#define N2K_PGN_128267_WATER_DEPTH_FRAME_ID (0x19f50bfeu)
#define N2K_PGN_128275_DISTANCE_LOG_FRAME_ID (0x19f513feu)
#define N2K_PGN_128520_TRACKED_TARGET_DATA_FRAME_ID (0x19f608feu)
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_FRAME_ID (0x19f61afeu)
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_FRAME_ID (0x19f700feu)
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_FRAME_ID (0x19f701feu)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_FRAME_ID (0x19f708feu)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_FRAME_ID (0x19f709feu)
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_FRAME_ID (0x19f70afeu)
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_FRAME_ID (0x19f70cfeu)
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_FRAME_ID (0x19f801feu)
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_FRAME_ID (0x19f802feu)
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_FRAME_ID (0x19f803feu)
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_FRAME_ID (0x19f804feu)
#define N2K_PGN_129029_GNSS_POSITION_DATA_FRAME_ID (0x19f805feu)
#define N2K_PGN_129033_TIME_DATE_FRAME_ID (0x19f809feu)
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_FRAME_ID (0x19f80efeu)
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_FRAME_ID (0x19f80ffeu)
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_FRAME_ID (0x19f810feu)
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_FRAME_ID (0x19f811feu)
#define N2K_PGN_129044_DATUM_FRAME_ID (0x19f814feu)
#define N2K_PGN_129045_USER_DATUM_FRAME_ID (0x19f815feu)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_FRAME_ID (0x19f903feu)
#define N2K_PGN_129284_NAVIGATION_DATA_FRAME_ID (0x19f904feu)
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_FRAME_ID (0x19f905feu)
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_FRAME_ID (0x19f90bfeu)
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_FRAME_ID (0x19f915feu)
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_FRAME_ID (0x19f916feu)
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_FRAME_ID (0x19fa02feu)
#define N2K_PGN_129539_GNSS_DOPS_FRAME_ID (0x19fa03feu)
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_FRAME_ID (0x19fa04feu)
#define N2K_PGN_129541_GPS_ALMANAC_DATA_FRAME_ID (0x19fa05feu)
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_FRAME_ID (0x19fa06feu)
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_FRAME_ID (0x19fa09feu)
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_FRAME_ID (0x19fa0afeu)
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_FRAME_ID (0x19fa0bfeu)
#define N2K_PGN_129549_DGNSS_CORRECTIONS_FRAME_ID (0x19fa0dfeu)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_FRAME_ID (0x19fa0efeu)
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_FRAME_ID (0x19fa0ffeu)
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_FRAME_ID (0x19fa14feu)
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_FRAME_ID (0x19fb00feu)
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_FRAME_ID (0x19fb01feu)
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_FRAME_ID (0x19fb02feu)
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_FRAME_ID (0x19fb03feu)
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_FRAME_ID (0x19fb04feu)
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_FRAME_ID (0x19fb05feu)
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_FRAME_ID (0x19fb06feu)
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_FRAME_ID (0x19fb07feu)
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_FRAME_ID (0x19fb08feu)
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_FRAME_ID (0x19fb09feu)
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_FRAME_ID (0x19fb0afeu)
#define N2K_PGN_129803_AIS_INTERROGATION_FRAME_ID (0x19fb0bfeu)
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_FRAME_ID (0x19fb0cfeu)
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_FRAME_ID (0x19fb0dfeu)
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_FRAME_ID (0x19fb0efeu)
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_FRAME_ID (0x19fb0ffeu)
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_FRAME_ID (0x19fb11feu)
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_FRAME_ID (0x19fb12feu)
#define N2K_PGN_130052_LORAN_C_TD_DATA_FRAME_ID (0x19fc04feu)
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_FRAME_ID (0x19fc05feu)
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_FRAME_ID (0x19fc06feu)
#define N2K_PGN_130060_LABEL_FRAME_ID (0x19fc0cfeu)
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_FRAME_ID (0x19fc0dfeu)
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_FRAME_ID (0x19fc10feu)
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_FRAME_ID (0x19fc11feu)
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_FRAME_ID (0x19fc12feu)
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_FRAME_ID (0x19fc13feu)
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_FRAME_ID (0x19fc14feu)
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_FRAME_ID (0x19fc15feu)
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_FRAME_ID (0x19fc16feu)
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_FRAME_ID (0x19fc17feu)
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_FRAME_ID (0x19fc18feu)
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_FRAME_ID (0x19fc19feu)
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_FRAME_ID (0x19fc1afeu)
#define N2K_PGN_130306_WIND_DATA_FRAME_ID (0x19fd02feu)
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_FRAME_ID (0x19fd06feu)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_FRAME_ID (0x19fd07feu)
#define N2K_PGN_130312_TEMPERATURE_FRAME_ID (0x19fd08feu)
#define N2K_PGN_130313_HUMIDITY_FRAME_ID (0x19fd09feu)
#define N2K_PGN_130314_ACTUAL_PRESSURE_FRAME_ID (0x19fd0afeu)
#define N2K_PGN_130315_SET_PRESSURE_FRAME_ID (0x19fd0bfeu)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_FRAME_ID (0x19fd0cfeu)
#define N2K_PGN_130320_TIDE_STATION_DATA_FRAME_ID (0x19fd10feu)
#define N2K_PGN_130321_SALINITY_STATION_DATA_FRAME_ID (0x19fd11feu)
#define N2K_PGN_130322_CURRENT_STATION_DATA_FRAME_ID (0x19fd12feu)
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_FRAME_ID (0x19fd13feu)
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_FRAME_ID (0x19fd14feu)
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_FRAME_ID (0x19fd1afeu)
#define N2K_PGN_130560_PAYLOAD_MASS_FRAME_ID (0x19fe00feu)
#define N2K_PGN_130561_LIGHTING_ZONE_FRAME_ID (0x19fe01feu)
#define N2K_PGN_130562_LIGHTING_SCENE_FRAME_ID (0x19fe02feu)
#define N2K_PGN_130563_LIGHTING_DEVICE_FRAME_ID (0x19fe03feu)
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_FRAME_ID (0x19fe04feu)
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_FRAME_ID (0x19fe05feu)
#define N2K_PGN_130566_LIGHTING_PROGRAM_FRAME_ID (0x19fe06feu)
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_FRAME_ID (0x19fe07feu)
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_FRAME_ID (0x19fe09feu)
#define N2K_PGN_130570_LIBRARY_DATA_FILE_FRAME_ID (0x19fe0afeu)
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_FRAME_ID (0x19fe0bfeu)
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_FRAME_ID (0x19fe0cfeu)
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_FRAME_ID (0x19fe0dfeu)
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_FRAME_ID (0x19fe0efeu)
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_FRAME_ID (0x19fe10feu)
#define N2K_PGN_130577_DIRECTION_DATA_FRAME_ID (0x19fe11feu)
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_FRAME_ID (0x19fe12feu)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_FRAME_ID (0x19fe13feu)
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_FRAME_ID (0x19fe14feu)
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_FRAME_ID (0x19fe15feu)
#define N2K_PGN_130582_ZONE_VOLUME_FRAME_ID (0x19fe16feu)
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_FRAME_ID (0x19fe17feu)
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_FRAME_ID (0x19fe18feu)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_FRAME_ID (0x19fe19feu)
#define N2K_PGN_130586_ZONE_CONFIGURATION_FRAME_ID (0x19fe1afeu)
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_FRAME_ID (0x19ff02feu)
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_FRAME_ID (0x19ff03feu)
#define N2K_PGN_130822_NAVICO_UNKNOWN1_FRAME_ID (0x19ff06feu)
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_FRAME_ID (0x19ff07feu)
#define N2K_PGN_130825_NAVICO_UNKNOWN2_FRAME_ID (0x19ff09feu)
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_FRAME_ID (0x19ff0bfeu)
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_FRAME_ID (0x19ff0cfeu)
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_FRAME_ID (0x19ff0ffeu)
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_FRAME_ID (0x19ff10feu)
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_FRAME_ID (0x19ff11feu)
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_FRAME_ID (0x19ff12feu)
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_FRAME_ID (0x19ff13feu)
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_FRAME_ID (0x19ff16feu)
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_FRAME_ID (0x19ff17feu)
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_FRAME_ID (0x19ff18feu)
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_FRAME_ID (0x19ff1ffeu)
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_FRAME_ID (0x19ff23feu)
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_FRAME_ID (0x19ff28feu)
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_FRAME_ID (0x19ff2cfeu)
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_FRAME_ID (0x19ff40feu)
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_FRAME_ID (0x19ff41feu)
#define N2K_PGN_130944_AIRMAR_POST_FRAME_ID (0x19ff80feu)

/* Frame lengths in bytes. */
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_LENGTH (8u)
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_LENGTH (8u)
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_LENGTH (8u)
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_LENGTH (8u)
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_LENGTH (8u)
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_LENGTH (8u)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_LENGTH (8u)
#define N2K_PGN_59904_ISO_REQUEST_LENGTH (8u)
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_LENGTH (8u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_LENGTH (8u)
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_LENGTH (8u)
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_LENGTH (8u)
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_LENGTH (8u)
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_LENGTH (8u)
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_LENGTH (8u)
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_LENGTH (8u)
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_LENGTH (8u)
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_LENGTH (8u)
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_LENGTH (8u)
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_LENGTH (8u)
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_LENGTH (8u)
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_LENGTH (8u)
#define N2K_PGN_65280_FURUNO_HEAVE_LENGTH (8u)
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_LENGTH (8u)
#define N2K_PGN_65288_SEATALK_ALARM_LENGTH (8u)
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_LENGTH (8u)
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_LENGTH (8u)
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_LENGTH (8u)
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_LENGTH (8u)
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_LENGTH (8u)
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_LENGTH (8u)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_LENGTH (8u)
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_LENGTH (8u)
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_LENGTH (8u)
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_LENGTH (8u)
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_LENGTH (8u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_LENGTH (8u)
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_LENGTH (8u)
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_LENGTH (8u)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_LENGTH (8u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_LENGTH (8u)
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_LENGTH (8u)
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_LENGTH (8u)
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_LENGTH (8u)
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_LENGTH (8u)
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_LENGTH (8u)
#define N2K_PGN_126983_ALERT_LENGTH (8u)
#define N2K_PGN_126984_ALERT_RESPONSE_LENGTH (8u)
#define N2K_PGN_126985_ALERT_TEXT_LENGTH (8u)
#define N2K_PGN_126986_ALERT_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_126987_ALERT_THRESHOLD_LENGTH (8u)
#define N2K_PGN_126988_ALERT_VALUE_LENGTH (8u)
#define N2K_PGN_126992_SYSTEM_TIME_LENGTH (8u)
#define N2K_PGN_126993_HEARTBEAT_LENGTH (8u)
#define N2K_PGN_126996_PRODUCT_INFORMATION_LENGTH (8u)
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_LENGTH (8u)
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_LENGTH (8u)
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_LENGTH (8u)
#define N2K_PGN_127245_RUDDER_LENGTH (8u)
#define N2K_PGN_127250_VESSEL_HEADING_LENGTH (8u)
#define N2K_PGN_127251_RATE_OF_TURN_LENGTH (8u)
#define N2K_PGN_127252_HEAVE_LENGTH (8u)
#define N2K_PGN_127257_ATTITUDE_LENGTH (8u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_LENGTH (8u)
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_LENGTH (8u)
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_LENGTH (8u)
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_LENGTH (8u)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_LENGTH (8u)
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_LENGTH (8u)
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_LENGTH (8u)
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_LENGTH (8u)
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_LENGTH (8u)
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_LENGTH (8u)
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_LENGTH (8u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_LENGTH (8u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_LENGTH (8u)
#define N2K_PGN_127503_AC_INPUT_STATUS_LENGTH (8u)
#define N2K_PGN_127504_AC_OUTPUT_STATUS_LENGTH (8u)
#define N2K_PGN_127505_FLUID_LEVEL_LENGTH (8u)
#define N2K_PGN_127506_DC_DETAILED_STATUS_LENGTH (8u)
#define N2K_PGN_127507_CHARGER_STATUS_LENGTH (8u)
#define N2K_PGN_127508_BATTERY_STATUS_LENGTH (8u)
#define N2K_PGN_127509_INVERTER_STATUS_LENGTH (8u)
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_LENGTH (8u)
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_LENGTH (8u)
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_LENGTH (8u)
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_LENGTH (8u)
#define N2K_PGN_127514_AGS_STATUS_LENGTH (8u)
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_LENGTH (8u)
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_LENGTH (8u)
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_LENGTH (8u)
#define N2K_PGN_127750_CONVERTER_STATUS_LENGTH (8u)
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_LENGTH (8u)
#define N2K_PGN_128000_LEEWAY_ANGLE_LENGTH (8u)
#define N2K_PGN_128001_VESSEL_ACCELERATION_LENGTH (8u)
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_LENGTH (8u)
#define N2K_PGN_128007_THRUSTER_INFORMATION_LENGTH (8u)
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_LENGTH (8u)
#define N2K_PGN_128259_SPEED_LENGTH (8u)
#define N2K_PGN_128267_WATER_DEPTH_LENGTH (8u)
#define N2K_PGN_128275_DISTANCE_LOG_LENGTH (8u)
#define N2K_PGN_128520_TRACKED_TARGET_DATA_LENGTH (8u)
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_LENGTH (8u)
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_LENGTH (8u)
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_LENGTH (8u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_LENGTH (8u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_LENGTH (8u)
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_LENGTH (8u)
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_LENGTH (8u)
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_129029_GNSS_POSITION_DATA_LENGTH (8u)
#define N2K_PGN_129033_TIME_DATE_LENGTH (8u)
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_LENGTH (8u)
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_LENGTH (8u)
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_LENGTH (8u)
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_LENGTH (8u)
#define N2K_PGN_129044_DATUM_LENGTH (8u)
#define N2K_PGN_129045_USER_DATUM_LENGTH (8u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_LENGTH (8u)
#define N2K_PGN_129284_NAVIGATION_DATA_LENGTH (8u)
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_LENGTH (8u)
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_LENGTH (8u)
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_LENGTH (8u)
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_LENGTH (8u)
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_LENGTH (8u)
#define N2K_PGN_129539_GNSS_DOPS_LENGTH (8u)
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_LENGTH (8u)
#define N2K_PGN_129541_GPS_ALMANAC_DATA_LENGTH (8u)
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_LENGTH (8u)
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_LENGTH (8u)
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_LENGTH (8u)
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_LENGTH (8u)
#define N2K_PGN_129549_DGNSS_CORRECTIONS_LENGTH (8u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_LENGTH (8u)
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_LENGTH (8u)
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_LENGTH (8u)
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_LENGTH (8u)
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_LENGTH (8u)
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_LENGTH (8u)
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_LENGTH (8u)
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_LENGTH (8u)
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_LENGTH (8u)
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_LENGTH (8u)
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_LENGTH (8u)
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_LENGTH (8u)
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_LENGTH (8u)
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_LENGTH (8u)
#define N2K_PGN_129803_AIS_INTERROGATION_LENGTH (8u)
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_LENGTH (8u)
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_LENGTH (8u)
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_LENGTH (8u)
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_LENGTH (8u)
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_LENGTH (8u)
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_LENGTH (8u)
#define N2K_PGN_130052_LORAN_C_TD_DATA_LENGTH (8u)
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_LENGTH (8u)
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_LENGTH (8u)
#define N2K_PGN_130060_LABEL_LENGTH (8u)
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_LENGTH (8u)
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_LENGTH (8u)
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_LENGTH (8u)
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_LENGTH (8u)
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_LENGTH (8u)
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_LENGTH (8u)
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_LENGTH (8u)
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_LENGTH (8u)
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_LENGTH (8u)
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_LENGTH (8u)
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_LENGTH (8u)
#define N2K_PGN_130306_WIND_DATA_LENGTH (8u)
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_LENGTH (8u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_LENGTH (8u)
#define N2K_PGN_130312_TEMPERATURE_LENGTH (8u)
#define N2K_PGN_130313_HUMIDITY_LENGTH (8u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_LENGTH (8u)
#define N2K_PGN_130315_SET_PRESSURE_LENGTH (8u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_LENGTH (8u)
#define N2K_PGN_130320_TIDE_STATION_DATA_LENGTH (8u)
#define N2K_PGN_130321_SALINITY_STATION_DATA_LENGTH (8u)
#define N2K_PGN_130322_CURRENT_STATION_DATA_LENGTH (8u)
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_LENGTH (8u)
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_LENGTH (8u)
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_LENGTH (8u)
#define N2K_PGN_130560_PAYLOAD_MASS_LENGTH (8u)
#define N2K_PGN_130561_LIGHTING_ZONE_LENGTH (8u)
#define N2K_PGN_130562_LIGHTING_SCENE_LENGTH (8u)
#define N2K_PGN_130563_LIGHTING_DEVICE_LENGTH (8u)
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_LENGTH (8u)
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_LENGTH (8u)
#define N2K_PGN_130566_LIGHTING_PROGRAM_LENGTH (8u)
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_LENGTH (8u)
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_LENGTH (8u)
#define N2K_PGN_130570_LIBRARY_DATA_FILE_LENGTH (8u)
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_LENGTH (8u)
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_LENGTH (8u)
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_LENGTH (8u)
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_LENGTH (8u)
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_LENGTH (8u)
#define N2K_PGN_130577_DIRECTION_DATA_LENGTH (8u)
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_LENGTH (8u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_LENGTH (8u)
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_LENGTH (8u)
#define N2K_PGN_130582_ZONE_VOLUME_LENGTH (8u)
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_LENGTH (8u)
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_LENGTH (8u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_LENGTH (8u)
#define N2K_PGN_130586_ZONE_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_LENGTH (8u)
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_LENGTH (8u)
#define N2K_PGN_130822_NAVICO_UNKNOWN1_LENGTH (8u)
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_LENGTH (8u)
#define N2K_PGN_130825_NAVICO_UNKNOWN2_LENGTH (8u)
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_LENGTH (8u)
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_LENGTH (8u)
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_LENGTH (8u)
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_LENGTH (8u)
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_LENGTH (8u)
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_LENGTH (8u)
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_LENGTH (8u)
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_LENGTH (8u)
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_LENGTH (8u)
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_LENGTH (8u)
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_LENGTH (8u)
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_LENGTH (8u)
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_LENGTH (8u)
#define N2K_PGN_130944_AIRMAR_POST_LENGTH (8u)

/* Extended or standard frame types. */
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_IS_EXTENDED (1)
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_IS_EXTENDED (1)
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_IS_EXTENDED (1)
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_IS_EXTENDED (1)
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_IS_EXTENDED (1)
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_IS_EXTENDED (1)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_IS_EXTENDED (1)
#define N2K_PGN_59904_ISO_REQUEST_IS_EXTENDED (1)
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_IS_EXTENDED (1)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_IS_EXTENDED (1)
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_IS_EXTENDED (1)
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_IS_EXTENDED (1)
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_IS_EXTENDED (1)
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_IS_EXTENDED (1)
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_IS_EXTENDED (1)
#define N2K_PGN_65280_FURUNO_HEAVE_IS_EXTENDED (1)
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_IS_EXTENDED (1)
#define N2K_PGN_65288_SEATALK_ALARM_IS_EXTENDED (1)
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_IS_EXTENDED (1)
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_IS_EXTENDED (1)
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_IS_EXTENDED (1)
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_IS_EXTENDED (1)
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_IS_EXTENDED (1)
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_IS_EXTENDED (1)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_IS_EXTENDED (1)
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_IS_EXTENDED (1)
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_IS_EXTENDED (1)
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_IS_EXTENDED (1)
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_IS_EXTENDED (1)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_IS_EXTENDED (1)
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_IS_EXTENDED (1)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_IS_EXTENDED (1)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_IS_EXTENDED (1)
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_IS_EXTENDED (1)
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_IS_EXTENDED (1)
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_IS_EXTENDED (1)
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_IS_EXTENDED (1)
#define N2K_PGN_126983_ALERT_IS_EXTENDED (1)
#define N2K_PGN_126984_ALERT_RESPONSE_IS_EXTENDED (1)
#define N2K_PGN_126985_ALERT_TEXT_IS_EXTENDED (1)
#define N2K_PGN_126986_ALERT_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_126987_ALERT_THRESHOLD_IS_EXTENDED (1)
#define N2K_PGN_126988_ALERT_VALUE_IS_EXTENDED (1)
#define N2K_PGN_126992_SYSTEM_TIME_IS_EXTENDED (1)
#define N2K_PGN_126993_HEARTBEAT_IS_EXTENDED (1)
#define N2K_PGN_126996_PRODUCT_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_IS_EXTENDED (1)
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_IS_EXTENDED (1)
#define N2K_PGN_127245_RUDDER_IS_EXTENDED (1)
#define N2K_PGN_127250_VESSEL_HEADING_IS_EXTENDED (1)
#define N2K_PGN_127251_RATE_OF_TURN_IS_EXTENDED (1)
#define N2K_PGN_127252_HEAVE_IS_EXTENDED (1)
#define N2K_PGN_127257_ATTITUDE_IS_EXTENDED (1)
#define N2K_PGN_127258_MAGNETIC_VARIATION_IS_EXTENDED (1)
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_IS_EXTENDED (1)
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_IS_EXTENDED (1)
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_IS_EXTENDED (1)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_IS_EXTENDED (1)
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_IS_EXTENDED (1)
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_IS_EXTENDED (1)
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_IS_EXTENDED (1)
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_IS_EXTENDED (1)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_IS_EXTENDED (1)
#define N2K_PGN_127503_AC_INPUT_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127504_AC_OUTPUT_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127505_FLUID_LEVEL_IS_EXTENDED (1)
#define N2K_PGN_127506_DC_DETAILED_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127507_CHARGER_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127508_BATTERY_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127509_INVERTER_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127514_AGS_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_IS_EXTENDED (1)
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_IS_EXTENDED (1)
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_IS_EXTENDED (1)
#define N2K_PGN_127750_CONVERTER_STATUS_IS_EXTENDED (1)
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_IS_EXTENDED (1)
#define N2K_PGN_128000_LEEWAY_ANGLE_IS_EXTENDED (1)
#define N2K_PGN_128001_VESSEL_ACCELERATION_IS_EXTENDED (1)
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128007_THRUSTER_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128259_SPEED_IS_EXTENDED (1)
#define N2K_PGN_128267_WATER_DEPTH_IS_EXTENDED (1)
#define N2K_PGN_128275_DISTANCE_LOG_IS_EXTENDED (1)
#define N2K_PGN_128520_TRACKED_TARGET_DATA_IS_EXTENDED (1)
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_IS_EXTENDED (1)
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_IS_EXTENDED (1)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_IS_EXTENDED (1)
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_IS_EXTENDED (1)
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_129029_GNSS_POSITION_DATA_IS_EXTENDED (1)
#define N2K_PGN_129033_TIME_DATE_IS_EXTENDED (1)
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129044_DATUM_IS_EXTENDED (1)
#define N2K_PGN_129045_USER_DATUM_IS_EXTENDED (1)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_IS_EXTENDED (1)
#define N2K_PGN_129284_NAVIGATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_IS_EXTENDED (1)
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_IS_EXTENDED (1)
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_IS_EXTENDED (1)
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_IS_EXTENDED (1)
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_IS_EXTENDED (1)
#define N2K_PGN_129539_GNSS_DOPS_IS_EXTENDED (1)
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_IS_EXTENDED (1)
#define N2K_PGN_129541_GPS_ALMANAC_DATA_IS_EXTENDED (1)
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_IS_EXTENDED (1)
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_IS_EXTENDED (1)
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_IS_EXTENDED (1)
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_IS_EXTENDED (1)
#define N2K_PGN_129549_DGNSS_CORRECTIONS_IS_EXTENDED (1)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_IS_EXTENDED (1)
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_IS_EXTENDED (1)
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_IS_EXTENDED (1)
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_IS_EXTENDED (1)
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_IS_EXTENDED (1)
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_IS_EXTENDED (1)
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_IS_EXTENDED (1)
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_IS_EXTENDED (1)
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129803_AIS_INTERROGATION_IS_EXTENDED (1)
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_IS_EXTENDED (1)
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_IS_EXTENDED (1)
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_IS_EXTENDED (1)
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_IS_EXTENDED (1)
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_IS_EXTENDED (1)
#define N2K_PGN_130052_LORAN_C_TD_DATA_IS_EXTENDED (1)
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_IS_EXTENDED (1)
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_IS_EXTENDED (1)
#define N2K_PGN_130060_LABEL_IS_EXTENDED (1)
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_IS_EXTENDED (1)
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_IS_EXTENDED (1)
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_IS_EXTENDED (1)
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_IS_EXTENDED (1)
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_IS_EXTENDED (1)
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_IS_EXTENDED (1)
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_IS_EXTENDED (1)
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_IS_EXTENDED (1)
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_IS_EXTENDED (1)
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_IS_EXTENDED (1)
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_IS_EXTENDED (1)
#define N2K_PGN_130306_WIND_DATA_IS_EXTENDED (1)
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_IS_EXTENDED (1)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_IS_EXTENDED (1)
#define N2K_PGN_130312_TEMPERATURE_IS_EXTENDED (1)
#define N2K_PGN_130313_HUMIDITY_IS_EXTENDED (1)
#define N2K_PGN_130314_ACTUAL_PRESSURE_IS_EXTENDED (1)
#define N2K_PGN_130315_SET_PRESSURE_IS_EXTENDED (1)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_IS_EXTENDED (1)
#define N2K_PGN_130320_TIDE_STATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130321_SALINITY_STATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130322_CURRENT_STATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_IS_EXTENDED (1)
#define N2K_PGN_130560_PAYLOAD_MASS_IS_EXTENDED (1)
#define N2K_PGN_130561_LIGHTING_ZONE_IS_EXTENDED (1)
#define N2K_PGN_130562_LIGHTING_SCENE_IS_EXTENDED (1)
#define N2K_PGN_130563_LIGHTING_DEVICE_IS_EXTENDED (1)
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_IS_EXTENDED (1)
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_IS_EXTENDED (1)
#define N2K_PGN_130566_LIGHTING_PROGRAM_IS_EXTENDED (1)
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_IS_EXTENDED (1)
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_IS_EXTENDED (1)
#define N2K_PGN_130570_LIBRARY_DATA_FILE_IS_EXTENDED (1)
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_IS_EXTENDED (1)
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_IS_EXTENDED (1)
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_IS_EXTENDED (1)
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_IS_EXTENDED (1)
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_IS_EXTENDED (1)
#define N2K_PGN_130577_DIRECTION_DATA_IS_EXTENDED (1)
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_IS_EXTENDED (1)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_IS_EXTENDED (1)
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_IS_EXTENDED (1)
#define N2K_PGN_130582_ZONE_VOLUME_IS_EXTENDED (1)
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_IS_EXTENDED (1)
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_IS_EXTENDED (1)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_IS_EXTENDED (1)
#define N2K_PGN_130586_ZONE_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_IS_EXTENDED (1)
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_IS_EXTENDED (1)
#define N2K_PGN_130822_NAVICO_UNKNOWN1_IS_EXTENDED (1)
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_IS_EXTENDED (1)
#define N2K_PGN_130825_NAVICO_UNKNOWN2_IS_EXTENDED (1)
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_IS_EXTENDED (1)
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_IS_EXTENDED (1)
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_IS_EXTENDED (1)
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_IS_EXTENDED (1)
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_IS_EXTENDED (1)
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_IS_EXTENDED (1)
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_IS_EXTENDED (1)
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_IS_EXTENDED (1)
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_IS_EXTENDED (1)
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_IS_EXTENDED (1)
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_IS_EXTENDED (1)
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_IS_EXTENDED (1)
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_IS_EXTENDED (1)
#define N2K_PGN_130944_AIRMAR_POST_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_CONTROL_ACK_CHOICE (0u)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_CONTROL_NAK_CHOICE (1u)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_CONTROL_ACCESS__DENIED_CHOICE (2u)
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_CONTROL_ADDRESS__BUSY_CHOICE (3u)

#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_RESERVED_FOR_2000__USE_CHOICE (0u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_SYSTEM_TOOLS_CHOICE (10u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_SAFETY_SYSTEMS_CHOICE (20u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_INTERNETWORK_DEVICE_CHOICE (25u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_ELECTRICAL__DISTRIBUTION_CHOICE (30u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_ELECTRICAL__GENERATION_CHOICE (35u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_STEERING_AND__CONTROL_SURFACES_CHOICE (40u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_PROPULSION_CHOICE (50u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_NAVIGATION_CHOICE (60u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_COMMUNICATION_CHOICE (70u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_SENSOR__COMMUNICATION__INTERFACE_CHOICE (75u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_INSTRUMENTATION_GENERAL_SYSTEMS_CHOICE (80u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_EXTERNAL__ENVIRONMENT_CHOICE (85u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_INTERNAL__ENVIRONMENT_CHOICE (90u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_DECK___CARGO___FISHING_EQUIPMENT_SYSTEMS_CHOICE (100u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_HUMAN__INTERFACE_CHOICE (110u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_DISPLAY_CHOICE (120u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_ENTERTAINMENT_CHOICE (125u)

#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_GLOBAL_CHOICE (0u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_HIGHWAY_CHOICE (1u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_AGRICULTURE_CHOICE (2u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_CONSTRUCTION_CHOICE (3u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_MARINE_CHOICE (4u)
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_INDUSTRIAL_CHOICE (5u)

#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LEADING_CHOICE (0u)
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_LAGGING_CHOICE (1u)
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_ERROR_CHOICE (2u)

#define N2K_PGN_65288_SEATALK_ALARM_ALARM_STATUS_ALARM_CONDITION_NOT_MET_CHOICE (0u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_STATUS_ALARM_CONDITION_MET_AND_NOT_SILENCED_CHOICE (1u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_STATUS_ALARM_CONDITION_MET_AND_SILENCED_CHOICE (2u)

#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_NO__ALARM_CHOICE (0u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_SHALLOW__DEPTH_CHOICE (1u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_DEEP__DEPTH_CHOICE (2u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_SHALLOW__ANCHOR_CHOICE (3u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_DEEP__ANCHOR_CHOICE (4u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_OFF__COURSE_CHOICE (5u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AWA__HIGH_CHOICE (6u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AWA__LOW_CHOICE (7u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AWS__HIGH_CHOICE (8u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AWS__LOW_CHOICE (9u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_TWA__HIGH_CHOICE (10u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_TWA__LOW_CHOICE (11u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_TWS__HIGH_CHOICE (12u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_TWS__LOW_CHOICE (13u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_WP__ARRIVAL_CHOICE (14u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_BOAT__SPEED__HIGH_CHOICE (15u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_BOAT__SPEED__LOW_CHOICE (16u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_SEA__TEMPERATURE__HIGH_CHOICE (17u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_SEA__TEMPERATURE__LOW_CHOICE (18u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WATCH_CHOICE (19u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__OFF__COURSE_CHOICE (20u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WIND__SHIFT_CHOICE (21u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__LOW__BATTERY_CHOICE (22u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__LAST__MINUTE__OF__WATCH_CHOICE (23u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO_NMEA__DATA_CHOICE (24u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__LARGE_XTE_CHOICE (25u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT_NMEA__DATA_ERROR_CHOICE (26u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT_CU__DISCONNECTED_CHOICE (27u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTO__RELEASE_CHOICE (28u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE_CHOICE (29u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__DRIVE__STOPPED_CHOICE (30u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__TYPE__UNSPECIFIED_CHOICE (31u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__CALIBRATION__REQUIRED_CHOICE (32u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__LAST__HEADING_CHOICE (33u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__PILOT_CHOICE (34u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__ROUTE__COMPLETE_CHOICE (35u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__VARIABLE__TEXT_CHOICE (36u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_GPS__FAILURE_CHOICE (37u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_MOB_CHOICE (38u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_SEATALK1__ANCHOR_CHOICE (39u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__SWAPPED__MOTOR__POWER_CHOICE (40u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__STANDBY__TOO__FAST__TO__FISH_CHOICE (41u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO_GPS__FIX_CHOICE (42u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO_GPS_COG_CHOICE (43u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__START__UP_CHOICE (44u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__TOO__SLOW_CHOICE (45u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__COMPASS_CHOICE (46u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__RATE__GYRO__FAULT_CHOICE (47u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__CURRENT__LIMIT_CHOICE (48u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE__PORT_CHOICE (49u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE__STBD_CHOICE (50u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__WIND__DATA_CHOICE (51u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__SPEED__DATA_CHOICE (52u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__SEATALK__FAIL1_CHOICE (53u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__SEATALK__FAIL2_CHOICE (54u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__TOO__FAST__TO__FISH_CHOICE (55u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTO__DOCKSIDE__FAIL_CHOICE (56u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__TURN__TOO__FAST_CHOICE (57u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__NAV__DATA_CHOICE (58u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__LOST__WAYPOINT__DATA_CHOICE (59u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT_EEPROM__CORRUPT_CHOICE (60u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__RUDDER__FEEDBACK__FAIL_CHOICE (61u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL1_CHOICE (62u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL2_CHOICE (63u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL3_CHOICE (64u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL4_CHOICE (65u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL5_CHOICE (66u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL6_CHOICE (67u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__CAL__REQUIRED_CHOICE (68u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__OFF_COURSE_CHOICE (69u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING_XTE_CHOICE (70u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__WIND__SHIFT_CHOICE (71u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__DRIVE__SHORT_CHOICE (72u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__CLUTCH__SHORT_CHOICE (73u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__WARNING__SOLENOID__SHORT_CHOICE (74u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__JOYSTICK__FAULT_CHOICE (75u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO__JOYSTICK__DATA_CHOICE (76u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__INVALID__COMMAND_CHOICE (80u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS_TX__MALFUNCTION_CHOICE (81u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__ANTENNA_VSWR_FAULT_CHOICE (82u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__RX_CHANNEL_1_MALFUNCTION_CHOICE (83u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__RX_CHANNEL_2_MALFUNCTION_CHOICE (84u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NO_SENSOR_POSITION_IN_USE_CHOICE (85u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NO_VALID_SOG_INFORMATION_CHOICE (86u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NO_VALID_COG_INFORMATION_CHOICE (87u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS_12_V_ALARM_CHOICE (88u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS_6_V_ALARM_CHOICE (89u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NOISE_THRESHOLD_EXCEEDED_CHANNEL_A_CHOICE (90u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NOISE_THRESHOLD_EXCEEDED_CHANNEL_B_CHOICE (91u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__TRANSMITTER_PA_FAULT_CHOICE (92u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS_3_V3_ALARM_CHOICE (93u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__RX_CHANNEL_70_MALFUNCTION_CHOICE (94u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__HEADING_LOST_INVALID_CHOICE (95u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS_INTERNAL_GPS_LOST_CHOICE (96u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__NO_SENSOR_POSITION_CHOICE (97u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__LOCK_FAILURE_CHOICE (98u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__INTERNAL_GGA_TIMEOUT_CHOICE (99u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__PROTOCOL_STACK_RESTART_CHOICE (100u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__NO_IPS_COMMUNICATIONS_CHOICE (101u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__POWER__ON_OR__SLEEP__SWITCH__RESET__WHILE__ENGAGED_CHOICE (102u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_PILOT__UNEXPECTED__RESET__WHILE__ENGAGED_CHOICE (103u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__DANGEROUS__TARGET_CHOICE (104u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__LOST__TARGET_CHOICE (105u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__SAFETY__RELATED__MESSAGE__USED_TO_SILENCE__CHOICE (106u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_AIS__CONNECTION__LOST_CHOICE (107u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_NO__FIX_CHOICE (108u)

#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_INSTRUMENT_CHOICE (0u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_AUTOPILOT_CHOICE (1u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_RADAR_CHOICE (2u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_CHART__PLOTTER_CHOICE (3u)
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_AIS_CHOICE (4u)

#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MODE_HEADING_CHOICE (2u)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MODE_WIND_CHOICE (3u)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MODE_NAV_CHOICE (10u)
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MODE_NO__DRIFT_CHOICE (11u)

#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_NO__ALARM_CHOICE (0u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_SHALLOW__DEPTH_CHOICE (1u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_DEEP__DEPTH_CHOICE (2u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_SHALLOW__ANCHOR_CHOICE (3u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_DEEP__ANCHOR_CHOICE (4u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_OFF__COURSE_CHOICE (5u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AWA__HIGH_CHOICE (6u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AWA__LOW_CHOICE (7u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AWS__HIGH_CHOICE (8u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AWS__LOW_CHOICE (9u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_TWA__HIGH_CHOICE (10u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_TWA__LOW_CHOICE (11u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_TWS__HIGH_CHOICE (12u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_TWS__LOW_CHOICE (13u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_WP__ARRIVAL_CHOICE (14u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_BOAT__SPEED__HIGH_CHOICE (15u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_BOAT__SPEED__LOW_CHOICE (16u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_SEA__TEMPERATURE__HIGH_CHOICE (17u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_SEA__TEMPERATURE__LOW_CHOICE (18u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WATCH_CHOICE (19u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__OFF__COURSE_CHOICE (20u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WIND__SHIFT_CHOICE (21u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__LOW__BATTERY_CHOICE (22u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__LAST__MINUTE__OF__WATCH_CHOICE (23u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO_NMEA__DATA_CHOICE (24u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__LARGE_XTE_CHOICE (25u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT_NMEA__DATA_ERROR_CHOICE (26u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT_CU__DISCONNECTED_CHOICE (27u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTO__RELEASE_CHOICE (28u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE_CHOICE (29u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__DRIVE__STOPPED_CHOICE (30u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__TYPE__UNSPECIFIED_CHOICE (31u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__CALIBRATION__REQUIRED_CHOICE (32u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__LAST__HEADING_CHOICE (33u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__PILOT_CHOICE (34u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__ROUTE__COMPLETE_CHOICE (35u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__VARIABLE__TEXT_CHOICE (36u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_GPS__FAILURE_CHOICE (37u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_MOB_CHOICE (38u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_SEATALK1__ANCHOR_CHOICE (39u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__SWAPPED__MOTOR__POWER_CHOICE (40u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__STANDBY__TOO__FAST__TO__FISH_CHOICE (41u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO_GPS__FIX_CHOICE (42u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO_GPS_COG_CHOICE (43u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__START__UP_CHOICE (44u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__TOO__SLOW_CHOICE (45u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__COMPASS_CHOICE (46u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__RATE__GYRO__FAULT_CHOICE (47u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__CURRENT__LIMIT_CHOICE (48u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE__PORT_CHOICE (49u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WAY__POINT__ADVANCE__STBD_CHOICE (50u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__WIND__DATA_CHOICE (51u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__SPEED__DATA_CHOICE (52u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__SEATALK__FAIL1_CHOICE (53u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__SEATALK__FAIL2_CHOICE (54u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__TOO__FAST__TO__FISH_CHOICE (55u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTO__DOCKSIDE__FAIL_CHOICE (56u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__TURN__TOO__FAST_CHOICE (57u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__NAV__DATA_CHOICE (58u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__LOST__WAYPOINT__DATA_CHOICE (59u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT_EEPROM__CORRUPT_CHOICE (60u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__RUDDER__FEEDBACK__FAIL_CHOICE (61u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL1_CHOICE (62u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL2_CHOICE (63u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL3_CHOICE (64u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL4_CHOICE (65u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL5_CHOICE (66u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__AUTOLEARN__FAIL6_CHOICE (67u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__CAL__REQUIRED_CHOICE (68u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__OFF_COURSE_CHOICE (69u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING_XTE_CHOICE (70u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__WIND__SHIFT_CHOICE (71u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__DRIVE__SHORT_CHOICE (72u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__CLUTCH__SHORT_CHOICE (73u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__WARNING__SOLENOID__SHORT_CHOICE (74u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__JOYSTICK__FAULT_CHOICE (75u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO__JOYSTICK__DATA_CHOICE (76u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__INVALID__COMMAND_CHOICE (80u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS_TX__MALFUNCTION_CHOICE (81u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__ANTENNA_VSWR_FAULT_CHOICE (82u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__RX_CHANNEL_1_MALFUNCTION_CHOICE (83u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__RX_CHANNEL_2_MALFUNCTION_CHOICE (84u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NO_SENSOR_POSITION_IN_USE_CHOICE (85u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NO_VALID_SOG_INFORMATION_CHOICE (86u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NO_VALID_COG_INFORMATION_CHOICE (87u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS_12_V_ALARM_CHOICE (88u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS_6_V_ALARM_CHOICE (89u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NOISE_THRESHOLD_EXCEEDED_CHANNEL_A_CHOICE (90u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NOISE_THRESHOLD_EXCEEDED_CHANNEL_B_CHOICE (91u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__TRANSMITTER_PA_FAULT_CHOICE (92u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS_3_V3_ALARM_CHOICE (93u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__RX_CHANNEL_70_MALFUNCTION_CHOICE (94u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__HEADING_LOST_INVALID_CHOICE (95u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS_INTERNAL_GPS_LOST_CHOICE (96u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__NO_SENSOR_POSITION_CHOICE (97u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__LOCK_FAILURE_CHOICE (98u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__INTERNAL_GGA_TIMEOUT_CHOICE (99u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__PROTOCOL_STACK_RESTART_CHOICE (100u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__NO_IPS_COMMUNICATIONS_CHOICE (101u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__POWER__ON_OR__SLEEP__SWITCH__RESET__WHILE__ENGAGED_CHOICE (102u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_PILOT__UNEXPECTED__RESET__WHILE__ENGAGED_CHOICE (103u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__DANGEROUS__TARGET_CHOICE (104u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__LOST__TARGET_CHOICE (105u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__SAFETY__RELATED__MESSAGE__USED_TO_SILENCE__CHOICE (106u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_AIS__CONNECTION__LOST_CHOICE (107u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_NO__FIX_CHOICE (108u)

#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_INSTRUMENT_CHOICE (0u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_AUTOPILOT_CHOICE (1u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_RADAR_CHOICE (2u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_CHART__PLOTTER_CHOICE (3u)
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_AIS_CHOICE (4u)

#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_STANDBY_CHOICE (0u)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_AUTO__COMPASS_COMMANDED_CHOICE (64u)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_VANE___WIND__MODE_CHOICE (256u)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_TRACK__MODE_CHOICE (384u)
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_NO__DRIFT__COG_REFERENCED___IN_TRACK__COURSE_CHANGES__CHOICE (385u)

#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_DEPTH_UNLOCKED_CHOICE (0u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_10__CHOICE (1u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_20__CHOICE (2u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_30__CHOICE (3u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_40__CHOICE (4u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_50__CHOICE (5u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_60__CHOICE (6u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_70__CHOICE (7u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_80__CHOICE (8u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_90__CHOICE (9u)
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_QUALITY_100__CHOICE (10u)

#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_GPS_CHOICE (0u)
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_GLONASS_CHOICE (1u)
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_RADIO__STATION_CHOICE (2u)
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_LOCAL__CESIUM_CLOCK_CHOICE (3u)
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_LOCAL__RUBIDIUM_CLOCK_CHOICE (4u)
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_LOCAL__CRYSTAL_CLOCK_CHOICE (5u)

#define N2K_PGN_126993_HEARTBEAT_CONTROLLER1_STATE_ERROR__ACTIVE_CHOICE (0u)
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER1_STATE_ERROR__PASSIVE_CHOICE (1u)
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER1_STATE_BUS__OFF_CHOICE (2u)

#define N2K_PGN_126993_HEARTBEAT_CONTROLLER2_STATE_ERROR__ACTIVE_CHOICE (0u)
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER2_STATE_ERROR__PASSIVE_CHOICE (1u)
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER2_STATE_BUS__OFF_CHOICE (2u)

#define N2K_PGN_126993_HEARTBEAT_EQUIPMENT_STATUS_OPERATIONAL_CHOICE (0u)
#define N2K_PGN_126993_HEARTBEAT_EQUIPMENT_STATUS_FAULT_CHOICE (1u)

#define N2K_PGN_127245_RUDDER_DIRECTION_ORDER_NO__ORDER_CHOICE (0u)
#define N2K_PGN_127245_RUDDER_DIRECTION_ORDER_MOVE_TO_STARBOARD_CHOICE (1u)
#define N2K_PGN_127245_RUDDER_DIRECTION_ORDER_MOVE_TO_PORT_CHOICE (2u)

#define N2K_PGN_127250_VESSEL_HEADING_REFERENCE_TRUE_CHOICE (0u)
#define N2K_PGN_127250_VESSEL_HEADING_REFERENCE_MAGNETIC_CHOICE (1u)
#define N2K_PGN_127250_VESSEL_HEADING_REFERENCE_ERROR_CHOICE (2u)

#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_MANUAL_CHOICE (0u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_AUTOMATIC__CHART_CHOICE (1u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_AUTOMATIC__TABLE_CHOICE (2u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_AUTOMATIC__CALCULATION_CHOICE (3u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_WMM_2000_CHOICE (4u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_WMM_2005_CHOICE (5u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_WMM_2010_CHOICE (6u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_WMM_2015_CHOICE (7u)
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_WMM_2020_CHOICE (8u)

#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_INSTANCE_SINGLE__ENGINE_OR__DUAL__ENGINE__PORT_CHOICE (0u)
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_INSTANCE_DUAL__ENGINE__STARBOARD_CHOICE (1u)

#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_INSTANCE_SINGLE__ENGINE_OR__DUAL__ENGINE__PORT_CHOICE (0u)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_INSTANCE_DUAL__ENGINE__STARBOARD_CHOICE (1u)

#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_TRANSMISSION_GEAR_FORWARD_CHOICE (0u)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_TRANSMISSION_GEAR_NEUTRAL_CHOICE (1u)
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_TRANSMISSION_GEAR_REVERSE_CHOICE (2u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR1_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR1_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR2_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR2_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR3_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR3_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR4_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR4_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR5_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR5_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR6_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR6_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR7_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR7_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR8_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR8_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR9_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR9_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR10_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR10_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR11_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR11_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR12_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR12_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR13_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR13_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR14_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR14_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR15_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR15_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR16_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR16_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR17_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR17_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR18_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR18_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR19_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR19_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR20_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR20_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR21_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR21_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR22_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR22_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR23_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR23_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR24_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR24_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR25_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR25_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR26_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR26_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR27_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR27_ON_CHOICE (1u)

#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR28_OFF_CHOICE (0u)
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR28_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH1_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH1_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH2_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH2_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH3_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH3_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH4_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH4_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH5_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH5_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH6_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH6_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH7_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH7_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH8_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH8_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH9_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH9_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH10_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH10_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH11_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH11_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH12_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH12_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH13_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH13_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH14_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH14_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH15_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH15_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH16_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH16_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH17_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH17_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH18_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH18_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH19_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH19_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH20_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH20_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH21_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH21_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH22_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH22_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH23_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH23_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH24_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH24_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH25_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH25_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH26_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH26_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH27_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH27_ON_CHOICE (1u)

#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH28_OFF_CHOICE (0u)
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH28_ON_CHOICE (1u)

#define N2K_PGN_127505_FLUID_LEVEL_TYPE_FUEL_CHOICE (0u)
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_WATER_CHOICE (1u)
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_GRAY_WATER_CHOICE (2u)
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_LIVE_WELL_CHOICE (3u)
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_OIL_CHOICE (4u)
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_BLACK_WATER_CHOICE (5u)

#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_OFF_CHOICE (0u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_LOW__POWER__MODE_CHOICE (1u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_FAULT_CHOICE (2u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_BULK_CHOICE (3u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_ABSORPTION_CHOICE (4u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_FLOAT_CHOICE (5u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_STORAGE_CHOICE (6u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_EQUALIZE_CHOICE (7u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_PASS_THRU_CHOICE (8u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_INVERTING_CHOICE (9u)
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_ASSISTING_CHOICE (10u)

#define N2K_PGN_127750_CONVERTER_STATUS_TEMPERATURE_STATE_GOOD_CHOICE (0u)
#define N2K_PGN_127750_CONVERTER_STATUS_TEMPERATURE_STATE_WARNING_CHOICE (1u)
#define N2K_PGN_127750_CONVERTER_STATUS_TEMPERATURE_STATE_ERROR_CHOICE (2u)

#define N2K_PGN_127750_CONVERTER_STATUS_OVERLOAD_STATE_GOOD_CHOICE (0u)
#define N2K_PGN_127750_CONVERTER_STATUS_OVERLOAD_STATE_WARNING_CHOICE (1u)
#define N2K_PGN_127750_CONVERTER_STATUS_OVERLOAD_STATE_ERROR_CHOICE (2u)

#define N2K_PGN_127750_CONVERTER_STATUS_LOW_DC_VOLTAGE_STATE_GOOD_CHOICE (0u)
#define N2K_PGN_127750_CONVERTER_STATUS_LOW_DC_VOLTAGE_STATE_WARNING_CHOICE (1u)
#define N2K_PGN_127750_CONVERTER_STATUS_LOW_DC_VOLTAGE_STATE_ERROR_CHOICE (2u)

#define N2K_PGN_127750_CONVERTER_STATUS_RIPPLE_STATE_GOOD_CHOICE (0u)
#define N2K_PGN_127750_CONVERTER_STATUS_RIPPLE_STATE_WARNING_CHOICE (1u)
#define N2K_PGN_127750_CONVERTER_STATUS_RIPPLE_STATE_ERROR_CHOICE (2u)

#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_DIRECTION_CONTROL_OFF_CHOICE (0u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_DIRECTION_CONTROL_READY_CHOICE (1u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_DIRECTION_CONTROL_TO__PORT_CHOICE (2u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_DIRECTION_CONTROL_TO__STARBOARD_CHOICE (3u)

#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_POWER_ENABLED_OFF_CHOICE (0u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_POWER_ENABLED_ON_CHOICE (1u)

#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_RETRACT_CONTROL_OFF_CHOICE (0u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_RETRACT_CONTROL_EXTEND_CHOICE (1u)
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_RETRACT_CONTROL_RETRACT_CHOICE (2u)

#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_12_VDC_CHOICE (0u)
#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_24_VDC_CHOICE (1u)
#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_48_VDC_CHOICE (2u)
#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_24_VAC_CHOICE (3u)
#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_HYDRAULIC_CHOICE (4u)

#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_PADDLE_WHEEL_CHOICE (0u)
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_PITOT_TUBE_CHOICE (1u)
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_DOPPLER_CHOICE (2u)
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_CORRELATION__ULTRA_SOUND__CHOICE (3u)
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_ELECTRO__MAGNETIC_CHOICE (4u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_DIRECTION_CONTROL_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_DIRECTION_CONTROL_DOWN_CHOICE (1u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_DIRECTION_CONTROL_UP_CHOICE (2u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_DOCKING_CONTROL_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_DOCKING_CONTROL_ON_CHOICE (1u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SPEED_CONTROL_TYPE_SINGLE_SPEED_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SPEED_CONTROL_TYPE_DUAL_SPEED_CHOICE (1u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SPEED_CONTROL_TYPE_PROPORTIONAL_SPEED_CHOICE (2u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_POWER_ENABLE_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_POWER_ENABLE_ON_CHOICE (1u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_MECHANICAL_LOCK_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_MECHANICAL_LOCK_ON_CHOICE (1u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_DECK_AND_ANCHOR_WASH_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_DECK_AND_ANCHOR_WASH_ON_CHOICE (1u)

#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_LIGHT_OFF_CHOICE (0u)
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_LIGHT_ON_CHOICE (1u)

#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_DIRECTION_CONTROL_OFF_CHOICE (0u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_DIRECTION_CONTROL_DOWN_CHOICE (1u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_DIRECTION_CONTROL_UP_CHOICE (2u)

#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_MOTION_STATUS_WINDLASS_STOPPED_CHOICE (0u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_MOTION_STATUS_DEPLOYMENT_OCCURRING_CHOICE (1u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_MOTION_STATUS_RETRIEVAL_OCCURRING_CHOICE (2u)

#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_RODE_TYPE_STATUS_CHAIN_PRESENTLY_DETECTED_CHOICE (0u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_RODE_TYPE_STATUS_ROPE_PRESENTLY_DETECTED_CHOICE (1u)

#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_ANCHOR_DOCKING_STATUS_NOT_DOCKED_CHOICE (0u)
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_ANCHOR_DOCKING_STATUS_FULLY_DOCKED_CHOICE (1u)

#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_COG_REFERENCE_TRUE_CHOICE (0u)
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_COG_REFERENCE_MAGNETIC_CHOICE (1u)
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_COG_REFERENCE_ERROR_CHOICE (2u)

#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_AUTONOMOUS_CHOICE (0u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_DIFFERENTIAL_ENHANCED_CHOICE (1u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_ESTIMATED_CHOICE (2u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_SIMULATOR_CHOICE (3u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_MANUAL_CHOICE (4u)

#define N2K_PGN_129283_CROSS_TRACK_ERROR_NAVIGATION_TERMINATED_NO_CHOICE (0u)
#define N2K_PGN_129283_CROSS_TRACK_ERROR_NAVIGATION_TERMINATED_YES_CHOICE (1u)

#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SET_REFERENCE_TRUE_CHOICE (0u)
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SET_REFERENCE_MAGNETIC_CHOICE (1u)
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SET_REFERENCE_ERROR_CHOICE (2u)

#define N2K_PGN_129539_GNSS_DOPS_DESIRED_MODE_1_D_CHOICE (0u)
#define N2K_PGN_129539_GNSS_DOPS_DESIRED_MODE_2_D_CHOICE (1u)
#define N2K_PGN_129539_GNSS_DOPS_DESIRED_MODE_3_D_CHOICE (2u)
#define N2K_PGN_129539_GNSS_DOPS_DESIRED_MODE_AUTO_CHOICE (3u)

#define N2K_PGN_129539_GNSS_DOPS_ACTUAL_MODE_1_D_CHOICE (0u)
#define N2K_PGN_129539_GNSS_DOPS_ACTUAL_MODE_2_D_CHOICE (1u)
#define N2K_PGN_129539_GNSS_DOPS_ACTUAL_MODE_3_D_CHOICE (2u)
#define N2K_PGN_129539_GNSS_DOPS_ACTUAL_MODE_AUTO_CHOICE (3u)

#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_25_CHOICE (0u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_50_CHOICE (1u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_100_CHOICE (2u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_200_CHOICE (3u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_300_CHOICE (4u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_600_CHOICE (5u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_1200_CHOICE (6u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_2400_CHOICE (7u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_4800_CHOICE (8u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_9600_CHOICE (9u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_19200_10_CHOICE (10u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_19200_11_CHOICE (11u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_38400_CHOICE (12u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_57600_CHOICE (13u)

#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_DETECTION_MODE_AUTO_BIT_RATE_CHOICE (0u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_DETECTION_MODE_MANUAL_BIT_RATE_CHOICE (1u)

#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_AUTO_CHOICE (0u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_LORAN_CHOICE (1u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_MSK__BEACON_CHOICE (2u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_FM__SUBCARRIER_CHOICE (3u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_AIS_CHOICE (4u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_GROUND_BASED_RADIO_CHOICE (5u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_SBAS_CHOICE (6u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_SATELLITE_CHOICE (7u)

#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_OPERATION_MODE_MANUAL_CHOICE (0u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_OPERATION_MODE_AUTO__POWER_CHOICE (1u)
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_OPERATION_MODE_AUTO__RANGE_CHOICE (2u)

#define N2K_PGN_130306_WIND_DATA_REFERENCE_TRUE__GROUND_REFERENCED_TO__NORTH__CHOICE (0u)
#define N2K_PGN_130306_WIND_DATA_REFERENCE_MAGNETIC__GROUND_REFERENCED_TO__MAGNETIC__NORTH__CHOICE (1u)
#define N2K_PGN_130306_WIND_DATA_REFERENCE_APPARENT_CHOICE (2u)
#define N2K_PGN_130306_WIND_DATA_REFERENCE_TRUE__BOAT_REFERENCED__CHOICE (3u)
#define N2K_PGN_130306_WIND_DATA_REFERENCE_TRUE__WATER_REFERENCED__CHOICE (4u)

#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_SEA__TEMPERATURE_CHOICE (0u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_OUTSIDE__TEMPERATURE_CHOICE (1u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_INSIDE__TEMPERATURE_CHOICE (2u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_ENGINE__ROOM__TEMPERATURE_CHOICE (3u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_MAIN__CABIN__TEMPERATURE_CHOICE (4u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_LIVE__WELL__TEMPERATURE_CHOICE (5u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_BAIT__WELL__TEMPERATURE_CHOICE (6u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_REFRIGERATION__TEMPERATURE_CHOICE (7u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_HEATING__SYSTEM__TEMPERATURE_CHOICE (8u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_DEW__POINT__TEMPERATURE_CHOICE (9u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_APPARENT__WIND__CHILL__TEMPERATURE_CHOICE (10u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_THEORETICAL__WIND__CHILL__TEMPERATURE_CHOICE (11u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_HEAT__INDEX__TEMPERATURE_CHOICE (12u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_FREEZER__TEMPERATURE_CHOICE (13u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_EXHAUST__GAS__TEMPERATURE_CHOICE (14u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_SHAFT__SEAL__TEMPERATURE_CHOICE (15u)

#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_HUMIDITY_SOURCE_INSIDE_CHOICE (0u)
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_HUMIDITY_SOURCE_OUTSIDE_CHOICE (1u)

#define N2K_PGN_130312_TEMPERATURE_SOURCE_SEA__TEMPERATURE_CHOICE (0u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_OUTSIDE__TEMPERATURE_CHOICE (1u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_INSIDE__TEMPERATURE_CHOICE (2u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_ENGINE__ROOM__TEMPERATURE_CHOICE (3u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_MAIN__CABIN__TEMPERATURE_CHOICE (4u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_LIVE__WELL__TEMPERATURE_CHOICE (5u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_BAIT__WELL__TEMPERATURE_CHOICE (6u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_REFRIGERATION__TEMPERATURE_CHOICE (7u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_HEATING__SYSTEM__TEMPERATURE_CHOICE (8u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_DEW__POINT__TEMPERATURE_CHOICE (9u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_APPARENT__WIND__CHILL__TEMPERATURE_CHOICE (10u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_THEORETICAL__WIND__CHILL__TEMPERATURE_CHOICE (11u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_HEAT__INDEX__TEMPERATURE_CHOICE (12u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_FREEZER__TEMPERATURE_CHOICE (13u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_EXHAUST__GAS__TEMPERATURE_CHOICE (14u)
#define N2K_PGN_130312_TEMPERATURE_SOURCE_SHAFT__SEAL__TEMPERATURE_CHOICE (15u)

#define N2K_PGN_130313_HUMIDITY_SOURCE_INSIDE_CHOICE (0u)
#define N2K_PGN_130313_HUMIDITY_SOURCE_OUTSIDE_CHOICE (1u)

#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_ATMOSPHERIC_CHOICE (0u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_WATER_CHOICE (1u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_STEAM_CHOICE (2u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_COMPRESSED__AIR_CHOICE (3u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_HYDRAULIC_CHOICE (4u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_FILTER_CHOICE (5u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_ALTIMETER_SETTING_CHOICE (6u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_OIL_CHOICE (7u)
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_FUEL_CHOICE (8u)

#define N2K_PGN_130315_SET_PRESSURE_SOURCE_ATMOSPHERIC_CHOICE (0u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_WATER_CHOICE (1u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_STEAM_CHOICE (2u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_COMPRESSED__AIR_CHOICE (3u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_HYDRAULIC_CHOICE (4u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_FILTER_CHOICE (5u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_ALTIMETER_SETTING_CHOICE (6u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_OIL_CHOICE (7u)
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_FUEL_CHOICE (8u)

#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_SEA__TEMPERATURE_CHOICE (0u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_OUTSIDE__TEMPERATURE_CHOICE (1u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_INSIDE__TEMPERATURE_CHOICE (2u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_ENGINE__ROOM__TEMPERATURE_CHOICE (3u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_MAIN__CABIN__TEMPERATURE_CHOICE (4u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_LIVE__WELL__TEMPERATURE_CHOICE (5u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_BAIT__WELL__TEMPERATURE_CHOICE (6u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_REFRIGERATION__TEMPERATURE_CHOICE (7u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_HEATING__SYSTEM__TEMPERATURE_CHOICE (8u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_DEW__POINT__TEMPERATURE_CHOICE (9u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_APPARENT__WIND__CHILL__TEMPERATURE_CHOICE (10u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_THEORETICAL__WIND__CHILL__TEMPERATURE_CHOICE (11u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_HEAT__INDEX__TEMPERATURE_CHOICE (12u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_FREEZER__TEMPERATURE_CHOICE (13u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_EXHAUST__GAS__TEMPERATURE_CHOICE (14u)
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_SHAFT__SEAL__TEMPERATURE_CHOICE (15u)

#define N2K_PGN_130579_SYSTEM_CONFIGURATION_POWER_NO_CHOICE (0u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_POWER_YES_CHOICE (1u)

#define N2K_PGN_130579_SYSTEM_CONFIGURATION_DEFAULT_SETTINGS_SAVE_CURRENT_SETTINGS_AS_USER_DEFAULT_CHOICE (0u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_DEFAULT_SETTINGS_LOAD_USER_DEFAULT_CHOICE (1u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_DEFAULT_SETTINGS_LOAD_MANUFACTURER_DEFAULT_CHOICE (2u)

#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_USA_CHOICE (0u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_EUROPE_CHOICE (1u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_ASIA_CHOICE (2u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_MIDDLE__EAST_CHOICE (3u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_LATIN__AMERICA_CHOICE (4u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_AUSTRALIA_CHOICE (5u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_RUSSIA_CHOICE (6u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_JAPAN_CHOICE (7u)

#define N2K_PGN_130579_SYSTEM_CONFIGURATION_VIDEO_PROTOCOLS_PAL_CHOICE (0u)
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_VIDEO_PROTOCOLS_NTSC_CHOICE (1u)

#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_ALL_ZONES_CHOICE (0u)
#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_ZONE_1_CHOICE (1u)
#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_ZONE_2_CHOICE (2u)
#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_ZONE_3_CHOICE (3u)
#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_ZONE_4_CHOICE (4u)

#define N2K_PGN_130582_ZONE_VOLUME_VOLUME_CHANGE_UP_CHOICE (0u)
#define N2K_PGN_130582_ZONE_VOLUME_VOLUME_CHANGE_DOWN_CHOICE (1u)

#define N2K_PGN_130582_ZONE_VOLUME_MUTE_NO_CHOICE (0u)
#define N2K_PGN_130582_ZONE_VOLUME_MUTE_YES_CHOICE (1u)

#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_ALL_CHANNELS_CHOICE (0u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_STEREO_FULL_RANGE_CHOICE (1u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_STEREO_FRONT_CHOICE (2u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_STEREO_BACK_CHOICE (3u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_STEREO_SURROUND_CHOICE (4u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_CENTER_CHOICE (5u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_SUBWOOFER_CHOICE (6u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_FRONT_LEFT_CHOICE (7u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_FRONT_RIGHT_CHOICE (8u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_BACK_LEFT_CHOICE (9u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_BACK_RIGHT_CHOICE (10u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_SURROUND_LEFT_CHOICE (11u)
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_SURROUND_RIGHT_CHOICE (12u)

#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_STATUS_RESERVED_CHOICE (0u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_STATUS_CONNECTED_CHOICE (1u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_STATUS_CONNECTING_CHOICE (2u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_STATUS_NOT_CONNECTED_CHOICE (3u)

#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_FORGET_DEVICE_NO_CHOICE (0u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_FORGET_DEVICE_YES_CHOICE (1u)

#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_DISCOVERING_NO_CHOICE (0u)
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_DISCOVERING_YES_CHOICE (1u)

/* Frame Names. */
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_NAME "PGN_65380_Actuator_Command_Port_Engine"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_NAME "PGN_65381_Actuator_Command_Stbd_Engine"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_NAME "PGN_65382_Actuator_Command_Center_Engine"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_NAME "PGN_65383_Actuator_Command_Stbd_Center_Engine"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_NAME "PGN_65385_Actuator_Feedback"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_NAME "PGN_65390_Control_Head_Feedback"
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_NAME "PGN_59392_isoAcknowledgement"
#define N2K_PGN_59904_ISO_REQUEST_NAME "PGN_59904_isoRequest"
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_NAME "PGN_60160_isoTransportProtocolDataTransfer"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_NAME "PGN_60928_isoAddressClaim"
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_NAME "PGN_65001_bus1PhaseCBasicAcQuantities"
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_NAME "PGN_65002_bus1PhaseBBasicAcQuantities"
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_NAME "PGN_65003_bus1PhaseABasicAcQuantities"
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_NAME "PGN_65004_bus1AverageBasicAcQuantities"
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_NAME "PGN_65005_utilityTotalAcEnergy"
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_NAME "PGN_65006_utilityPhaseCAcReactivePower"
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_NAME "PGN_65007_utilityPhaseCAcPower"
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_NAME "PGN_65008_utilityPhaseCBasicAcQuantities"
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_NAME "PGN_65009_utilityPhaseBAcReactivePower"
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_NAME "PGN_65010_utilityPhaseBAcPower"
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_NAME "PGN_65011_utilityPhaseBBasicAcQuantities"
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_NAME "PGN_65012_utilityPhaseAAcReactivePower"
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_NAME "PGN_65013_utilityPhaseAAcPower"
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_NAME "PGN_65014_utilityPhaseABasicAcQuantities"
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_NAME "PGN_65015_utilityTotalAcReactivePower"
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_NAME "PGN_65016_utilityTotalAcPower"
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_NAME "PGN_65017_utilityAverageBasicAcQuantities"
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_NAME "PGN_65018_generatorTotalAcEnergy"
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_NAME "PGN_65019_generatorPhaseCAcReactivePower"
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_NAME "PGN_65020_generatorPhaseCAcPower"
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_NAME "PGN_65021_generatorPhaseCBasicAcQuantities"
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_NAME "PGN_65022_generatorPhaseBAcReactivePower"
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_NAME "PGN_65023_generatorPhaseBAcPower"
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_NAME "PGN_65024_generatorPhaseBBasicAcQuantities"
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_NAME "PGN_65025_generatorPhaseAAcReactivePower"
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_NAME "PGN_65026_generatorPhaseAAcPower"
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_NAME "PGN_65027_generatorPhaseABasicAcQuantities"
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_NAME "PGN_65028_generatorTotalAcReactivePower"
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_NAME "PGN_65029_generatorTotalAcPower"
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_NAME "PGN_65030_generatorAverageBasicAcQuantities"
#define N2K_PGN_65280_FURUNO_HEAVE_NAME "PGN_65280_furunoHeave"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_NAME "PGN_65284_maretronProprietaryDcBreakerCurrent"
#define N2K_PGN_65288_SEATALK_ALARM_NAME "PGN_65288_seatalkAlarm"
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_NAME "PGN_65289_simnetTrimTabSensorCalibration"
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_NAME "PGN_65290_simnetPaddleWheelSpeedConfiguration"
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_NAME "PGN_65292_simnetClearFluidLevelWarnings"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_NAME "PGN_65302_simnetApUnknown1"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_NAME "PGN_65309_navicoWirelessBatteryStatus"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_NAME "PGN_65312_navicoWirelessSignalStatus"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_NAME "PGN_65340_simnetApUnknown2"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_NAME "PGN_65341_simnetAutopilotAngle"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_NAME "PGN_65345_seatalkPilotWindDatum"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_NAME "PGN_65350_simnetMagneticField"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_NAME "PGN_65359_seatalkPilotHeading"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_NAME "PGN_65360_seatalkPilotLockedHeading"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_NAME "PGN_65361_seatalkSilenceAlarm"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_NAME "PGN_65371_seatalkKeypadMessage"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_NAME "PGN_65374_seatalkKeypadHeartbeat"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_NAME "PGN_65379_seatalkPilotMode"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_NAME "PGN_65408_airmarDepthQualityFactor"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_NAME "PGN_65409_airmarSpeedPulseCount"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_NAME "PGN_65410_airmarDeviceInformation"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_NAME "PGN_65420_simnetApUnknown3"
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_NAME "PGN_65480_simnetAutopilotMode"
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_NAME "PGN_126464_pgnListTransmitAndReceive"
#define N2K_PGN_126983_ALERT_NAME "PGN_126983_alert"
#define N2K_PGN_126984_ALERT_RESPONSE_NAME "PGN_126984_alertResponse"
#define N2K_PGN_126985_ALERT_TEXT_NAME "PGN_126985_alertText"
#define N2K_PGN_126986_ALERT_CONFIGURATION_NAME "PGN_126986_alertConfiguration"
#define N2K_PGN_126987_ALERT_THRESHOLD_NAME "PGN_126987_alertThreshold"
#define N2K_PGN_126988_ALERT_VALUE_NAME "PGN_126988_alertValue"
#define N2K_PGN_126992_SYSTEM_TIME_NAME "PGN_126992_systemTime"
#define N2K_PGN_126993_HEARTBEAT_NAME "PGN_126993_heartbeat"
#define N2K_PGN_126996_PRODUCT_INFORMATION_NAME "PGN_126996_productInformation"
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_NAME "PGN_126998_configurationInformation"
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_NAME "PGN_127233_manOverboardNotification"
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_NAME "PGN_127237_headingTrackControl"
#define N2K_PGN_127245_RUDDER_NAME "PGN_127245_rudder"
#define N2K_PGN_127250_VESSEL_HEADING_NAME "PGN_127250_vesselHeading"
#define N2K_PGN_127251_RATE_OF_TURN_NAME "PGN_127251_rateOfTurn"
#define N2K_PGN_127252_HEAVE_NAME "PGN_127252_heave"
#define N2K_PGN_127257_ATTITUDE_NAME "PGN_127257_attitude"
#define N2K_PGN_127258_MAGNETIC_VARIATION_NAME "PGN_127258_magneticVariation"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_NAME "PGN_127488_engineParametersRapidUpdate"
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_NAME "PGN_127489_engineParametersDynamic"
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_NAME "PGN_127490_electricDriveStatusDynamic"
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_NAME "PGN_127491_electricEnergyStorageStatusDynamic"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_NAME "PGN_127493_transmissionParametersDynamic"
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_NAME "PGN_127494_electricDriveInformation"
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_NAME "PGN_127495_electricEnergyStorageInformation"
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_NAME "PGN_127496_tripParametersVessel"
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_NAME "PGN_127497_tripParametersEngine"
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_NAME "PGN_127498_engineParametersStatic"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_NAME "PGN_127500_loadControllerConnectionStateControl"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_NAME "PGN_127501_binarySwitchBankStatus"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_NAME "PGN_127502_switchBankControl"
#define N2K_PGN_127503_AC_INPUT_STATUS_NAME "PGN_127503_acInputStatus"
#define N2K_PGN_127504_AC_OUTPUT_STATUS_NAME "PGN_127504_acOutputStatus"
#define N2K_PGN_127505_FLUID_LEVEL_NAME "PGN_127505_fluidLevel"
#define N2K_PGN_127506_DC_DETAILED_STATUS_NAME "PGN_127506_dcDetailedStatus"
#define N2K_PGN_127507_CHARGER_STATUS_NAME "PGN_127507_chargerStatus"
#define N2K_PGN_127508_BATTERY_STATUS_NAME "PGN_127508_batteryStatus"
#define N2K_PGN_127509_INVERTER_STATUS_NAME "PGN_127509_inverterStatus"
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_NAME "PGN_127510_chargerConfigurationStatus"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_NAME "PGN_127511_inverterConfigurationStatus"
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_NAME "PGN_127512_agsConfigurationStatus"
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_NAME "PGN_127513_batteryConfigurationStatus"
#define N2K_PGN_127514_AGS_STATUS_NAME "PGN_127514_agsStatus"
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_NAME "PGN_127744_acPowerCurrentPhaseA"
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_NAME "PGN_127745_acPowerCurrentPhaseB"
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_NAME "PGN_127746_acPowerCurrentPhaseC"
#define N2K_PGN_127750_CONVERTER_STATUS_NAME "PGN_127750_converterStatus"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_NAME "PGN_127751_dcVoltageCurrent"
#define N2K_PGN_128000_LEEWAY_ANGLE_NAME "PGN_128000_leewayAngle"
#define N2K_PGN_128001_VESSEL_ACCELERATION_NAME "PGN_128001_vesselAcceleration"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_NAME "PGN_128002_electricDriveStatusRapidUpdate"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_NAME "PGN_128003_electricEnergyStorageStatusRapidUpdate"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_NAME "PGN_128006_thrusterControlStatus"
#define N2K_PGN_128007_THRUSTER_INFORMATION_NAME "PGN_128007_thrusterInformation"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_NAME "PGN_128008_thrusterMotorStatus"
#define N2K_PGN_128259_SPEED_NAME "PGN_128259_speed"
#define N2K_PGN_128267_WATER_DEPTH_NAME "PGN_128267_waterDepth"
#define N2K_PGN_128275_DISTANCE_LOG_NAME "PGN_128275_distanceLog"
#define N2K_PGN_128520_TRACKED_TARGET_DATA_NAME "PGN_128520_trackedTargetData"
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_NAME "PGN_128538_elevatorCarStatus"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_NAME "PGN_128768_elevatorMotorControl"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_NAME "PGN_128769_elevatorDeckPushButton"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_NAME "PGN_128776_windlassControlStatus"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_NAME "PGN_128777_anchorWindlassOperatingStatus"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_NAME "PGN_128778_anchorWindlassMonitoringStatus"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_NAME "PGN_128780_linearActuatorControlStatus"
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_NAME "PGN_129025_positionRapidUpdate"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_NAME "PGN_129026_cogSogRapidUpdate"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_NAME "PGN_129027_positionDeltaRapidUpdate"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_NAME "PGN_129028_altitudeDeltaRapidUpdate"
#define N2K_PGN_129029_GNSS_POSITION_DATA_NAME "PGN_129029_gnssPositionData"
#define N2K_PGN_129033_TIME_DATE_NAME "PGN_129033_timeDate"
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_NAME "PGN_129038_aisClassAPositionReport"
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_NAME "PGN_129039_aisClassBPositionReport"
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_NAME "PGN_129040_aisClassBExtendedPositionReport"
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_NAME "PGN_129041_aisAidsToNavigationAtonReport"
#define N2K_PGN_129044_DATUM_NAME "PGN_129044_datum"
#define N2K_PGN_129045_USER_DATUM_NAME "PGN_129045_userDatum"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_NAME "PGN_129283_crossTrackError"
#define N2K_PGN_129284_NAVIGATION_DATA_NAME "PGN_129284_navigationData"
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_NAME "PGN_129285_navigationRouteWpInformation"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_NAME "PGN_129291_setDriftRapidUpdate"
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_NAME "PGN_129301_navigationRouteTimeToFromMark"
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_NAME "PGN_129302_bearingAndDistanceBetweenTwoMarks"
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_NAME "PGN_129538_gnssControlStatus"
#define N2K_PGN_129539_GNSS_DOPS_NAME "PGN_129539_gnssDops"
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_NAME "PGN_129540_gnssSatsInView"
#define N2K_PGN_129541_GPS_ALMANAC_DATA_NAME "PGN_129541_gpsAlmanacData"
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_NAME "PGN_129542_gnssPseudorangeNoiseStatistics"
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_NAME "PGN_129545_gnssRaimOutput"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_NAME "PGN_129546_gnssRaimSettings"
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_NAME "PGN_129547_gnssPseudorangeErrorStatistics"
#define N2K_PGN_129549_DGNSS_CORRECTIONS_NAME "PGN_129549_dgnssCorrections"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_NAME "PGN_129550_gnssDifferentialCorrectionReceiverInterface"
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_NAME "PGN_129551_gnssDifferentialCorrectionReceiverSignal"
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_NAME "PGN_129556_glonassAlmanacData"
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_NAME "PGN_129792_aisDgnssBroadcastBinaryMessage"
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_NAME "PGN_129793_aisUtcAndDateReport"
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_NAME "PGN_129794_aisClassAStaticAndVoyageRelatedData"
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_NAME "PGN_129795_aisAddressedBinaryMessage"
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_NAME "PGN_129796_aisAcknowledge"
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_NAME "PGN_129797_aisBinaryBroadcastMessage"
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_NAME "PGN_129798_aisSarAircraftPositionReport"
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_NAME "PGN_129799_radioFrequencyModePower"
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_NAME "PGN_129800_aisUtcDateInquiry"
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_NAME "PGN_129801_aisAddressedSafetyRelatedMessage"
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_NAME "PGN_129802_aisSafetyRelatedBroadcastMessage"
#define N2K_PGN_129803_AIS_INTERROGATION_NAME "PGN_129803_aisInterrogation"
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_NAME "PGN_129804_aisAssignmentModeCommand"
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_NAME "PGN_129805_aisDataLinkManagementMessage"
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_NAME "PGN_129806_aisChannelManagement"
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_NAME "PGN_129807_aisClassBGroupAssignment"
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_NAME "PGN_129809_aisClassBStaticDataMsg24PartA"
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_NAME "PGN_129810_aisClassBStaticDataMsg24PartB"
#define N2K_PGN_130052_LORAN_C_TD_DATA_NAME "PGN_130052_loranCTdData"
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_NAME "PGN_130053_loranCRangeData"
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_NAME "PGN_130054_loranCSignalData"
#define N2K_PGN_130060_LABEL_NAME "PGN_130060_label"
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_NAME "PGN_130061_channelSourceConfiguration"
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_NAME "PGN_130064_routeAndWpServiceDatabaseList"
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_NAME "PGN_130065_routeAndWpServiceRouteList"
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_NAME "PGN_130066_routeAndWpServiceRouteWpListAttributes"
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_NAME "PGN_130067_routeAndWpServiceRouteWpNamePosition"
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_NAME "PGN_130068_routeAndWpServiceRouteWpName"
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_NAME "PGN_130069_routeAndWpServiceXteLimitNavigationMethod"
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_NAME "PGN_130070_routeAndWpServiceWpComment"
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_NAME "PGN_130071_routeAndWpServiceRouteComment"
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_NAME "PGN_130072_routeAndWpServiceDatabaseComment"
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_NAME "PGN_130073_routeAndWpServiceRadiusOfTurn"
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_NAME "PGN_130074_routeAndWpServiceWpListWpNamePosition"
#define N2K_PGN_130306_WIND_DATA_NAME "PGN_130306_windData"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_NAME "PGN_130310_environmentalParametersObsolete"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_NAME "PGN_130311_environmentalParameters"
#define N2K_PGN_130312_TEMPERATURE_NAME "PGN_130312_temperature"
#define N2K_PGN_130313_HUMIDITY_NAME "PGN_130313_humidity"
#define N2K_PGN_130314_ACTUAL_PRESSURE_NAME "PGN_130314_actualPressure"
#define N2K_PGN_130315_SET_PRESSURE_NAME "PGN_130315_setPressure"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_NAME "PGN_130316_temperatureExtendedRange"
#define N2K_PGN_130320_TIDE_STATION_DATA_NAME "PGN_130320_tideStationData"
#define N2K_PGN_130321_SALINITY_STATION_DATA_NAME "PGN_130321_salinityStationData"
#define N2K_PGN_130322_CURRENT_STATION_DATA_NAME "PGN_130322_currentStationData"
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_NAME "PGN_130323_meteorologicalStationData"
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_NAME "PGN_130324_mooredBuoyStationData"
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_NAME "PGN_130330_lightingSystemSettings"
#define N2K_PGN_130560_PAYLOAD_MASS_NAME "PGN_130560_payloadMass"
#define N2K_PGN_130561_LIGHTING_ZONE_NAME "PGN_130561_lightingZone"
#define N2K_PGN_130562_LIGHTING_SCENE_NAME "PGN_130562_lightingScene"
#define N2K_PGN_130563_LIGHTING_DEVICE_NAME "PGN_130563_lightingDevice"
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_NAME "PGN_130564_lightingDeviceEnumeration"
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_NAME "PGN_130565_lightingColorSequence"
#define N2K_PGN_130566_LIGHTING_PROGRAM_NAME "PGN_130566_lightingProgram"
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_NAME "PGN_130567_watermakerInputSettingAndStatus"
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_NAME "PGN_130569_currentStatusAndFile"
#define N2K_PGN_130570_LIBRARY_DATA_FILE_NAME "PGN_130570_libraryDataFile"
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_NAME "PGN_130571_libraryDataGroup"
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_NAME "PGN_130572_libraryDataSearch"
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_NAME "PGN_130573_supportedSourceData"
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_NAME "PGN_130574_supportedZoneData"
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_NAME "PGN_130576_smallCraftStatus"
#define N2K_PGN_130577_DIRECTION_DATA_NAME "PGN_130577_directionData"
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_NAME "PGN_130578_vesselSpeedComponents"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_NAME "PGN_130579_systemConfiguration"
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_NAME "PGN_130580_systemConfigurationDeprecated"
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_NAME "PGN_130581_zoneConfigurationDeprecated"
#define N2K_PGN_130582_ZONE_VOLUME_NAME "PGN_130582_zoneVolume"
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_NAME "PGN_130583_availableAudioEqPresets"
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_NAME "PGN_130584_availableBluetoothAddresses"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_NAME "PGN_130585_bluetoothSourceStatus"
#define N2K_PGN_130586_ZONE_CONFIGURATION_NAME "PGN_130586_zoneConfiguration"
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_NAME "PGN_130818_simnetReprogramData"
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_NAME "PGN_130819_simnetRequestReprogram"
#define N2K_PGN_130822_NAVICO_UNKNOWN1_NAME "PGN_130822_navicoUnknown1"
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_NAME "PGN_130823_maretronProprietaryTemperatureHighRange"
#define N2K_PGN_130825_NAVICO_UNKNOWN2_NAME "PGN_130825_navicoUnknown2"
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_NAME "PGN_130827_lowranceUnknown"
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_NAME "PGN_130828_simnetSetSerialNumber"
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_NAME "PGN_130831_suzukiEngineAndStorageDeviceConfig"
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_NAME "PGN_130832_simnetFuelUsedHighResolution"
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_NAME "PGN_130833_bGUserAndRemoteRename"
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_NAME "PGN_130834_simnetEngineAndTankConfiguration"
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_NAME "PGN_130835_simnetSetEngineAndTankConfiguration"
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_NAME "PGN_130838_simnetFluidLevelWarning"
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_NAME "PGN_130839_simnetPressureSensorConfiguration"
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_NAME "PGN_130840_simnetDataUserGroupConfiguration"
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_NAME "PGN_130847_seatalkNodeStatistics"
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_NAME "PGN_130851_simnetEventReplyApCommand"
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_NAME "PGN_130856_simnetAlarmMessage"
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_NAME "PGN_130860_simnetApUnknown4"
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_NAME "PGN_130880_airmarAdditionalWeatherData"
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_NAME "PGN_130881_airmarHeaterControl"
#define N2K_PGN_130944_AIRMAR_POST_NAME "PGN_130944_airmarPost"

/* Signal Names. */
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_1_NAME "Reserved_1"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_INDUSTRY_GROUP_NAME "Industry_Group"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_SOURCE_INSTANCE_NAME "Source_Instance"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_2_NAME "Reserved_2"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_3_NAME "Reserved_3"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_GEAR_COMMAND_NAME "Gear_Command"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_4_NAME "Reserved_4"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_THROTTLE_COMMAND_NAME "Throttle_Command"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_5_NAME "Reserved_5"
#define N2K_PGN_65380_ACTUATOR_COMMAND_PORT_ENGINE_RESERVED_6_NAME "Reserved_6"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_1_NAME "Reserved_1"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_INDUSTRY_GROUP_NAME "Industry_Group"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_SOURCE_INSTANCE_NAME "Source_Instance"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_2_NAME "Reserved_2"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_3_NAME "Reserved_3"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_GEAR_COMMAND_NAME "Gear_Command"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_4_NAME "Reserved_4"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_THROTTLE_COMMAND_NAME "Throttle_Command"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_5_NAME "Reserved_5"
#define N2K_PGN_65381_ACTUATOR_COMMAND_STBD_ENGINE_RESERVED_6_NAME "Reserved_6"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_1_NAME "Reserved_1"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_INDUSTRY_GROUP_NAME "Industry_Group"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_SOURCE_INSTANCE_NAME "Source_Instance"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_2_NAME "Reserved_2"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_3_NAME "Reserved_3"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_GEAR_COMMAND_NAME "Gear_Command"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_4_NAME "Reserved_4"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_THROTTLE_COMMAND_NAME "Throttle_Command"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_5_NAME "Reserved_5"
#define N2K_PGN_65382_ACTUATOR_COMMAND_CENTER_ENGINE_RESERVED_6_NAME "Reserved_6"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_1_NAME "Reserved_1"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_INDUSTRY_GROUP_NAME "Industry_Group"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_SOURCE_INSTANCE_NAME "Source_Instance"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_2_NAME "Reserved_2"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_3_NAME "Reserved_3"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_GEAR_COMMAND_NAME "Gear_Command"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_4_NAME "Reserved_4"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_THROTTLE_COMMAND_NAME "Throttle_Command"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_5_NAME "Reserved_5"
#define N2K_PGN_65383_ACTUATOR_COMMAND_STBD_CENTER_ENGINE_RESERVED_6_NAME "Reserved_6"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_RESERVED_FIELD1_NAME "Reserved_field1"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_INDUSTRY_GROUP_NAME "Industry_group"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_ENGINE_INSTANCE_NAME "Engine_instance"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_ACTUATOR_TYPE_NAME "Actuator_type"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_RESERVED_FIELD2_NAME "Reserved_field2"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_ACTUAL_GEAR_VALUE_NAME "Actual_gear_value"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_CONTROL_STATE_NAME "Control_state"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_ACTUAL_THROTTLE_VALUE_NAME "Actual_throttle_value"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_RESERVED_FIELD3_NAME "Reserved_field3"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_DANGER_FAULT_NAME "Danger_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_WARNING_FAULT_NAME "Warning_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_SHIFT_FORWARD_MOTION_FAULT_NAME "Shift_forward_motion_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_SHIFT_NEUTRAL_MOTION_FAULT_NAME "Shift_neutral_motion_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_SHIFT_REVERSE_MOTION_FAULT_NAME "Shift_reverse_motion_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_THROTTLE_UP_MOTION_FAULT_NAME "Throttle_up_motion_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_THROTTLE_DOWN_MOTION_FAULT_NAME "Throttle_down_motion_fault"
#define N2K_PGN_65385_ACTUATOR_FEEDBACK_RESERVED_FIELD4_NAME "Reserved_field4"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_MANUFACTURER_ID_NAME "Manufacturer_ID"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_RESERVED_FIELD1_NAME "Reserved_field1"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_INDUSTRY_GROUP_NAME "Industry_group"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_SOURCE_INSTANCE_NAME "Source_instance"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_RESERVED_FIELD2_NAME "Reserved_field2"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_PORT_LEVER_GEAR_POSITION_NAME "Port_lever_gear_position"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_STBD_LEVER_GEAR_POSITION_NAME "Stbd_lever_gear_position"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_PORT_LEVER_THROTTLE_NAME "Port_lever_throttle"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_STBD_LEVER_THROTTLE_NAME "Stbd_lever_throttle"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_RESERVED_FIELD3_NAME "Reserved_field3"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_DANGER_FAULT_NAME "Danger_fault"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_WARNING_FAULT_NAME "Warning_fault"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_CH_CONTROLLING_NAME "CH_controlling"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_PORT_NTW_ACTIVE_NAME "Port_NTW_active"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_STBD_NTW_ACTIVE_NAME "Stbd_NTW_active"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_SYNC_MODE_ACTIVE_NAME "Sync_mode_active"
#define N2K_PGN_65390_CONTROL_HEAD_FEEDBACK_RESERVED_FIELD4_NAME "Reserved_field4"
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_CONTROL_NAME "control"
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_GROUP_FUNCTION_NAME "groupFunction"
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_RESERVED_NAME "reserved"
#define N2K_PGN_59392_ISO_ACKNOWLEDGEMENT_PGN_NAME "pgn"
#define N2K_PGN_59904_ISO_REQUEST_PGN_NAME "pgn"
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_SID_NAME "sid"
#define N2K_PGN_60160_ISO_TRANSPORT_PROTOCOL_DATA_TRANSFER_DATA_NAME "data"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_UNIQUE_NUMBER_NAME "uniqueNumber"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_INSTANCE_LOWER_NAME "deviceInstanceLower"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_INSTANCE_UPPER_NAME "deviceInstanceUpper"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_FUNCTION_NAME "deviceFunction"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_SPARE_NAME "spare"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_DEVICE_CLASS_NAME "deviceClass"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_SYSTEM_INSTANCE_NAME "systemInstance"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_INDUSTRY_GROUP_NAME "industryGroup"
#define N2K_PGN_60928_ISO_ADDRESS_CLAIM_ARBITRARY_ADDRESS_CAPABLE_NAME "arbitraryAddressCapable"
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65001_BUS1_PHASE_C_BASIC_AC_QUANTITIES_RESERVED_NAME "reserved"
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65002_BUS1_PHASE_B_BASIC_AC_QUANTITIES_RESERVED_NAME "reserved"
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65003_BUS1_PHASE_A_BASIC_AC_QUANTITIES_RESERVED_NAME "reserved"
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65004_BUS1_AVERAGE_BASIC_AC_QUANTITIES_RESERVED_NAME "reserved"
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_TOTAL_ENERGY_EXPORT_NAME "totalEnergyExport"
#define N2K_PGN_65005_UTILITY_TOTAL_AC_ENERGY_TOTAL_ENERGY_IMPORT_NAME "totalEnergyImport"
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65006_UTILITY_PHASE_C_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65007_UTILITY_PHASE_C_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65008_UTILITY_PHASE_C_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65009_UTILITY_PHASE_B_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65010_UTILITY_PHASE_B_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65011_UTILITY_PHASE_B_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65012_UTILITY_PHASE_A_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65013_UTILITY_PHASE_A_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65014_UTILITY_PHASE_A_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65015_UTILITY_TOTAL_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65016_UTILITY_TOTAL_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65017_UTILITY_AVERAGE_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_TOTAL_ENERGY_EXPORT_NAME "totalEnergyExport"
#define N2K_PGN_65018_GENERATOR_TOTAL_AC_ENERGY_TOTAL_ENERGY_IMPORT_NAME "totalEnergyImport"
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65019_GENERATOR_PHASE_C_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65020_GENERATOR_PHASE_C_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65021_GENERATOR_PHASE_C_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65022_GENERATOR_PHASE_B_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65023_GENERATOR_PHASE_B_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65024_GENERATOR_PHASE_B_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65025_GENERATOR_PHASE_A_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65026_GENERATOR_PHASE_A_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65027_GENERATOR_PHASE_A_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_REACTIVE_POWER_NAME "reactivePower"
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_NAME "powerFactor"
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_POWER_FACTOR_LAGGING_NAME "powerFactorLagging"
#define N2K_PGN_65028_GENERATOR_TOTAL_AC_REACTIVE_POWER_RESERVED_NAME "reserved"
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_REAL_POWER_NAME "realPower"
#define N2K_PGN_65029_GENERATOR_TOTAL_AC_POWER_APPARENT_POWER_NAME "apparentPower"
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_LINE_LINE_AC_RMS_VOLTAGE_NAME "lineLineAcRmsVoltage"
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_LINE_NEUTRAL_AC_RMS_VOLTAGE_NAME "lineNeutralAcRmsVoltage"
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_AC_FREQUENCY_NAME "acFrequency"
#define N2K_PGN_65030_GENERATOR_AVERAGE_BASIC_AC_QUANTITIES_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_65280_FURUNO_HEAVE_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65280_FURUNO_HEAVE_RESERVED_NAME "reserved"
#define N2K_PGN_65280_FURUNO_HEAVE_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65280_FURUNO_HEAVE_HEAVE_NAME "heave"
#define N2K_PGN_65280_FURUNO_HEAVE_RESERVED5_NAME "reserved5"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_RESERVED_NAME "reserved"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_BANK_INSTANCE_NAME "bankInstance"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_INDICATOR_NUMBER_NAME "indicatorNumber"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_BREAKER_CURRENT_NAME "breakerCurrent"
#define N2K_PGN_65284_MARETRON_PROPRIETARY_DC_BREAKER_CURRENT_RESERVED7_NAME "reserved7"
#define N2K_PGN_65288_SEATALK_ALARM_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65288_SEATALK_ALARM_RESERVED_NAME "reserved"
#define N2K_PGN_65288_SEATALK_ALARM_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65288_SEATALK_ALARM_SID_NAME "sid"
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_STATUS_NAME "alarmStatus"
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_ID_NAME "alarmId"
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_GROUP_NAME "alarmGroup"
#define N2K_PGN_65288_SEATALK_ALARM_ALARM_PRIORITY_NAME "alarmPriority"
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_RESERVED_NAME "reserved"
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65289_SIMNET_TRIM_TAB_SENSOR_CALIBRATION_RESERVED4_NAME "reserved4"
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_RESERVED_NAME "reserved"
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65290_SIMNET_PADDLE_WHEEL_SPEED_CONFIGURATION_RESERVED4_NAME "reserved4"
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_RESERVED_NAME "reserved"
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65292_SIMNET_CLEAR_FLUID_LEVEL_WARNINGS_RESERVED4_NAME "reserved4"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_RESERVED_NAME "reserved"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_A_NAME "a"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_B_NAME "b"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_C_NAME "c"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_D_NAME "d"
#define N2K_PGN_65302_SIMNET_AP_UNKNOWN1_RESERVED8_NAME "reserved8"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_STATUS_NAME "status"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_BATTERY_STATUS_NAME "batteryStatus"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_BATTERY_CHARGE_STATUS_NAME "batteryChargeStatus"
#define N2K_PGN_65309_NAVICO_WIRELESS_BATTERY_STATUS_RESERVED7_NAME "reserved7"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_UNKNOWN_NAME "unknown"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_SIGNAL_STRENGTH_NAME "signalStrength"
#define N2K_PGN_65312_NAVICO_WIRELESS_SIGNAL_STATUS_RESERVED6_NAME "reserved6"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_RESERVED_NAME "reserved"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_A_NAME "a"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_B_NAME "b"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_C_NAME "c"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_D_NAME "d"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_E_NAME "e"
#define N2K_PGN_65340_SIMNET_AP_UNKNOWN2_RESERVED9_NAME "reserved9"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_RESERVED_NAME "reserved"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_RESERVED4_NAME "reserved4"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_MODE_NAME "mode"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_RESERVED6_NAME "reserved6"
#define N2K_PGN_65341_SIMNET_AUTOPILOT_ANGLE_ANGLE_NAME "angle"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_RESERVED_NAME "reserved"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_WIND_DATUM_NAME "windDatum"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_ROLLING_AVERAGE_WIND_ANGLE_NAME "rollingAverageWindAngle"
#define N2K_PGN_65345_SEATALK_PILOT_WIND_DATUM_RESERVED6_NAME "reserved6"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_A_NAME "a"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_B_NAME "b"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_C_NAME "c"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_D_NAME "d"
#define N2K_PGN_65350_SIMNET_MAGNETIC_FIELD_RESERVED_NAME "reserved"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_RESERVED_NAME "reserved"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_SID_NAME "sid"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_HEADING_TRUE_NAME "headingTrue"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_HEADING_MAGNETIC_NAME "headingMagnetic"
#define N2K_PGN_65359_SEATALK_PILOT_HEADING_RESERVED7_NAME "reserved7"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_RESERVED_NAME "reserved"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_SID_NAME "sid"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_TARGET_HEADING_TRUE_NAME "targetHeadingTrue"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_TARGET_HEADING_MAGNETIC_NAME "targetHeadingMagnetic"
#define N2K_PGN_65360_SEATALK_PILOT_LOCKED_HEADING_RESERVED7_NAME "reserved7"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_RESERVED_NAME "reserved"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_ID_NAME "alarmId"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_ALARM_GROUP_NAME "alarmGroup"
#define N2K_PGN_65361_SEATALK_SILENCE_ALARM_RESERVED6_NAME "reserved6"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_RESERVED_NAME "reserved"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_PROPRIETARY_ID_NAME "proprietaryId"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_FIRST_KEY_NAME "firstKey"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_SECOND_KEY_NAME "secondKey"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_FIRST_KEY_STATE_NAME "firstKeyState"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_SECOND_KEY_STATE_NAME "secondKeyState"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_RESERVED9_NAME "reserved9"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_ENCODER_POSITION_NAME "encoderPosition"
#define N2K_PGN_65371_SEATALK_KEYPAD_MESSAGE_RESERVED11_NAME "reserved11"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_RESERVED_NAME "reserved"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_PROPRIETARY_ID_NAME "proprietaryId"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_VARIANT_NAME "variant"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_STATUS_NAME "status"
#define N2K_PGN_65374_SEATALK_KEYPAD_HEARTBEAT_RESERVED7_NAME "reserved7"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_RESERVED_NAME "reserved"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_NAME "pilotMode"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_SUB_MODE_NAME "subMode"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_PILOT_MODE_DATA_NAME "pilotModeData"
#define N2K_PGN_65379_SEATALK_PILOT_MODE_RESERVED7_NAME "reserved7"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_RESERVED_NAME "reserved"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_SID_NAME "sid"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_DEPTH_QUALITY_FACTOR_NAME "depthQualityFactor"
#define N2K_PGN_65408_AIRMAR_DEPTH_QUALITY_FACTOR_RESERVED6_NAME "reserved6"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_RESERVED_NAME "reserved"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_SID_NAME "sid"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_DURATION_OF_INTERVAL_NAME "durationOfInterval"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_NUMBER_OF_PULSES_RECEIVED_NAME "numberOfPulsesReceived"
#define N2K_PGN_65409_AIRMAR_SPEED_PULSE_COUNT_RESERVED7_NAME "reserved7"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_RESERVED_NAME "reserved"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_SID_NAME "sid"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_INTERNAL_DEVICE_TEMPERATURE_NAME "internalDeviceTemperature"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_SUPPLY_VOLTAGE_NAME "supplyVoltage"
#define N2K_PGN_65410_AIRMAR_DEVICE_INFORMATION_RESERVED7_NAME "reserved7"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_RESERVED_NAME "reserved"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_A_NAME "a"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_B_NAME "b"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_C_NAME "c"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_D_NAME "d"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_E_NAME "e"
#define N2K_PGN_65420_SIMNET_AP_UNKNOWN3_RESERVED9_NAME "reserved9"
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_MANUFACTURER_CODE_NAME "manufacturerCode"
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_RESERVED_NAME "reserved"
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_INDUSTRY_CODE_NAME "industryCode"
#define N2K_PGN_65480_SIMNET_AUTOPILOT_MODE_RESERVED4_NAME "reserved4"
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126464_PGN_LIST_TRANSMIT_AND_RECEIVE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126983_ALERT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126983_ALERT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126984_ALERT_RESPONSE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126984_ALERT_RESPONSE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126985_ALERT_TEXT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126985_ALERT_TEXT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126986_ALERT_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126986_ALERT_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126987_ALERT_THRESHOLD_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126987_ALERT_THRESHOLD_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126988_ALERT_VALUE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126988_ALERT_VALUE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126992_SYSTEM_TIME_SID_NAME "sid"
#define N2K_PGN_126992_SYSTEM_TIME_SOURCE_NAME "source"
#define N2K_PGN_126992_SYSTEM_TIME_RESERVED_NAME "reserved"
#define N2K_PGN_126992_SYSTEM_TIME_DATE_NAME "date"
#define N2K_PGN_126992_SYSTEM_TIME_TIME_NAME "time"
#define N2K_PGN_126993_HEARTBEAT_DATA_TRANSMIT_OFFSET_NAME "dataTransmitOffset"
#define N2K_PGN_126993_HEARTBEAT_SEQUENCE_COUNTER_NAME "sequenceCounter"
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER1_STATE_NAME "controller1State"
#define N2K_PGN_126993_HEARTBEAT_CONTROLLER2_STATE_NAME "controller2State"
#define N2K_PGN_126993_HEARTBEAT_EQUIPMENT_STATUS_NAME "equipmentStatus"
#define N2K_PGN_126993_HEARTBEAT_RESERVED_NAME "reserved"
#define N2K_PGN_126996_PRODUCT_INFORMATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126996_PRODUCT_INFORMATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_126998_CONFIGURATION_INFORMATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127233_MAN_OVERBOARD_NOTIFICATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127237_HEADING_TRACK_CONTROL_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127245_RUDDER_INSTANCE_NAME "instance"
#define N2K_PGN_127245_RUDDER_DIRECTION_ORDER_NAME "directionOrder"
#define N2K_PGN_127245_RUDDER_RESERVED_NAME "reserved"
#define N2K_PGN_127245_RUDDER_ANGLE_ORDER_NAME "angleOrder"
#define N2K_PGN_127245_RUDDER_POSITION_NAME "position"
#define N2K_PGN_127245_RUDDER_RESERVED6_NAME "reserved6"
#define N2K_PGN_127250_VESSEL_HEADING_SID_NAME "sid"
#define N2K_PGN_127250_VESSEL_HEADING_HEADING_NAME "heading"
#define N2K_PGN_127250_VESSEL_HEADING_DEVIATION_NAME "deviation"
#define N2K_PGN_127250_VESSEL_HEADING_VARIATION_NAME "variation"
#define N2K_PGN_127250_VESSEL_HEADING_REFERENCE_NAME "reference"
#define N2K_PGN_127250_VESSEL_HEADING_RESERVED_NAME "reserved"
#define N2K_PGN_127251_RATE_OF_TURN_SID_NAME "sid"
#define N2K_PGN_127251_RATE_OF_TURN_RATE_NAME "rate"
#define N2K_PGN_127251_RATE_OF_TURN_RESERVED_NAME "reserved"
#define N2K_PGN_127252_HEAVE_SID_NAME "sid"
#define N2K_PGN_127252_HEAVE_HEAVE_NAME "heave"
#define N2K_PGN_127252_HEAVE_RESERVED_NAME "reserved"
#define N2K_PGN_127257_ATTITUDE_SID_NAME "sid"
#define N2K_PGN_127257_ATTITUDE_YAW_NAME "yaw"
#define N2K_PGN_127257_ATTITUDE_PITCH_NAME "pitch"
#define N2K_PGN_127257_ATTITUDE_ROLL_NAME "roll"
#define N2K_PGN_127257_ATTITUDE_RESERVED_NAME "reserved"
#define N2K_PGN_127258_MAGNETIC_VARIATION_SID_NAME "sid"
#define N2K_PGN_127258_MAGNETIC_VARIATION_SOURCE_NAME "source"
#define N2K_PGN_127258_MAGNETIC_VARIATION_RESERVED_NAME "reserved"
#define N2K_PGN_127258_MAGNETIC_VARIATION_AGE_OF_SERVICE_NAME "ageOfService"
#define N2K_PGN_127258_MAGNETIC_VARIATION_VARIATION_NAME "variation"
#define N2K_PGN_127258_MAGNETIC_VARIATION_RESERVED6_NAME "reserved6"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_INSTANCE_NAME "instance"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_SPEED_NAME "speed"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_BOOST_PRESSURE_NAME "boostPressure"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_TILT_TRIM_NAME "tiltTrim"
#define N2K_PGN_127488_ENGINE_PARAMETERS_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127489_ENGINE_PARAMETERS_DYNAMIC_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127490_ELECTRIC_DRIVE_STATUS_DYNAMIC_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127491_ELECTRIC_ENERGY_STORAGE_STATUS_DYNAMIC_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_INSTANCE_NAME "instance"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_TRANSMISSION_GEAR_NAME "transmissionGear"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_RESERVED_NAME "reserved"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_OIL_PRESSURE_NAME "oilPressure"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_OIL_TEMPERATURE_NAME "oilTemperature"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_DISCRETE_STATUS1_NAME "discreteStatus1"
#define N2K_PGN_127493_TRANSMISSION_PARAMETERS_DYNAMIC_RESERVED7_NAME "reserved7"
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127494_ELECTRIC_DRIVE_INFORMATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127495_ELECTRIC_ENERGY_STORAGE_INFORMATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127496_TRIP_PARAMETERS_VESSEL_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127497_TRIP_PARAMETERS_ENGINE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127498_ENGINE_PARAMETERS_STATIC_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_SEQUENCE_ID_NAME "sequenceId"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_CONNECTION_ID_NAME "connectionId"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_STATE_NAME "state"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_STATUS_NAME "status"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_OPERATIONAL_STATUS_CONTROL_NAME "operationalStatusControl"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_PWM_DUTY_CYCLE_NAME "pwmDutyCycle"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_TIMEON_NAME "timeon"
#define N2K_PGN_127500_LOAD_CONTROLLER_CONNECTION_STATE_CONTROL_TIMEOFF_NAME "timeoff"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INSTANCE_NAME "instance"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR1_NAME "indicator1"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR2_NAME "indicator2"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR3_NAME "indicator3"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR4_NAME "indicator4"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR5_NAME "indicator5"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR6_NAME "indicator6"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR7_NAME "indicator7"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR8_NAME "indicator8"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR9_NAME "indicator9"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR10_NAME "indicator10"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR11_NAME "indicator11"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR12_NAME "indicator12"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR13_NAME "indicator13"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR14_NAME "indicator14"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR15_NAME "indicator15"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR16_NAME "indicator16"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR17_NAME "indicator17"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR18_NAME "indicator18"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR19_NAME "indicator19"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR20_NAME "indicator20"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR21_NAME "indicator21"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR22_NAME "indicator22"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR23_NAME "indicator23"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR24_NAME "indicator24"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR25_NAME "indicator25"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR26_NAME "indicator26"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR27_NAME "indicator27"
#define N2K_PGN_127501_BINARY_SWITCH_BANK_STATUS_INDICATOR28_NAME "indicator28"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_INSTANCE_NAME "instance"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH1_NAME "switch1"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH2_NAME "switch2"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH3_NAME "switch3"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH4_NAME "switch4"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH5_NAME "switch5"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH6_NAME "switch6"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH7_NAME "switch7"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH8_NAME "switch8"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH9_NAME "switch9"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH10_NAME "switch10"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH11_NAME "switch11"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH12_NAME "switch12"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH13_NAME "switch13"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH14_NAME "switch14"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH15_NAME "switch15"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH16_NAME "switch16"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH17_NAME "switch17"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH18_NAME "switch18"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH19_NAME "switch19"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH20_NAME "switch20"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH21_NAME "switch21"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH22_NAME "switch22"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH23_NAME "switch23"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH24_NAME "switch24"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH25_NAME "switch25"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH26_NAME "switch26"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH27_NAME "switch27"
#define N2K_PGN_127502_SWITCH_BANK_CONTROL_SWITCH28_NAME "switch28"
#define N2K_PGN_127503_AC_INPUT_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127503_AC_INPUT_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127504_AC_OUTPUT_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127504_AC_OUTPUT_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127505_FLUID_LEVEL_INSTANCE_NAME "instance"
#define N2K_PGN_127505_FLUID_LEVEL_TYPE_NAME "type"
#define N2K_PGN_127505_FLUID_LEVEL_LEVEL_NAME "level"
#define N2K_PGN_127505_FLUID_LEVEL_CAPACITY_NAME "capacity"
#define N2K_PGN_127505_FLUID_LEVEL_RESERVED_NAME "reserved"
#define N2K_PGN_127506_DC_DETAILED_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127506_DC_DETAILED_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127507_CHARGER_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127507_CHARGER_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127508_BATTERY_STATUS_INSTANCE_NAME "instance"
#define N2K_PGN_127508_BATTERY_STATUS_VOLTAGE_NAME "voltage"
#define N2K_PGN_127508_BATTERY_STATUS_CURRENT_NAME "current"
#define N2K_PGN_127508_BATTERY_STATUS_TEMPERATURE_NAME "temperature"
#define N2K_PGN_127508_BATTERY_STATUS_SID_NAME "sid"
#define N2K_PGN_127509_INVERTER_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127509_INVERTER_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127510_CHARGER_CONFIGURATION_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_INSTANCE_NAME "instance"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_AC_INSTANCE_NAME "acInstance"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_DC_INSTANCE_NAME "dcInstance"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_INVERTER_ENABLE_DISABLE_NAME "inverterEnableDisable"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_INVERTER_MODE_NAME "inverterMode"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_LOAD_SENSE_ENABLE_DISABLE_NAME "loadSenseEnableDisable"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_LOAD_SENSE_POWER_THRESHOLD_NAME "loadSensePowerThreshold"
#define N2K_PGN_127511_INVERTER_CONFIGURATION_STATUS_LOAD_SENSE_INTERVAL_NAME "loadSenseInterval"
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_INSTANCE_NAME "instance"
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_GENERATOR_INSTANCE_NAME "generatorInstance"
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_AGS_MODE_NAME "agsMode"
#define N2K_PGN_127512_AGS_CONFIGURATION_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_127513_BATTERY_CONFIGURATION_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_127514_AGS_STATUS_INSTANCE_NAME "instance"
#define N2K_PGN_127514_AGS_STATUS_GENERATOR_INSTANCE_NAME "generatorInstance"
#define N2K_PGN_127514_AGS_STATUS_AGS_OPERATING_STATE_NAME "agsOperatingState"
#define N2K_PGN_127514_AGS_STATUS_GENERATOR_STATE_NAME "generatorState"
#define N2K_PGN_127514_AGS_STATUS_GENERATOR_ON_REASON_NAME "generatorOnReason"
#define N2K_PGN_127514_AGS_STATUS_GENERATOR_OFF_REASON_NAME "generatorOffReason"
#define N2K_PGN_127514_AGS_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_SID_NAME "sid"
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_CONNECTION_NUMBER_NAME "connectionNumber"
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_127744_AC_POWER_CURRENT_PHASE_A_POWER_NAME "power"
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_SID_NAME "sid"
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_CONNECTION_NUMBER_NAME "connectionNumber"
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_127745_AC_POWER_CURRENT_PHASE_B_POWER_NAME "power"
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_SID_NAME "sid"
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_CONNECTION_NUMBER_NAME "connectionNumber"
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_AC_RMS_CURRENT_NAME "acRmsCurrent"
#define N2K_PGN_127746_AC_POWER_CURRENT_PHASE_C_POWER_NAME "power"
#define N2K_PGN_127750_CONVERTER_STATUS_SID_NAME "sid"
#define N2K_PGN_127750_CONVERTER_STATUS_CONNECTION_NUMBER_NAME "connectionNumber"
#define N2K_PGN_127750_CONVERTER_STATUS_OPERATING_STATE_NAME "operatingState"
#define N2K_PGN_127750_CONVERTER_STATUS_TEMPERATURE_STATE_NAME "temperatureState"
#define N2K_PGN_127750_CONVERTER_STATUS_OVERLOAD_STATE_NAME "overloadState"
#define N2K_PGN_127750_CONVERTER_STATUS_LOW_DC_VOLTAGE_STATE_NAME "lowDcVoltageState"
#define N2K_PGN_127750_CONVERTER_STATUS_RIPPLE_STATE_NAME "rippleState"
#define N2K_PGN_127750_CONVERTER_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_SID_NAME "sid"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_CONNECTION_NUMBER_NAME "connectionNumber"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_DC_VOLTAGE_NAME "dcVoltage"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_DC_CURRENT_NAME "dcCurrent"
#define N2K_PGN_127751_DC_VOLTAGE_CURRENT_RESERVED_NAME "reserved"
#define N2K_PGN_128000_LEEWAY_ANGLE_SID_NAME "sid"
#define N2K_PGN_128000_LEEWAY_ANGLE_LEEWAY_ANGLE_NAME "leewayAngle"
#define N2K_PGN_128000_LEEWAY_ANGLE_RESERVED_NAME "reserved"
#define N2K_PGN_128001_VESSEL_ACCELERATION_SID_NAME "sid"
#define N2K_PGN_128001_VESSEL_ACCELERATION_LONGITUDINAL_ACCELERATION_NAME "longitudinalAcceleration"
#define N2K_PGN_128001_VESSEL_ACCELERATION_TRANSVERSE_ACCELERATION_NAME "transverseAcceleration"
#define N2K_PGN_128001_VESSEL_ACCELERATION_VERTICAL_ACCELERATION_NAME "verticalAcceleration"
#define N2K_PGN_128001_VESSEL_ACCELERATION_RESERVED_NAME "reserved"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_INVERTER_MOTOR_CONTROLLER_NAME "inverterMotorController"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_ACTIVE_MOTOR_MODE_NAME "activeMotorMode"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_BRAKE_MODE_NAME "brakeMode"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_ROTATIONAL_SHAFT_SPEED_NAME "rotationalShaftSpeed"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_MOTOR_DC_VOLTAGE_NAME "motorDcVoltage"
#define N2K_PGN_128002_ELECTRIC_DRIVE_STATUS_RAPID_UPDATE_MOTOR_DC_CURRENT_NAME "motorDcCurrent"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_ENERGY_STORAGE_IDENTIFIER_NAME "energyStorageIdentifier"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_BATTERY_STATUS_NAME "batteryStatus"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_ISOLATION_STATUS_NAME "isolationStatus"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_BATTERY_ERROR_NAME "batteryError"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_BATTERY_VOLTAGE_NAME "batteryVoltage"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_BATTERY_CURRENT_NAME "batteryCurrent"
#define N2K_PGN_128003_ELECTRIC_ENERGY_STORAGE_STATUS_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_SID_NAME "sid"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_IDENTIFIER_NAME "identifier"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_DIRECTION_CONTROL_NAME "directionControl"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_POWER_ENABLED_NAME "powerEnabled"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_RETRACT_CONTROL_NAME "retractControl"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_SPEED_CONTROL_NAME "speedControl"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_CONTROL_EVENTS_NAME "controlEvents"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_COMMAND_TIMEOUT_NAME "commandTimeout"
#define N2K_PGN_128006_THRUSTER_CONTROL_STATUS_AZIMUTH_CONTROL_NAME "azimuthControl"
#define N2K_PGN_128007_THRUSTER_INFORMATION_IDENTIFIER_NAME "identifier"
#define N2K_PGN_128007_THRUSTER_INFORMATION_MOTOR_TYPE_NAME "motorType"
#define N2K_PGN_128007_THRUSTER_INFORMATION_RESERVED_NAME "reserved"
#define N2K_PGN_128007_THRUSTER_INFORMATION_POWER_RATING_NAME "powerRating"
#define N2K_PGN_128007_THRUSTER_INFORMATION_MAXIMUM_TEMPERATURE_RATING_NAME "maximumTemperatureRating"
#define N2K_PGN_128007_THRUSTER_INFORMATION_MAXIMUM_ROTATIONAL_SPEED_NAME "maximumRotationalSpeed"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_SID_NAME "sid"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_IDENTIFIER_NAME "identifier"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_MOTOR_EVENTS_NAME "motorEvents"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_CURRENT_NAME "current"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_TEMPERATURE_NAME "temperature"
#define N2K_PGN_128008_THRUSTER_MOTOR_STATUS_OPERATING_TIME_NAME "operatingTime"
#define N2K_PGN_128259_SPEED_SID_NAME "sid"
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_NAME "speedWaterReferenced"
#define N2K_PGN_128259_SPEED_SPEED_GROUND_REFERENCED_NAME "speedGroundReferenced"
#define N2K_PGN_128259_SPEED_SPEED_WATER_REFERENCED_TYPE_NAME "speedWaterReferencedType"
#define N2K_PGN_128259_SPEED_SPEED_DIRECTION_NAME "speedDirection"
#define N2K_PGN_128259_SPEED_RESERVED_NAME "reserved"
#define N2K_PGN_128267_WATER_DEPTH_SID_NAME "sid"
#define N2K_PGN_128267_WATER_DEPTH_DEPTH_NAME "depth"
#define N2K_PGN_128267_WATER_DEPTH_OFFSET_NAME "offset"
#define N2K_PGN_128267_WATER_DEPTH_RANGE_NAME "range"
#define N2K_PGN_128275_DISTANCE_LOG_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_128275_DISTANCE_LOG_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_128520_TRACKED_TARGET_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_128520_TRACKED_TARGET_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_128538_ELEVATOR_CAR_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_SID_NAME "sid"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_ELEVATOR_CAR_ID_NAME "elevatorCarId"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_ELEVATOR_CAR_USAGE_NAME "elevatorCarUsage"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_MOTOR_ACCELERATION_DECELERATION_PROFILE_SELECTION_NAME "motorAccelerationDecelerationProfileSelection"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_MOTOR_ROTATIONAL_CONTROL_STATUS_NAME "motorRotationalControlStatus"
#define N2K_PGN_128768_ELEVATOR_MOTOR_CONTROL_RESERVED_NAME "reserved"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_SID_NAME "sid"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_ELEVATOR_CALL_BUTTON_ID_NAME "elevatorCallButtonId"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_DECK_BUTTON_ID_NAME "deckButtonId"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_ELEVATOR_CAR_USAGE_NAME "elevatorCarUsage"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_ELEVATOR_CAR_BUTTON_SELECTION_NAME "elevatorCarButtonSelection"
#define N2K_PGN_128769_ELEVATOR_DECK_PUSH_BUTTON_RESERVED_NAME "reserved"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SID_NAME "sid"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_ID_NAME "windlassId"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_DIRECTION_CONTROL_NAME "windlassDirectionControl"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_DOCKING_CONTROL_NAME "anchorDockingControl"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SPEED_CONTROL_TYPE_NAME "speedControlType"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_SPEED_CONTROL_NAME "speedControl"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_POWER_ENABLE_NAME "powerEnable"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_MECHANICAL_LOCK_NAME "mechanicalLock"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_DECK_AND_ANCHOR_WASH_NAME "deckAndAnchorWash"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_ANCHOR_LIGHT_NAME "anchorLight"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_COMMAND_TIMEOUT_NAME "commandTimeout"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_WINDLASS_CONTROL_EVENTS_NAME "windlassControlEvents"
#define N2K_PGN_128776_WINDLASS_CONTROL_STATUS_RESERVED14_NAME "reserved14"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_SID_NAME "sid"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_ID_NAME "windlassId"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_DIRECTION_CONTROL_NAME "windlassDirectionControl"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_MOTION_STATUS_NAME "windlassMotionStatus"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_RODE_TYPE_STATUS_NAME "rodeTypeStatus"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_RODE_COUNTER_VALUE_NAME "rodeCounterValue"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_LINE_SPEED_NAME "windlassLineSpeed"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_ANCHOR_DOCKING_STATUS_NAME "anchorDockingStatus"
#define N2K_PGN_128777_ANCHOR_WINDLASS_OPERATING_STATUS_WINDLASS_OPERATING_EVENTS_NAME "windlassOperatingEvents"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_SID_NAME "sid"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_WINDLASS_ID_NAME "windlassId"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_WINDLASS_MONITORING_EVENTS_NAME "windlassMonitoringEvents"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_CONTROLLER_VOLTAGE_NAME "controllerVoltage"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_MOTOR_CURRENT_NAME "motorCurrent"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_TOTAL_MOTOR_TIME_NAME "totalMotorTime"
#define N2K_PGN_128778_ANCHOR_WINDLASS_MONITORING_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_ACTUATOR_IDENTIFIER_NAME "actuatorIdentifier"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_COMMANDED_DEVICE_POSITION_NAME "commandedDevicePosition"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_DEVICE_POSITION_NAME "devicePosition"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_MAXIMUM_DEVICE_TRAVEL_NAME "maximumDeviceTravel"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_DIRECTION_OF_TRAVEL_NAME "directionOfTravel"
#define N2K_PGN_128780_LINEAR_ACTUATOR_CONTROL_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_LATITUDE_NAME "latitude"
#define N2K_PGN_129025_POSITION_RAPID_UPDATE_LONGITUDE_NAME "longitude"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_SID_NAME "sid"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_COG_REFERENCE_NAME "cogReference"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_COG_NAME "cog"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_SOG_NAME "sog"
#define N2K_PGN_129026_COG_SOG_RAPID_UPDATE_RESERVED6_NAME "reserved6"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_SID_NAME "sid"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_TIME_DELTA_NAME "timeDelta"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_LATITUDE_DELTA_NAME "latitudeDelta"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_LONGITUDE_DELTA_NAME "longitudeDelta"
#define N2K_PGN_129027_POSITION_DELTA_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_SID_NAME "sid"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_TIME_DELTA_NAME "timeDelta"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_GNSS_QUALITY_NAME "gnssQuality"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_DIRECTION_NAME "direction"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_COG_NAME "cog"
#define N2K_PGN_129028_ALTITUDE_DELTA_RAPID_UPDATE_ALTITUDE_DELTA_NAME "altitudeDelta"
#define N2K_PGN_129029_GNSS_POSITION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129029_GNSS_POSITION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129033_TIME_DATE_DATE_NAME "date"
#define N2K_PGN_129033_TIME_DATE_TIME_NAME "time"
#define N2K_PGN_129033_TIME_DATE_LOCAL_OFFSET_NAME "localOffset"
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129038_AIS_CLASS_A_POSITION_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129039_AIS_CLASS_B_POSITION_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129040_AIS_CLASS_B_EXTENDED_POSITION_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129041_AIS_AIDS_TO_NAVIGATION_ATON_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129044_DATUM_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129044_DATUM_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129045_USER_DATUM_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129045_USER_DATUM_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_SID_NAME "sid"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_MODE_NAME "xteMode"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_RESERVED_NAME "reserved"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_NAVIGATION_TERMINATED_NAME "navigationTerminated"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_XTE_NAME "xte"
#define N2K_PGN_129283_CROSS_TRACK_ERROR_RESERVED6_NAME "reserved6"
#define N2K_PGN_129284_NAVIGATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129284_NAVIGATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129285_NAVIGATION_ROUTE_WP_INFORMATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SID_NAME "sid"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SET_REFERENCE_NAME "setReference"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_RESERVED_NAME "reserved"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_SET_NAME "set"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_DRIFT_NAME "drift"
#define N2K_PGN_129291_SET_DRIFT_RAPID_UPDATE_RESERVED6_NAME "reserved6"
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129301_NAVIGATION_ROUTE_TIME_TO_FROM_MARK_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129302_BEARING_AND_DISTANCE_BETWEEN_TWO_MARKS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129538_GNSS_CONTROL_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129539_GNSS_DOPS_SID_NAME "sid"
#define N2K_PGN_129539_GNSS_DOPS_DESIRED_MODE_NAME "desiredMode"
#define N2K_PGN_129539_GNSS_DOPS_ACTUAL_MODE_NAME "actualMode"
#define N2K_PGN_129539_GNSS_DOPS_RESERVED_NAME "reserved"
#define N2K_PGN_129539_GNSS_DOPS_HDOP_NAME "hdop"
#define N2K_PGN_129539_GNSS_DOPS_VDOP_NAME "vdop"
#define N2K_PGN_129539_GNSS_DOPS_TDOP_NAME "tdop"
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129540_GNSS_SATS_IN_VIEW_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129541_GPS_ALMANAC_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129541_GPS_ALMANAC_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129542_GNSS_PSEUDORANGE_NOISE_STATISTICS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129545_GNSS_RAIM_OUTPUT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_RADIAL_POSITION_ERROR_MAXIMUM_THRESHOLD_NAME "radialPositionErrorMaximumThreshold"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_PROBABILITY_OF_FALSE_ALARM_NAME "probabilityOfFalseAlarm"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_PROBABILITY_OF_MISSED_DETECTION_NAME "probabilityOfMissedDetection"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_PSEUDORANGE_RESIDUAL_FILTERING_TIME_CONSTANT_NAME "pseudorangeResidualFilteringTimeConstant"
#define N2K_PGN_129546_GNSS_RAIM_SETTINGS_RESERVED_NAME "reserved"
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129547_GNSS_PSEUDORANGE_ERROR_STATISTICS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129549_DGNSS_CORRECTIONS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129549_DGNSS_CORRECTIONS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_CHANNEL_NAME "channel"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_FREQUENCY_NAME "frequency"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_BIT_RATE_NAME "serialInterfaceBitRate"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_SERIAL_INTERFACE_DETECTION_MODE_NAME "serialInterfaceDetectionMode"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_SOURCE_NAME "differentialSource"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_DIFFERENTIAL_OPERATION_MODE_NAME "differentialOperationMode"
#define N2K_PGN_129550_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_INTERFACE_RESERVED_NAME "reserved"
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129551_GNSS_DIFFERENTIAL_CORRECTION_RECEIVER_SIGNAL_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129556_GLONASS_ALMANAC_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129792_AIS_DGNSS_BROADCAST_BINARY_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129793_AIS_UTC_AND_DATE_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129794_AIS_CLASS_A_STATIC_AND_VOYAGE_RELATED_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129795_AIS_ADDRESSED_BINARY_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129796_AIS_ACKNOWLEDGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129797_AIS_BINARY_BROADCAST_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129798_AIS_SAR_AIRCRAFT_POSITION_REPORT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129799_RADIO_FREQUENCY_MODE_POWER_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129800_AIS_UTC_DATE_INQUIRY_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129801_AIS_ADDRESSED_SAFETY_RELATED_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129802_AIS_SAFETY_RELATED_BROADCAST_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129803_AIS_INTERROGATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129803_AIS_INTERROGATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129804_AIS_ASSIGNMENT_MODE_COMMAND_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129805_AIS_DATA_LINK_MANAGEMENT_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129806_AIS_CHANNEL_MANAGEMENT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129807_AIS_CLASS_B_GROUP_ASSIGNMENT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129809_AIS_CLASS_B_STATIC_DATA_MSG24_PART_A_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_129810_AIS_CLASS_B_STATIC_DATA_MSG24_PART_B_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130052_LORAN_C_TD_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130052_LORAN_C_TD_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130053_LORAN_C_RANGE_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130054_LORAN_C_SIGNAL_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130060_LABEL_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130060_LABEL_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130061_CHANNEL_SOURCE_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130064_ROUTE_AND_WP_SERVICE_DATABASE_LIST_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130065_ROUTE_AND_WP_SERVICE_ROUTE_LIST_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130066_ROUTE_AND_WP_SERVICE_ROUTE_WP_LIST_ATTRIBUTES_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130067_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_POSITION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130068_ROUTE_AND_WP_SERVICE_ROUTE_WP_NAME_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130069_ROUTE_AND_WP_SERVICE_XTE_LIMIT_NAVIGATION_METHOD_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130070_ROUTE_AND_WP_SERVICE_WP_COMMENT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130071_ROUTE_AND_WP_SERVICE_ROUTE_COMMENT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130072_ROUTE_AND_WP_SERVICE_DATABASE_COMMENT_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130073_ROUTE_AND_WP_SERVICE_RADIUS_OF_TURN_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130074_ROUTE_AND_WP_SERVICE_WP_LIST_WP_NAME_POSITION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130306_WIND_DATA_SID_NAME "sid"
#define N2K_PGN_130306_WIND_DATA_WIND_SPEED_NAME "windSpeed"
#define N2K_PGN_130306_WIND_DATA_WIND_ANGLE_NAME "windAngle"
#define N2K_PGN_130306_WIND_DATA_REFERENCE_NAME "reference"
#define N2K_PGN_130306_WIND_DATA_RESERVED_NAME "reserved"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_SID_NAME "sid"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_WATER_TEMPERATURE_NAME "waterTemperature"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_OUTSIDE_AMBIENT_AIR_TEMPERATURE_NAME "outsideAmbientAirTemperature"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_ATMOSPHERIC_PRESSURE_NAME "atmosphericPressure"
#define N2K_PGN_130310_ENVIRONMENTAL_PARAMETERS_OBSOLETE_RESERVED_NAME "reserved"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_SID_NAME "sid"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_SOURCE_NAME "temperatureSource"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_HUMIDITY_SOURCE_NAME "humiditySource"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_TEMPERATURE_NAME "temperature"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_HUMIDITY_NAME "humidity"
#define N2K_PGN_130311_ENVIRONMENTAL_PARAMETERS_ATMOSPHERIC_PRESSURE_NAME "atmosphericPressure"
#define N2K_PGN_130312_TEMPERATURE_SID_NAME "sid"
#define N2K_PGN_130312_TEMPERATURE_INSTANCE_NAME "instance"
#define N2K_PGN_130312_TEMPERATURE_SOURCE_NAME "source"
#define N2K_PGN_130312_TEMPERATURE_ACTUAL_TEMPERATURE_NAME "actualTemperature"
#define N2K_PGN_130312_TEMPERATURE_SET_TEMPERATURE_NAME "setTemperature"
#define N2K_PGN_130312_TEMPERATURE_RESERVED_NAME "reserved"
#define N2K_PGN_130313_HUMIDITY_SID_NAME "sid"
#define N2K_PGN_130313_HUMIDITY_INSTANCE_NAME "instance"
#define N2K_PGN_130313_HUMIDITY_SOURCE_NAME "source"
#define N2K_PGN_130313_HUMIDITY_ACTUAL_HUMIDITY_NAME "actualHumidity"
#define N2K_PGN_130313_HUMIDITY_SET_HUMIDITY_NAME "setHumidity"
#define N2K_PGN_130313_HUMIDITY_RESERVED_NAME "reserved"
#define N2K_PGN_130314_ACTUAL_PRESSURE_SID_NAME "sid"
#define N2K_PGN_130314_ACTUAL_PRESSURE_INSTANCE_NAME "instance"
#define N2K_PGN_130314_ACTUAL_PRESSURE_SOURCE_NAME "source"
#define N2K_PGN_130314_ACTUAL_PRESSURE_PRESSURE_NAME "pressure"
#define N2K_PGN_130314_ACTUAL_PRESSURE_RESERVED_NAME "reserved"
#define N2K_PGN_130315_SET_PRESSURE_SID_NAME "sid"
#define N2K_PGN_130315_SET_PRESSURE_INSTANCE_NAME "instance"
#define N2K_PGN_130315_SET_PRESSURE_SOURCE_NAME "source"
#define N2K_PGN_130315_SET_PRESSURE_PRESSURE_NAME "pressure"
#define N2K_PGN_130315_SET_PRESSURE_RESERVED_NAME "reserved"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SID_NAME "sid"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_INSTANCE_NAME "instance"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SOURCE_NAME "source"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_TEMPERATURE_NAME "temperature"
#define N2K_PGN_130316_TEMPERATURE_EXTENDED_RANGE_SET_TEMPERATURE_NAME "setTemperature"
#define N2K_PGN_130320_TIDE_STATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130320_TIDE_STATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130321_SALINITY_STATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130321_SALINITY_STATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130322_CURRENT_STATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130322_CURRENT_STATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130323_METEOROLOGICAL_STATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130324_MOORED_BUOY_STATION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130330_LIGHTING_SYSTEM_SETTINGS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130560_PAYLOAD_MASS_SID_NAME "sid"
#define N2K_PGN_130560_PAYLOAD_MASS_MEASUREMENT_STATUS_NAME "measurementStatus"
#define N2K_PGN_130560_PAYLOAD_MASS_RESERVED_NAME "reserved"
#define N2K_PGN_130560_PAYLOAD_MASS_MEASUREMENT_ID_NAME "measurementId"
#define N2K_PGN_130560_PAYLOAD_MASS_PAYLOAD_MASS_NAME "payloadMass"
#define N2K_PGN_130560_PAYLOAD_MASS_RESERVED6_NAME "reserved6"
#define N2K_PGN_130561_LIGHTING_ZONE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130561_LIGHTING_ZONE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130562_LIGHTING_SCENE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130562_LIGHTING_SCENE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130563_LIGHTING_DEVICE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130563_LIGHTING_DEVICE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130564_LIGHTING_DEVICE_ENUMERATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130565_LIGHTING_COLOR_SEQUENCE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130566_LIGHTING_PROGRAM_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130566_LIGHTING_PROGRAM_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130567_WATERMAKER_INPUT_SETTING_AND_STATUS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130569_CURRENT_STATUS_AND_FILE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130570_LIBRARY_DATA_FILE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130570_LIBRARY_DATA_FILE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130571_LIBRARY_DATA_GROUP_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130572_LIBRARY_DATA_SEARCH_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130573_SUPPORTED_SOURCE_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130574_SUPPORTED_ZONE_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_PORT_TRIM_TAB_NAME "portTrimTab"
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_STARBOARD_TRIM_TAB_NAME "starboardTrimTab"
#define N2K_PGN_130576_SMALL_CRAFT_STATUS_RESERVED_NAME "reserved"
#define N2K_PGN_130577_DIRECTION_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130577_DIRECTION_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130578_VESSEL_SPEED_COMPONENTS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_POWER_NAME "power"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_DEFAULT_SETTINGS_NAME "defaultSettings"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_TUNER_REGIONS_NAME "tunerRegions"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_MAX_FAVORITES_NAME "maxFavorites"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_VIDEO_PROTOCOLS_NAME "videoProtocols"
#define N2K_PGN_130579_SYSTEM_CONFIGURATION_RESERVED_NAME "reserved"
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130580_SYSTEM_CONFIGURATION_DEPRECATED_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130581_ZONE_CONFIGURATION_DEPRECATED_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130582_ZONE_VOLUME_ZONE_ID_NAME "zoneId"
#define N2K_PGN_130582_ZONE_VOLUME_VOLUME_NAME "volume"
#define N2K_PGN_130582_ZONE_VOLUME_VOLUME_CHANGE_NAME "volumeChange"
#define N2K_PGN_130582_ZONE_VOLUME_MUTE_NAME "mute"
#define N2K_PGN_130582_ZONE_VOLUME_RESERVED_NAME "reserved"
#define N2K_PGN_130582_ZONE_VOLUME_CHANNEL_NAME "channel"
#define N2K_PGN_130582_ZONE_VOLUME_RESERVED7_NAME "reserved7"
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130583_AVAILABLE_AUDIO_EQ_PRESETS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130584_AVAILABLE_BLUETOOTH_ADDRESSES_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_SOURCE_NUMBER_NAME "sourceNumber"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_STATUS_NAME "status"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_FORGET_DEVICE_NAME "forgetDevice"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_DISCOVERING_NAME "discovering"
#define N2K_PGN_130585_BLUETOOTH_SOURCE_STATUS_BLUETOOTH_ADDRESS_NAME "bluetoothAddress"
#define N2K_PGN_130586_ZONE_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130586_ZONE_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130818_SIMNET_REPROGRAM_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130819_SIMNET_REQUEST_REPROGRAM_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130822_NAVICO_UNKNOWN1_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130822_NAVICO_UNKNOWN1_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130823_MARETRON_PROPRIETARY_TEMPERATURE_HIGH_RANGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130825_NAVICO_UNKNOWN2_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130825_NAVICO_UNKNOWN2_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130827_LOWRANCE_UNKNOWN_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130828_SIMNET_SET_SERIAL_NUMBER_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130831_SUZUKI_ENGINE_AND_STORAGE_DEVICE_CONFIG_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130832_SIMNET_FUEL_USED_HIGH_RESOLUTION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130833_B_G_USER_AND_REMOTE_RENAME_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130834_SIMNET_ENGINE_AND_TANK_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130835_SIMNET_SET_ENGINE_AND_TANK_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130838_SIMNET_FLUID_LEVEL_WARNING_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130839_SIMNET_PRESSURE_SENSOR_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130840_SIMNET_DATA_USER_GROUP_CONFIGURATION_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130847_SEATALK_NODE_STATISTICS_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130851_SIMNET_EVENT_REPLY_AP_COMMAND_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130856_SIMNET_ALARM_MESSAGE_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130860_SIMNET_AP_UNKNOWN4_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130880_AIRMAR_ADDITIONAL_WEATHER_DATA_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130881_AIRMAR_HEATER_CONTROL_FAST_PACKET_DATA_NAME "fastPacketData"
#define N2K_PGN_130944_AIRMAR_POST_FAST_PACKET_SEQUENCE_COUNTER_NAME "fastPacketSequenceCounter"
#define N2K_PGN_130944_AIRMAR_POST_FAST_PACKET_DATA_NAME "fastPacketData"

/**
 * Signals in message PGN_65380_Actuator_Command_Port_Engine.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65380_actuator_command_port_engine_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_instance;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_3;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_command;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_4;

    /**
     * Range: 0..655350 (0..65535 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_command;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_6;
};

/**
 * Signals in message PGN_65381_Actuator_Command_Stbd_Engine.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65381_actuator_command_stbd_engine_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_instance;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_3;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_command;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_4;

    /**
     * Range: 0..655350 (0..65535 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_command;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_6;
};

/**
 * Signals in message PGN_65382_Actuator_Command_Center_Engine.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65382_actuator_command_center_engine_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_instance;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_3;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_command;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_4;

    /**
     * Range: 0..655350 (0..65535 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_command;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_6;
};

/**
 * Signals in message PGN_65383_Actuator_Command_Stbd_Center_Engine.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65383_actuator_command_stbd_center_engine_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_instance;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_3;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_command;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_4;

    /**
     * Range: 0..655350 (0..65535 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t throttle_command;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_5;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_6;
};

/**
 * Signals in message PGN_65385_Actuator_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65385_actuator_feedback_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_instance;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t actuator_type;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t actual_gear_value;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_state;

    /**
     * Range: 0..1000 (0..100.0 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t actual_throttle_value;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t danger_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_forward_motion_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_neutral_motion_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_reverse_motion_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_up_motion_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_down_motion_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field4;
};

/**
 * Signals in message PGN_65390_Control_Head_Feedback.
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65390_control_head_feedback_t {
    /**
     * Range: 0..2047 (0..2047 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_id;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field1;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_instance;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t port_lever_gear_position;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbd_lever_gear_position;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t port_lever_throttle;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbd_lever_throttle;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field3;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t danger_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t warning_fault;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ch_controlling;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t port_ntw_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stbd_ntw_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sync_mode_active;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_field4;
};

/**
 * Signals in message PGN_59392_isoAcknowledgement.
 *
 * ISO Acknowledgement
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_59392_iso_acknowledgement_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t group_function;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;

    /**
     * Parameter Group Number of requested information
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t pgn;
};

/**
 * Signals in message PGN_59904_isoRequest.
 *
 * ISO Request
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_59904_iso_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t pgn;
};

/**
 * Signals in message PGN_60160_isoTransportProtocolDataTransfer.
 *
 * ISO Transport Protocol, Data Transfer
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_60160_iso_transport_protocol_data_transfer_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t data;
};

/**
 * Signals in message PGN_60928_isoAddressClaim.
 *
 * ISO Address Claim
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_60928_iso_address_claim_t {
    /**
     * ISO Identity Number
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t unique_number;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * ISO ECU Instance
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_instance_lower;

    /**
     * ISO Function Instance
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_instance_upper;

    /**
     * ISO Function
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_function;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t spare;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_class;

    /**
     * ISO Device Class Instance
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_group;

    /**
     * Field indicates whether the device is capable to claim arbitrary source address. Value is 1 for NMEA200 devices. Could be 0 for J1939 device claims
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_address_capable;
};

/**
 * Signals in message PGN_65001_bus1PhaseCBasicAcQuantities.
 *
 * Bus #1 Phase C Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65002_bus1PhaseBBasicAcQuantities.
 *
 * Bus #1 Phase B Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65003_bus1PhaseABasicAcQuantities.
 *
 * Bus #1 Phase A Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65004_bus1AverageBasicAcQuantities.
 *
 * Bus #1 Average Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65004_bus1_average_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65005_utilityTotalAcEnergy.
 *
 * Utility Total AC Energy
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65005_utility_total_ac_energy_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_energy_export;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_energy_import;
};

/**
 * Signals in message PGN_65006_utilityPhaseCAcReactivePower.
 *
 * Utility Phase C AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65006_utility_phase_c_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_65007_utilityPhaseCAcPower.
 *
 * Utility Phase C AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65007_utility_phase_c_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65008_utilityPhaseCBasicAcQuantities.
 *
 * Utility Phase C Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65008_utility_phase_c_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65009_utilityPhaseBAcReactivePower.
 *
 * Utility Phase B AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65009_utility_phase_b_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_65010_utilityPhaseBAcPower.
 *
 * Utility Phase B AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65010_utility_phase_b_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65011_utilityPhaseBBasicAcQuantities.
 *
 * Utility Phase B Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65011_utility_phase_b_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65012_utilityPhaseAAcReactivePower.
 *
 * Utility Phase A AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65012_utility_phase_a_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65013_utilityPhaseAAcPower.
 *
 * Utility Phase A AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65013_utility_phase_a_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65014_utilityPhaseABasicAcQuantities.
 *
 * Utility Phase A Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65014_utility_phase_a_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65015_utilityTotalAcReactivePower.
 *
 * Utility Total AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65015_utility_total_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65016_utilityTotalAcPower.
 *
 * Utility Total AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65016_utility_total_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65017_utilityAverageBasicAcQuantities.
 *
 * Utility Average Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65017_utility_average_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65018_generatorTotalAcEnergy.
 *
 * Generator Total AC Energy
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65018_generator_total_ac_energy_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_energy_export;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t total_energy_import;
};

/**
 * Signals in message PGN_65019_generatorPhaseCAcReactivePower.
 *
 * Generator Phase C AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65019_generator_phase_c_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65020_generatorPhaseCAcPower.
 *
 * Generator Phase C AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65020_generator_phase_c_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65021_generatorPhaseCBasicAcQuantities.
 *
 * Generator Phase C Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65021_generator_phase_c_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65022_generatorPhaseBAcReactivePower.
 *
 * Generator Phase B AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65022_generator_phase_b_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65023_generatorPhaseBAcPower.
 *
 * Generator Phase B AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65023_generator_phase_b_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65024_generatorPhaseBBasicAcQuantities.
 *
 * Generator Phase B Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65024_generator_phase_b_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65025_generatorPhaseAAcReactivePower.
 *
 * Generator Phase A AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65025_generator_phase_a_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65026_generatorPhaseAAcPower.
 *
 * Generator Phase A AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65026_generator_phase_a_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65027_generatorPhaseABasicAcQuantities.
 *
 * Generator Phase A Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65027_generator_phase_a_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65028_generatorTotalAcReactivePower.
 *
 * Generator Total AC Reactive Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65028_generator_total_ac_reactive_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reactive_power;

    /**
     * Range: -
     * Scale: 6.10352e-05
     * Offset: 0
     */
    uint16_t power_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_factor_lagging;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_65029_generatorTotalAcPower.
 *
 * Generator Total AC Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65029_generator_total_ac_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t real_power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t apparent_power;
};

/**
 * Signals in message PGN_65030_generatorAverageBasicAcQuantities.
 *
 * Generator Average Basic AC Quantities
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65030_generator_average_basic_ac_quantities_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_line_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t line_neutral_ac_rms_voltage;

    /**
     * Range: -
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t ac_frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t ac_rms_current;
};

/**
 * Signals in message PGN_65280_furunoHeave.
 *
 * Furuno: Heave
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65280_furuno_heave_t {
    /**
     * Furuno
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int32_t heave;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved5;
};

/**
 * Signals in message PGN_65284_maretronProprietaryDcBreakerCurrent.
 *
 * Maretron: Proprietary DC Breaker Current
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65284_maretron_proprietary_dc_breaker_current_t {
    /**
     * Maretron
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bank_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator_number;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t breaker_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved7;
};

/**
 * Signals in message PGN_65288_seatalkAlarm.
 *
 * Seatalk: Alarm
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65288_seatalk_alarm_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alarm_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alarm_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alarm_group;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t alarm_priority;
};

/**
 * Signals in message PGN_65289_simnetTrimTabSensorCalibration.
 *
 * Simnet: Trim Tab Sensor Calibration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65289_simnet_trim_tab_sensor_calibration_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved4;
};

/**
 * Signals in message PGN_65290_simnetPaddleWheelSpeedConfiguration.
 *
 * Simnet: Paddle Wheel Speed Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved4;
};

/**
 * Signals in message PGN_65292_simnetClearFluidLevelWarnings.
 *
 * Simnet: Clear Fluid Level Warnings
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65292_simnet_clear_fluid_level_warnings_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved4;
};

/**
 * Signals in message PGN_65302_simnetApUnknown1.
 *
 * Simnet: AP Unknown 1
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65302_simnet_ap_unknown1_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t a;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t b;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t c;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t d;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved8;
};

/**
 * Signals in message PGN_65309_navicoWirelessBatteryStatus.
 *
 * Navico: Wireless Battery Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65309_navico_wireless_battery_status_t {
    /**
     * Navico
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_charge_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved7;
};

/**
 * Signals in message PGN_65312_navicoWirelessSignalStatus.
 *
 * Navico: Wireless Signal Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65312_navico_wireless_signal_status_t {
    /**
     * Navico
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t unknown;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_strength;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved6;
};

/**
 * Signals in message PGN_65340_simnetApUnknown2.
 *
 * Simnet: AP Unknown 2
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65340_simnet_ap_unknown2_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t a;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t b;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t c;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t d;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t e;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved9;
};

/**
 * Signals in message PGN_65341_simnetAutopilotAngle.
 *
 * Simnet: Autopilot Angle
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65341_simnet_autopilot_angle_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved6;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t angle;
};

/**
 * Signals in message PGN_65345_seatalkPilotWindDatum.
 *
 * Seatalk: Pilot Wind Datum
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65345_seatalk_pilot_wind_datum_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t wind_datum;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t rolling_average_wind_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_65350_simnetMagneticField.
 *
 * Simnet: Magnetic Field
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65350_simnet_magnetic_field_t {
    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t a;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t b;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t c;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t d;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_65359_seatalkPilotHeading.
 *
 * Seatalk: Pilot Heading
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65359_seatalk_pilot_heading_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t heading_true;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t heading_magnetic;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_65360_seatalkPilotLockedHeading.
 *
 * Seatalk: Pilot Locked Heading
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65360_seatalk_pilot_locked_heading_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t target_heading_true;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t target_heading_magnetic;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_65361_seatalkSilenceAlarm.
 *
 * Seatalk: Silence Alarm
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65361_seatalk_silence_alarm_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alarm_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alarm_group;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved6;
};

/**
 * Signals in message PGN_65371_seatalkKeypadMessage.
 *
 * Seatalk: Keypad Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65371_seatalk_keypad_message_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t proprietary_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t first_key;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t second_key;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t first_key_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t second_key_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t encoder_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved11;
};

/**
 * Signals in message PGN_65374_seatalkKeypadHeartbeat.
 *
 * SeaTalk: Keypad Heartbeat
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65374_seatalk_keypad_heartbeat_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t proprietary_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t variant;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved7;
};

/**
 * Signals in message PGN_65379_seatalkPilotMode.
 *
 * Seatalk: Pilot Mode
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65379_seatalk_pilot_mode_t {
    /**
     * Raymarine
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pilot_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sub_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pilot_mode_data;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_65408_airmarDepthQualityFactor.
 *
 * Airmar: Depth Quality Factor
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65408_airmar_depth_quality_factor_t {
    /**
     * Airmar
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t depth_quality_factor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved6;
};

/**
 * Signals in message PGN_65409_airmarSpeedPulseCount.
 *
 * Airmar: Speed Pulse Count
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65409_airmar_speed_pulse_count_t {
    /**
     * Airmar
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t duration_of_interval;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t number_of_pulses_received;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_65410_airmarDeviceInformation.
 *
 * Airmar: Device Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65410_airmar_device_information_t {
    /**
     * Airmar
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t internal_device_temperature;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t supply_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_65420_simnetApUnknown3.
 *
 * Simnet: AP Unknown 3
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65420_simnet_ap_unknown3_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t a;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t b;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t c;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t d;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t e;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved9;
};

/**
 * Signals in message PGN_65480_simnetAutopilotMode.
 *
 * Simnet: Autopilot Mode
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_65480_simnet_autopilot_mode_t {
    /**
     * Simrad
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t manufacturer_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Marine Industry
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t industry_code;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved4;
};

/**
 * Signals in message PGN_126464_pgnListTransmitAndReceive.
 *
 * PGN List (Transmit and Receive)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126464_pgn_list_transmit_and_receive_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126983_alert.
 *
 * Alert
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126983_alert_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126984_alertResponse.
 *
 * Alert Response
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126984_alert_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126985_alertText.
 *
 * Alert Text
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126985_alert_text_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126986_alertConfiguration.
 *
 * Alert Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126986_alert_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126987_alertThreshold.
 *
 * Alert Threshold
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126987_alert_threshold_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126988_alertValue.
 *
 * Alert Value
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126988_alert_value_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126992_systemTime.
 *
 * System Time
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126992_system_time_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t date;

    /**
     * Seconds since midnight
     *
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t time;
};

/**
 * Signals in message PGN_126993_heartbeat.
 *
 * Heartbeat
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126993_heartbeat_t {
    /**
     * Offset in transmit time from time of request command: 0x0 = transmit immediately, 0xFFFF = Do not change offset.
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t data_transmit_offset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t controller1_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t controller2_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t equipment_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_126996_productInformation.
 *
 * Product Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126996_product_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_126998_configurationInformation.
 *
 * Configuration Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_126998_configuration_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127233_manOverboardNotification.
 *
 * Man Overboard Notification
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127233_man_overboard_notification_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127237_headingTrackControl.
 *
 * Heading/Track control
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127237_heading_track_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127245_rudder.
 *
 * Rudder
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127245_rudder_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_order;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t angle_order;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_127250_vesselHeading.
 *
 * Vessel Heading
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127250_vessel_heading_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t heading;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t deviation;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t variation;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reference;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_127251_rateOfTurn.
 *
 * Rate of Turn
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127251_rate_of_turn_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 3.125e-08
     * Offset: 0
     */
    int32_t rate;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_127252_heave.
 *
 * Heave
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127252_heave_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t heave;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_127257_attitude.
 *
 * Attitude
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127257_attitude_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t yaw;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t pitch;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t roll;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_127258_magneticVariation.
 *
 * Magnetic Variation
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127258_magnetic_variation_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t age_of_service;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t variation;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_127488_engineParametersRapidUpdate.
 *
 * Engine Parameters, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127488_engine_parameters_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t speed;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t boost_pressure;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tilt_trim;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_127489_engineParametersDynamic.
 *
 * Engine Parameters, Dynamic
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127489_engine_parameters_dynamic_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127490_electricDriveStatusDynamic.
 *
 * Electric Drive Status, Dynamic
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127490_electric_drive_status_dynamic_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127491_electricEnergyStorageStatusDynamic.
 *
 * Electric Energy Storage Status, Dynamic
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127491_electric_energy_storage_status_dynamic_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127493_transmissionParametersDynamic.
 *
 * Transmission Parameters, Dynamic
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127493_transmission_parameters_dynamic_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmission_gear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t oil_pressure;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t oil_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t discrete_status1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved7;
};

/**
 * Signals in message PGN_127494_electricDriveInformation.
 *
 * Electric Drive Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127494_electric_drive_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127495_electricEnergyStorageInformation.
 *
 * Electric Energy Storage Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127495_electric_energy_storage_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127496_tripParametersVessel.
 *
 * Trip Parameters, Vessel
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127496_trip_parameters_vessel_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127497_tripParametersEngine.
 *
 * Trip Parameters, Engine
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127497_trip_parameters_engine_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127498_engineParametersStatic.
 *
 * Engine Parameters, Static
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127498_engine_parameters_static_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127500_loadControllerConnectionStateControl.
 *
 * Load Controller Connection State/Control
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127500_load_controller_connection_state_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sequence_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t operational_status_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pwm_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t timeon;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t timeoff;
};

/**
 * Signals in message PGN_127501_binarySwitchBankStatus.
 *
 * Binary Switch Bank Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127501_binary_switch_bank_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator20;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator24;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t indicator28;
};

/**
 * Signals in message PGN_127502_switchBankControl.
 *
 * Switch Bank Control
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127502_switch_bank_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch6;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch7;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch8;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch9;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch10;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch11;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch12;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch13;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch14;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch15;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch16;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch17;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch18;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch19;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch20;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch21;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch22;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch23;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch24;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch25;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch26;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch27;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t switch28;
};

/**
 * Signals in message PGN_127503_acInputStatus.
 *
 * AC Input Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127503_ac_input_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127504_acOutputStatus.
 *
 * AC Output Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127504_ac_output_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127505_fluidLevel.
 *
 * Fluid Level
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127505_fluid_level_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type;

    /**
     * Range: -
     * Scale: 0.004
     * Offset: 0
     */
    int16_t level;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t capacity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_127506_dcDetailedStatus.
 *
 * DC Detailed Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127506_dc_detailed_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127507_chargerStatus.
 *
 * Charger Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127507_charger_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127508_batteryStatus.
 *
 * Battery Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127508_battery_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;
};

/**
 * Signals in message PGN_127509_inverterStatus.
 *
 * Inverter Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127509_inverter_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127510_chargerConfigurationStatus.
 *
 * Charger Configuration Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127510_charger_configuration_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127511_inverterConfigurationStatus.
 *
 * Inverter Configuration Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127511_inverter_configuration_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ac_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dc_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_enable_disable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_sense_enable_disable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_sense_power_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_sense_interval;
};

/**
 * Signals in message PGN_127512_agsConfigurationStatus.
 *
 * AGS Configuration Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127512_ags_configuration_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t generator_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ags_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_127513_batteryConfigurationStatus.
 *
 * Battery Configuration Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127513_battery_configuration_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_127514_agsStatus.
 *
 * AGS Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127514_ags_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t generator_instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ags_operating_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t generator_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t generator_on_reason;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t generator_off_reason;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_127744_acPowerCurrentPhaseA.
 *
 * AC Power / Current - Phase A
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127744_ac_power_current_phase_a_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_number;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_rms_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t power;
};

/**
 * Signals in message PGN_127745_acPowerCurrentPhaseB.
 *
 * AC Power / Current - Phase B
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127745_ac_power_current_phase_b_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_number;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_rms_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t power;
};

/**
 * Signals in message PGN_127746_acPowerCurrentPhaseC.
 *
 * AC Power / Current - Phase C
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127746_ac_power_current_phase_c_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_number;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ac_rms_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t power;
};

/**
 * Signals in message PGN_127750_converterStatus.
 *
 * Converter Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127750_converter_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_number;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t operating_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t overload_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_dc_voltage_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ripple_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_127751_dcVoltageCurrent.
 *
 * DC Voltage/Current
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_127751_dc_voltage_current_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t connection_number;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dc_voltage;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int32_t dc_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_128000_leewayAngle.
 *
 * Leeway Angle
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128000_leeway_angle_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    int16_t leeway_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_128001_vesselAcceleration.
 *
 * Vessel Acceleration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128001_vessel_acceleration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t longitudinal_acceleration;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t transverse_acceleration;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vertical_acceleration;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_128002_electricDriveStatusRapidUpdate.
 *
 * Electric Drive Status, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128002_electric_drive_status_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverter_motor_controller;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_motor_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t rotational_shaft_speed;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t motor_dc_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t motor_dc_current;
};

/**
 * Signals in message PGN_128003_electricEnergyStorageStatusRapidUpdate.
 *
 * Electric Energy Storage Status, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128003_electric_energy_storage_status_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t energy_storage_identifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t isolation_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_error;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_voltage;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_128006_thrusterControlStatus.
 *
 * Thruster Control Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128006_thruster_control_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t identifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t retract_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_events;

    /**
     * Range: -
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t command_timeout;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t azimuth_control;
};

/**
 * Signals in message PGN_128007_thrusterInformation.
 *
 * Thruster Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128007_thruster_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t identifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t power_rating;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t maximum_temperature_rating;

    /**
     * Range: -
     * Scale: 0.25
     * Offset: 0
     */
    uint16_t maximum_rotational_speed;
};

/**
 * Signals in message PGN_128008_thrusterMotorStatus.
 *
 * Thruster Motor Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128008_thruster_motor_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t identifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_events;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t temperature;

    /**
     * Range: -
     * Scale: 60
     * Offset: 0
     */
    uint16_t operating_time;
};

/**
 * Signals in message PGN_128259_speed.
 *
 * Speed
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128259_speed_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t speed_water_referenced;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t speed_ground_referenced;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_water_referenced_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_direction;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_128267_waterDepth.
 *
 * Water Depth
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128267_water_depth_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Depth below transducer
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint32_t depth;

    /**
     * Distance between transducer and surface (positive) or keel (negative)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t offset;

    /**
     * Max measurement range
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint8_t range;
};

/**
 * Signals in message PGN_128275_distanceLog.
 *
 * Distance Log
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128275_distance_log_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_128520_trackedTargetData.
 *
 * Tracked Target Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128520_tracked_target_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_128538_elevatorCarStatus.
 *
 * Elevator Car Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128538_elevator_car_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_128768_elevatorMotorControl.
 *
 * Elevator Motor Control
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128768_elevator_motor_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t elevator_car_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t elevator_car_usage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_acceleration_deceleration_profile_selection;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_rotational_control_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_128769_elevatorDeckPushButton.
 *
 * Elevator Deck Push Button
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128769_elevator_deck_push_button_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t elevator_call_button_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t deck_button_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t elevator_car_usage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t elevator_car_button_selection;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_128776_windlassControlStatus.
 *
 * Windlass Control Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128776_windlass_control_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_direction_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t anchor_docking_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_control_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * 0=Off,Single speed:1-100=On,Dual Speed:1-49=Slow/50-100=Fast,Proportional:10-100
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t speed_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_enable;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mechanical_lock;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t deck_and_anchor_wash;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t anchor_light;

    /**
     * If timeout elapses the thruster stops operating and reverts to static mode
     *
     * Range: -
     * Scale: 0.005
     * Offset: 0
     */
    uint8_t command_timeout;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_control_events;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved14;
};

/**
 * Signals in message PGN_128777_anchorWindlassOperatingStatus.
 *
 * Anchor Windlass Operating Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128777_anchor_windlass_operating_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_direction_control;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_motion_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rode_type_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t rode_counter_value;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t windlass_line_speed;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t anchor_docking_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_operating_events;
};

/**
 * Signals in message PGN_128778_anchorWindlassMonitoringStatus.
 *
 * Anchor Windlass Monitoring Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128778_anchor_windlass_monitoring_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t windlass_monitoring_events;

    /**
     * Range: -
     * Scale: 0.2
     * Offset: 0
     */
    uint8_t controller_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_current;

    /**
     * Range: -
     * Scale: 60
     * Offset: 0
     */
    uint16_t total_motor_time;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_128780_linearActuatorControlStatus.
 *
 * Linear Actuator Control/Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_128780_linear_actuator_control_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t actuator_identifier;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t commanded_device_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t maximum_device_travel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction_of_travel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_129025_positionRapidUpdate.
 *
 * Position, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129025_position_rapid_update_t {
    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t latitude;

    /**
     * Range: -
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t longitude;
};

/**
 * Signals in message PGN_129026_cogSogRapidUpdate.
 *
 * COG & SOG, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129026_cog_sog_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cog_reference;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cog;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t sog;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_129027_positionDeltaRapidUpdate.
 *
 * Position Delta, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129027_position_delta_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t time_delta;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t latitude_delta;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t longitude_delta;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_129028_altitudeDeltaRapidUpdate.
 *
 * Altitude Delta, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129028_altitude_delta_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t time_delta;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gnss_quality;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t direction;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t cog;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t altitude_delta;
};

/**
 * Signals in message PGN_129029_gnssPositionData.
 *
 * GNSS Position Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129029_gnss_position_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129033_timeDate.
 *
 * Time & Date
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129033_time_date_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t date;

    /**
     * Seconds since midnight
     *
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t time;

    /**
     * Range: -
     * Scale: 60
     * Offset: 0
     */
    int16_t local_offset;
};

/**
 * Signals in message PGN_129038_aisClassAPositionReport.
 *
 * AIS Class A Position Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129038_ais_class_a_position_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129039_aisClassBPositionReport.
 *
 * AIS Class B Position Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129039_ais_class_b_position_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129040_aisClassBExtendedPositionReport.
 *
 * AIS Class B Extended Position Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129040_ais_class_b_extended_position_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129041_aisAidsToNavigationAtonReport.
 *
 * AIS Aids to Navigation (AtoN) Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129041_ais_aids_to_navigation_aton_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129044_datum.
 *
 * Datum
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129044_datum_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129045_userDatum.
 *
 * User Datum
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129045_user_datum_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129283_crossTrackError.
 *
 * Cross Track Error
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129283_cross_track_error_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t xte_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t navigation_terminated;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int32_t xte;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_129284_navigationData.
 *
 * Navigation Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129284_navigation_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129285_navigationRouteWpInformation.
 *
 * Navigation - Route/WP Information
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129285_navigation_route_wp_information_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129291_setDriftRapidUpdate.
 *
 * Set & Drift, Rapid Update
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129291_set_drift_rapid_update_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_reference;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t set;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t drift;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved6;
};

/**
 * Signals in message PGN_129301_navigationRouteTimeToFromMark.
 *
 * Navigation - Route / Time to+from Mark
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129301_navigation_route_time_to_from_mark_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129302_bearingAndDistanceBetweenTwoMarks.
 *
 * Bearing and Distance between two Marks
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129302_bearing_and_distance_between_two_marks_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129538_gnssControlStatus.
 *
 * GNSS Control Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129538_gnss_control_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129539_gnssDops.
 *
 * GNSS DOPs
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129539_gnss_dops_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t desired_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t actual_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Horizontal dilution of precision
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t hdop;

    /**
     * Vertical dilution of precision
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t vdop;

    /**
     * Time dilution of precision
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t tdop;
};

/**
 * Signals in message PGN_129540_gnssSatsInView.
 *
 * GNSS Sats in View
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129540_gnss_sats_in_view_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129541_gpsAlmanacData.
 *
 * GPS Almanac Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129541_gps_almanac_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129542_gnssPseudorangeNoiseStatistics.
 *
 * GNSS Pseudorange Noise Statistics
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129542_gnss_pseudorange_noise_statistics_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129545_gnssRaimOutput.
 *
 * GNSS RAIM Output
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129545_gnss_raim_output_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129546_gnssRaimSettings.
 *
 * GNSS RAIM Settings
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129546_gnss_raim_settings_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t radial_position_error_maximum_threshold;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t probability_of_false_alarm;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t probability_of_missed_detection;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pseudorange_residual_filtering_time_constant;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
};

/**
 * Signals in message PGN_129547_gnssPseudorangeErrorStatistics.
 *
 * GNSS Pseudorange Error Statistics
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129547_gnss_pseudorange_error_statistics_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129549_dgnssCorrections.
 *
 * DGNSS Corrections
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129549_dgnss_corrections_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129550_gnssDifferentialCorrectionReceiverInterface.
 *
 * GNSS Differential Correction Receiver Interface
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129550_gnss_differential_correction_receiver_interface_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint32_t frequency;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t serial_interface_bit_rate;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t serial_interface_detection_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t differential_source;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t differential_operation_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_129551_gnssDifferentialCorrectionReceiverSignal.
 *
 * GNSS Differential Correction Receiver Signal
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129551_gnss_differential_correction_receiver_signal_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129556_glonassAlmanacData.
 *
 * GLONASS Almanac Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129556_glonass_almanac_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129792_aisDgnssBroadcastBinaryMessage.
 *
 * AIS DGNSS Broadcast Binary Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129792_ais_dgnss_broadcast_binary_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129793_aisUtcAndDateReport.
 *
 * AIS UTC and Date Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129793_ais_utc_and_date_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129794_aisClassAStaticAndVoyageRelatedData.
 *
 * AIS Class A Static and Voyage Related Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129795_aisAddressedBinaryMessage.
 *
 * AIS Addressed Binary Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129795_ais_addressed_binary_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129796_aisAcknowledge.
 *
 * AIS Acknowledge
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129796_ais_acknowledge_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129797_aisBinaryBroadcastMessage.
 *
 * AIS Binary Broadcast Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129797_ais_binary_broadcast_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129798_aisSarAircraftPositionReport.
 *
 * AIS SAR Aircraft Position Report
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129798_ais_sar_aircraft_position_report_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129799_radioFrequencyModePower.
 *
 * Radio Frequency/Mode/Power
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129799_radio_frequency_mode_power_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129800_aisUtcDateInquiry.
 *
 * AIS UTC/Date Inquiry
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129800_ais_utc_date_inquiry_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129801_aisAddressedSafetyRelatedMessage.
 *
 * AIS Addressed Safety Related Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129801_ais_addressed_safety_related_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129802_aisSafetyRelatedBroadcastMessage.
 *
 * AIS Safety Related Broadcast Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129802_ais_safety_related_broadcast_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129803_aisInterrogation.
 *
 * AIS Interrogation
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129803_ais_interrogation_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129804_aisAssignmentModeCommand.
 *
 * AIS Assignment Mode Command
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129804_ais_assignment_mode_command_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129805_aisDataLinkManagementMessage.
 *
 * AIS Data Link Management Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129805_ais_data_link_management_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129806_aisChannelManagement.
 *
 * AIS Channel Management
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129806_ais_channel_management_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129807_aisClassBGroupAssignment.
 *
 * AIS Class B Group Assignment
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129807_ais_class_b_group_assignment_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129809_aisClassBStaticDataMsg24PartA.
 *
 * AIS Class B static data (msg 24 Part A)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_129810_aisClassBStaticDataMsg24PartB.
 *
 * AIS Class B static data (msg 24 Part B)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130052_loranCTdData.
 *
 * Loran-C TD Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130052_loran_c_td_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130053_loranCRangeData.
 *
 * Loran-C Range Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130053_loran_c_range_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130054_loranCSignalData.
 *
 * Loran-C Signal Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130054_loran_c_signal_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130060_label.
 *
 * Label
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130060_label_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130061_channelSourceConfiguration.
 *
 * Channel Source Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130061_channel_source_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130064_routeAndWpServiceDatabaseList.
 *
 * Route and WP Service - Database List
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130064_route_and_wp_service_database_list_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130065_routeAndWpServiceRouteList.
 *
 * Route and WP Service - Route List
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130065_route_and_wp_service_route_list_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130066_routeAndWpServiceRouteWpListAttributes.
 *
 * Route and WP Service - Route/WP-List Attributes
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130067_routeAndWpServiceRouteWpNamePosition.
 *
 * Route and WP Service - Route - WP Name & Position
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130067_route_and_wp_service_route_wp_name_position_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130068_routeAndWpServiceRouteWpName.
 *
 * Route and WP Service - Route - WP Name
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130068_route_and_wp_service_route_wp_name_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130069_routeAndWpServiceXteLimitNavigationMethod.
 *
 * Route and WP Service - XTE Limit & Navigation Method
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130070_routeAndWpServiceWpComment.
 *
 * Route and WP Service - WP Comment
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130070_route_and_wp_service_wp_comment_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130071_routeAndWpServiceRouteComment.
 *
 * Route and WP Service - Route Comment
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130071_route_and_wp_service_route_comment_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130072_routeAndWpServiceDatabaseComment.
 *
 * Route and WP Service - Database Comment
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130072_route_and_wp_service_database_comment_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130073_routeAndWpServiceRadiusOfTurn.
 *
 * Route and WP Service - Radius of Turn
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130073_route_and_wp_service_radius_of_turn_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130074_routeAndWpServiceWpListWpNamePosition.
 *
 * Route and WP Service - WP List - WP Name & Position
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130306_windData.
 *
 * Wind Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130306_wind_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t wind_speed;

    /**
     * Range: -
     * Scale: 0.0001
     * Offset: 0
     */
    uint16_t wind_angle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reference;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
};

/**
 * Signals in message PGN_130310_environmentalParametersObsolete.
 *
 * Environmental Parameters (obsolete)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130310_environmental_parameters_obsolete_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t water_temperature;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t outside_ambient_air_temperature;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t atmospheric_pressure;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_130311_environmentalParameters.
 *
 * Environmental Parameters
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130311_environmental_parameters_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_source;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t humidity_source;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t temperature;

    /**
     * Range: -
     * Scale: 0.004
     * Offset: 0
     */
    int16_t humidity;

    /**
     * Range: -
     * Scale: 100
     * Offset: 0
     */
    uint16_t atmospheric_pressure;
};

/**
 * Signals in message PGN_130312_temperature.
 *
 * Temperature
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130312_temperature_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t actual_temperature;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t set_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_130313_humidity.
 *
 * Humidity
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130313_humidity_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 0.004
     * Offset: 0
     */
    int16_t actual_humidity;

    /**
     * Range: -
     * Scale: 0.004
     * Offset: 0
     */
    int16_t set_humidity;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_130314_actualPressure.
 *
 * Actual Pressure
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130314_actual_pressure_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int32_t pressure;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_130315_setPressure.
 *
 * Set Pressure
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130315_set_pressure_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint32_t pressure;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
};

/**
 * Signals in message PGN_130316_temperatureExtendedRange.
 *
 * Temperature Extended Range
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130316_temperature_extended_range_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t instance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source;

    /**
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t temperature;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t set_temperature;
};

/**
 * Signals in message PGN_130320_tideStationData.
 *
 * Tide Station Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130320_tide_station_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130321_salinityStationData.
 *
 * Salinity Station Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130321_salinity_station_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130322_currentStationData.
 *
 * Current Station Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130322_current_station_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130323_meteorologicalStationData.
 *
 * Meteorological Station Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130323_meteorological_station_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130324_mooredBuoyStationData.
 *
 * Moored Buoy Station Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130324_moored_buoy_station_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130330_lightingSystemSettings.
 *
 * Lighting System Settings
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130330_lighting_system_settings_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130560_payloadMass.
 *
 * Payload Mass
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130560_payload_mass_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t measurement_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t measurement_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t payload_mass;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved6;
};

/**
 * Signals in message PGN_130561_lightingZone.
 *
 * Lighting Zone
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130561_lighting_zone_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130562_lightingScene.
 *
 * Lighting Scene
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130562_lighting_scene_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130563_lightingDevice.
 *
 * Lighting Device
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130563_lighting_device_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130564_lightingDeviceEnumeration.
 *
 * Lighting Device Enumeration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130564_lighting_device_enumeration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130565_lightingColorSequence.
 *
 * Lighting Color Sequence
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130565_lighting_color_sequence_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130566_lightingProgram.
 *
 * Lighting Program
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130566_lighting_program_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130567_watermakerInputSettingAndStatus.
 *
 * Watermaker Input Setting and Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130567_watermaker_input_setting_and_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130569_currentStatusAndFile.
 *
 * Current Status and File
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130569_current_status_and_file_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130570_libraryDataFile.
 *
 * Library Data File
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130570_library_data_file_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130571_libraryDataGroup.
 *
 * Library Data Group
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130571_library_data_group_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130572_libraryDataSearch.
 *
 * Library Data Search
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130572_library_data_search_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130573_supportedSourceData.
 *
 * Supported Source Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130573_supported_source_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130574_supportedZoneData.
 *
 * Supported Zone Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130574_supported_zone_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130576_smallCraftStatus.
 *
 * Small Craft Status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130576_small_craft_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t port_trim_tab;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t starboard_trim_tab;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_130577_directionData.
 *
 * Direction Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130577_direction_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130578_vesselSpeedComponents.
 *
 * Vessel Speed Components
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130578_vessel_speed_components_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130579_systemConfiguration.
 *
 * System Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130579_system_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t default_settings;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tuner_regions;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t max_favorites;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t video_protocols;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
};

/**
 * Signals in message PGN_130580_systemConfigurationDeprecated.
 *
 * System Configuration (deprecated)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130580_system_configuration_deprecated_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130581_zoneConfigurationDeprecated.
 *
 * Zone Configuration (deprecated)
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130581_zone_configuration_deprecated_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130582_zoneVolume.
 *
 * Zone Volume
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130582_zone_volume_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t zone_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t volume;

    /**
     * Write only
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t volume_change;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mute;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved7;
};

/**
 * Signals in message PGN_130583_availableAudioEqPresets.
 *
 * Available Audio EQ presets
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130583_available_audio_eq_presets_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130584_availableBluetoothAddresses.
 *
 * Available Bluetooth addresses
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130584_available_bluetooth_addresses_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130585_bluetoothSourceStatus.
 *
 * Bluetooth source status
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130585_bluetooth_source_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_number;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t forget_device;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t discovering;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t bluetooth_address;
};

/**
 * Signals in message PGN_130586_zoneConfiguration.
 *
 * Zone Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130586_zone_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130818_simnetReprogramData.
 *
 * Simnet: Reprogram Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130818_simnet_reprogram_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130819_simnetRequestReprogram.
 *
 * Simnet: Request Reprogram
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130819_simnet_request_reprogram_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130822_navicoUnknown1.
 *
 * Navico: Unknown 1
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130822_navico_unknown1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130823_maretronProprietaryTemperatureHighRange.
 *
 * Maretron: Proprietary Temperature High Range
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130823_maretron_proprietary_temperature_high_range_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130825_navicoUnknown2.
 *
 * Navico: Unknown 2
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130825_navico_unknown2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130827_lowranceUnknown.
 *
 * Lowrance: unknown
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130827_lowrance_unknown_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130828_simnetSetSerialNumber.
 *
 * Simnet: Set Serial Number
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130828_simnet_set_serial_number_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130831_suzukiEngineAndStorageDeviceConfig.
 *
 * Suzuki: Engine and Storage Device Config
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130831_suzuki_engine_and_storage_device_config_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130832_simnetFuelUsedHighResolution.
 *
 * Simnet: Fuel Used - High Resolution
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130832_simnet_fuel_used_high_resolution_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130833_bGUserAndRemoteRename.
 *
 * B&G: User and Remote rename
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130833_b_g_user_and_remote_rename_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130834_simnetEngineAndTankConfiguration.
 *
 * Simnet: Engine and Tank Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130834_simnet_engine_and_tank_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130835_simnetSetEngineAndTankConfiguration.
 *
 * Simnet: Set Engine and Tank Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130835_simnet_set_engine_and_tank_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130838_simnetFluidLevelWarning.
 *
 * Simnet: Fluid Level Warning
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130838_simnet_fluid_level_warning_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130839_simnetPressureSensorConfiguration.
 *
 * Simnet: Pressure Sensor Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130839_simnet_pressure_sensor_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130840_simnetDataUserGroupConfiguration.
 *
 * Simnet: Data User Group Configuration
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130840_simnet_data_user_group_configuration_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130847_seatalkNodeStatistics.
 *
 * SeaTalk: Node Statistics
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130847_seatalk_node_statistics_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130851_simnetEventReplyApCommand.
 *
 * Simnet: Event Reply: AP command
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130851_simnet_event_reply_ap_command_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130856_simnetAlarmMessage.
 *
 * Simnet: Alarm Message
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130856_simnet_alarm_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130860_simnetApUnknown4.
 *
 * Simnet: AP Unknown 4
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130860_simnet_ap_unknown4_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130880_airmarAdditionalWeatherData.
 *
 * Airmar: Additional Weather Data
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130880_airmar_additional_weather_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130881_airmarHeaterControl.
 *
 * Airmar: Heater Control
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130881_airmar_heater_control_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Signals in message PGN_130944_airmarPost.
 *
 * Airmar: POST
 *
 * All signal values are as on the CAN bus.
 */
struct n2k_pgn_130944_airmar_post_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fast_packet_sequence_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t fast_packet_data;
};

/**
 * Pack message PGN_65380_Actuator_Command_Port_Engine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65380_actuator_command_port_engine_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65380_actuator_command_port_engine_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65380_Actuator_Command_Port_Engine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65380_actuator_command_port_engine_unpack(
    struct n2k_pgn_65380_actuator_command_port_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65380_Actuator_Command_Port_Engine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65380_actuator_command_port_engine_init(struct n2k_pgn_65380_actuator_command_port_engine_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65380_actuator_command_port_engine_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_source_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_source_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_source_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_gear_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_gear_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_gear_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65380_actuator_command_port_engine_throttle_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_throttle_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_throttle_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65380_actuator_command_port_engine_reserved_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65380_actuator_command_port_engine_reserved_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65380_actuator_command_port_engine_reserved_6_is_in_range(uint8_t value);

/**
 * Pack message PGN_65381_Actuator_Command_Stbd_Engine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65381_actuator_command_stbd_engine_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65381_actuator_command_stbd_engine_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65381_Actuator_Command_Stbd_Engine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65381_actuator_command_stbd_engine_unpack(
    struct n2k_pgn_65381_actuator_command_stbd_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65381_Actuator_Command_Stbd_Engine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65381_actuator_command_stbd_engine_init(struct n2k_pgn_65381_actuator_command_stbd_engine_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65381_actuator_command_stbd_engine_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_source_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_source_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_source_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_gear_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_gear_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_gear_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65381_actuator_command_stbd_engine_throttle_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_throttle_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_throttle_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65381_actuator_command_stbd_engine_reserved_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65381_actuator_command_stbd_engine_reserved_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65381_actuator_command_stbd_engine_reserved_6_is_in_range(uint8_t value);

/**
 * Pack message PGN_65382_Actuator_Command_Center_Engine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65382_actuator_command_center_engine_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65382_actuator_command_center_engine_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65382_Actuator_Command_Center_Engine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65382_actuator_command_center_engine_unpack(
    struct n2k_pgn_65382_actuator_command_center_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65382_Actuator_Command_Center_Engine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65382_actuator_command_center_engine_init(struct n2k_pgn_65382_actuator_command_center_engine_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65382_actuator_command_center_engine_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_source_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_source_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_source_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_gear_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_gear_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_gear_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65382_actuator_command_center_engine_throttle_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_throttle_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_throttle_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65382_actuator_command_center_engine_reserved_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65382_actuator_command_center_engine_reserved_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65382_actuator_command_center_engine_reserved_6_is_in_range(uint8_t value);

/**
 * Pack message PGN_65383_Actuator_Command_Stbd_Center_Engine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65383_actuator_command_stbd_center_engine_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65383_actuator_command_stbd_center_engine_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65383_Actuator_Command_Stbd_Center_Engine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65383_actuator_command_stbd_center_engine_unpack(
    struct n2k_pgn_65383_actuator_command_stbd_center_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65383_Actuator_Command_Stbd_Center_Engine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65383_actuator_command_stbd_center_engine_init(struct n2k_pgn_65383_actuator_command_stbd_center_engine_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65383_actuator_command_stbd_center_engine_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_source_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_source_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_source_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_gear_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_gear_command_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_gear_command_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65383_actuator_command_stbd_center_engine_throttle_command_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_throttle_command_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_throttle_command_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65383_actuator_command_stbd_center_engine_reserved_6_is_in_range(uint8_t value);

/**
 * Pack message PGN_65385_Actuator_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65385_actuator_feedback_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65385_actuator_feedback_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65385_Actuator_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65385_actuator_feedback_unpack(
    struct n2k_pgn_65385_actuator_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65385_Actuator_Feedback.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65385_actuator_feedback_init(struct n2k_pgn_65385_actuator_feedback_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65385_actuator_feedback_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_reserved_field1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_reserved_field1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_reserved_field1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_engine_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_engine_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_engine_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_actuator_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_actuator_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_actuator_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_reserved_field2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_reserved_field2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_reserved_field2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_actual_gear_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_actual_gear_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_actual_gear_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_control_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_control_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_control_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65385_actuator_feedback_actual_throttle_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_actual_throttle_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_actual_throttle_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_reserved_field3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_reserved_field3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_reserved_field3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_danger_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_danger_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_danger_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_warning_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_warning_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_warning_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_shift_forward_motion_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_shift_forward_motion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_shift_forward_motion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_shift_neutral_motion_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_shift_neutral_motion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_shift_neutral_motion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_shift_reverse_motion_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_shift_reverse_motion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_shift_reverse_motion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_throttle_up_motion_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_throttle_up_motion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_throttle_up_motion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_throttle_down_motion_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_throttle_down_motion_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_throttle_down_motion_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65385_actuator_feedback_reserved_field4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65385_actuator_feedback_reserved_field4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65385_actuator_feedback_reserved_field4_is_in_range(uint8_t value);

/**
 * Pack message PGN_65390_Control_Head_Feedback.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65390_control_head_feedback_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65390_control_head_feedback_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65390_Control_Head_Feedback.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65390_control_head_feedback_unpack(
    struct n2k_pgn_65390_control_head_feedback_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65390_Control_Head_Feedback.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65390_control_head_feedback_init(struct n2k_pgn_65390_control_head_feedback_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65390_control_head_feedback_manufacturer_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_manufacturer_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_manufacturer_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_reserved_field1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_reserved_field1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_reserved_field1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_source_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_source_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_source_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_reserved_field2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_reserved_field2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_reserved_field2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_port_lever_gear_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_port_lever_gear_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_port_lever_gear_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_stbd_lever_gear_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_stbd_lever_gear_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_stbd_lever_gear_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_port_lever_throttle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_port_lever_throttle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_port_lever_throttle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_stbd_lever_throttle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_stbd_lever_throttle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_stbd_lever_throttle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_reserved_field3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_reserved_field3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_reserved_field3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_danger_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_danger_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_danger_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_warning_fault_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_warning_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_warning_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_ch_controlling_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_ch_controlling_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_ch_controlling_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_port_ntw_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_port_ntw_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_port_ntw_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_stbd_ntw_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_stbd_ntw_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_stbd_ntw_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_sync_mode_active_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_sync_mode_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_sync_mode_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65390_control_head_feedback_reserved_field4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65390_control_head_feedback_reserved_field4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65390_control_head_feedback_reserved_field4_is_in_range(uint8_t value);

/**
 * Pack message PGN_59392_isoAcknowledgement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_59392_iso_acknowledgement_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_59392_iso_acknowledgement_t *src_p,
    size_t size);

/**
 * Unpack message PGN_59392_isoAcknowledgement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_59392_iso_acknowledgement_unpack(
    struct n2k_pgn_59392_iso_acknowledgement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_59392_isoAcknowledgement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_59392_iso_acknowledgement_init(struct n2k_pgn_59392_iso_acknowledgement_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_59392_iso_acknowledgement_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_59392_iso_acknowledgement_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_59392_iso_acknowledgement_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_59392_iso_acknowledgement_group_function_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_59392_iso_acknowledgement_group_function_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_59392_iso_acknowledgement_group_function_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_59392_iso_acknowledgement_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_59392_iso_acknowledgement_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_59392_iso_acknowledgement_reserved_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_59392_iso_acknowledgement_pgn_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_59392_iso_acknowledgement_pgn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_59392_iso_acknowledgement_pgn_is_in_range(uint32_t value);

/**
 * Pack message PGN_59904_isoRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_59904_iso_request_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_59904_iso_request_t *src_p,
    size_t size);

/**
 * Unpack message PGN_59904_isoRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_59904_iso_request_unpack(
    struct n2k_pgn_59904_iso_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_59904_isoRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_59904_iso_request_init(struct n2k_pgn_59904_iso_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_59904_iso_request_pgn_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_59904_iso_request_pgn_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_59904_iso_request_pgn_is_in_range(uint32_t value);

/**
 * Pack message PGN_60160_isoTransportProtocolDataTransfer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_60160_iso_transport_protocol_data_transfer_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_60160_iso_transport_protocol_data_transfer_t *src_p,
    size_t size);

/**
 * Unpack message PGN_60160_isoTransportProtocolDataTransfer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_60160_iso_transport_protocol_data_transfer_unpack(
    struct n2k_pgn_60160_iso_transport_protocol_data_transfer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_60160_isoTransportProtocolDataTransfer.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_60160_iso_transport_protocol_data_transfer_init(struct n2k_pgn_60160_iso_transport_protocol_data_transfer_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60160_iso_transport_protocol_data_transfer_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60160_iso_transport_protocol_data_transfer_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60160_iso_transport_protocol_data_transfer_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_60160_iso_transport_protocol_data_transfer_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60160_iso_transport_protocol_data_transfer_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60160_iso_transport_protocol_data_transfer_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_60928_isoAddressClaim.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_60928_iso_address_claim_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_60928_iso_address_claim_t *src_p,
    size_t size);

/**
 * Unpack message PGN_60928_isoAddressClaim.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_60928_iso_address_claim_unpack(
    struct n2k_pgn_60928_iso_address_claim_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_60928_isoAddressClaim.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_60928_iso_address_claim_init(struct n2k_pgn_60928_iso_address_claim_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_60928_iso_address_claim_unique_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_unique_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_unique_number_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_60928_iso_address_claim_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_device_instance_lower_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_device_instance_lower_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_device_instance_lower_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_device_instance_upper_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_device_instance_upper_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_device_instance_upper_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_device_function_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_device_function_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_device_function_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_spare_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_spare_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_spare_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_device_class_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_device_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_device_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_system_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_system_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_system_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_industry_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_industry_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_industry_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_60928_iso_address_claim_arbitrary_address_capable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_60928_iso_address_claim_arbitrary_address_capable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_60928_iso_address_claim_arbitrary_address_capable_is_in_range(uint8_t value);

/**
 * Pack message PGN_65001_bus1PhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65001_bus1PhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_unpack(
    struct n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65001_bus1PhaseCBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_init(struct n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65001_bus1_phase_c_basic_ac_quantities_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65002_bus1PhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65002_bus1PhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_unpack(
    struct n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65002_bus1PhaseBBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_init(struct n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65002_bus1_phase_b_basic_ac_quantities_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65003_bus1PhaseABasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65003_bus1PhaseABasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_unpack(
    struct n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65003_bus1PhaseABasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_init(struct n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65003_bus1_phase_a_basic_ac_quantities_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65004_bus1AverageBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65004_bus1_average_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65004_bus1_average_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65004_bus1AverageBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65004_bus1_average_basic_ac_quantities_unpack(
    struct n2k_pgn_65004_bus1_average_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65004_bus1AverageBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65004_bus1_average_basic_ac_quantities_init(struct n2k_pgn_65004_bus1_average_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65004_bus1_average_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65004_bus1_average_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65004_bus1_average_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65004_bus1_average_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65004_bus1_average_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65004_bus1_average_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65004_bus1_average_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65004_bus1_average_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65004_bus1_average_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65004_bus1_average_basic_ac_quantities_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65004_bus1_average_basic_ac_quantities_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65004_bus1_average_basic_ac_quantities_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65005_utilityTotalAcEnergy.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65005_utility_total_ac_energy_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65005_utility_total_ac_energy_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65005_utilityTotalAcEnergy.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65005_utility_total_ac_energy_unpack(
    struct n2k_pgn_65005_utility_total_ac_energy_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65005_utilityTotalAcEnergy.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65005_utility_total_ac_energy_init(struct n2k_pgn_65005_utility_total_ac_energy_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65005_utility_total_ac_energy_total_energy_export_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65005_utility_total_ac_energy_total_energy_export_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65005_utility_total_ac_energy_total_energy_export_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65005_utility_total_ac_energy_total_energy_import_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65005_utility_total_ac_energy_total_energy_import_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65005_utility_total_ac_energy_total_energy_import_is_in_range(uint32_t value);

/**
 * Pack message PGN_65006_utilityPhaseCAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65006_utility_phase_c_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65006_utility_phase_c_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65006_utilityPhaseCAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65006_utility_phase_c_ac_reactive_power_unpack(
    struct n2k_pgn_65006_utility_phase_c_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65006_utilityPhaseCAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65006_utility_phase_c_ac_reactive_power_init(struct n2k_pgn_65006_utility_phase_c_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65006_utility_phase_c_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65006_utility_phase_c_ac_reactive_power_reactive_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65006_utility_phase_c_ac_reactive_power_reactive_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65006_utility_phase_c_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65006_utility_phase_c_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65006_utility_phase_c_ac_reactive_power_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65006_utility_phase_c_ac_reactive_power_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_65007_utilityPhaseCAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65007_utility_phase_c_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65007_utility_phase_c_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65007_utilityPhaseCAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65007_utility_phase_c_ac_power_unpack(
    struct n2k_pgn_65007_utility_phase_c_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65007_utilityPhaseCAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65007_utility_phase_c_ac_power_init(struct n2k_pgn_65007_utility_phase_c_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65007_utility_phase_c_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65007_utility_phase_c_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65007_utility_phase_c_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65007_utility_phase_c_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65007_utility_phase_c_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65007_utility_phase_c_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65008_utilityPhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65008_utility_phase_c_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65008_utility_phase_c_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65008_utilityPhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65008_utility_phase_c_basic_ac_quantities_unpack(
    struct n2k_pgn_65008_utility_phase_c_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65008_utilityPhaseCBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65008_utility_phase_c_basic_ac_quantities_init(struct n2k_pgn_65008_utility_phase_c_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65008_utility_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65008_utility_phase_c_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65009_utilityPhaseBAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65009_utility_phase_b_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65009_utility_phase_b_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65009_utilityPhaseBAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65009_utility_phase_b_ac_reactive_power_unpack(
    struct n2k_pgn_65009_utility_phase_b_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65009_utilityPhaseBAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65009_utility_phase_b_ac_reactive_power_init(struct n2k_pgn_65009_utility_phase_b_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65009_utility_phase_b_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65009_utility_phase_b_ac_reactive_power_reactive_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65009_utility_phase_b_ac_reactive_power_reactive_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65009_utility_phase_b_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65009_utility_phase_b_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65009_utility_phase_b_ac_reactive_power_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65009_utility_phase_b_ac_reactive_power_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_65010_utilityPhaseBAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65010_utility_phase_b_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65010_utility_phase_b_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65010_utilityPhaseBAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65010_utility_phase_b_ac_power_unpack(
    struct n2k_pgn_65010_utility_phase_b_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65010_utilityPhaseBAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65010_utility_phase_b_ac_power_init(struct n2k_pgn_65010_utility_phase_b_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65010_utility_phase_b_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65010_utility_phase_b_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65010_utility_phase_b_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65010_utility_phase_b_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65010_utility_phase_b_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65010_utility_phase_b_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65011_utilityPhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65011_utility_phase_b_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65011_utility_phase_b_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65011_utilityPhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65011_utility_phase_b_basic_ac_quantities_unpack(
    struct n2k_pgn_65011_utility_phase_b_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65011_utilityPhaseBBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65011_utility_phase_b_basic_ac_quantities_init(struct n2k_pgn_65011_utility_phase_b_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65011_utility_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65011_utility_phase_b_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65012_utilityPhaseAAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65012_utility_phase_a_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65012_utility_phase_a_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65012_utilityPhaseAAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65012_utility_phase_a_ac_reactive_power_unpack(
    struct n2k_pgn_65012_utility_phase_a_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65012_utilityPhaseAAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65012_utility_phase_a_ac_reactive_power_init(struct n2k_pgn_65012_utility_phase_a_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65012_utility_phase_a_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65012_utility_phase_a_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65012_utility_phase_a_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65012_utility_phase_a_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65012_utility_phase_a_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65012_utility_phase_a_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65012_utility_phase_a_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65013_utilityPhaseAAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65013_utility_phase_a_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65013_utility_phase_a_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65013_utilityPhaseAAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65013_utility_phase_a_ac_power_unpack(
    struct n2k_pgn_65013_utility_phase_a_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65013_utilityPhaseAAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65013_utility_phase_a_ac_power_init(struct n2k_pgn_65013_utility_phase_a_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65013_utility_phase_a_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65013_utility_phase_a_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65013_utility_phase_a_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65013_utility_phase_a_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65013_utility_phase_a_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65013_utility_phase_a_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65014_utilityPhaseABasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65014_utility_phase_a_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65014_utility_phase_a_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65014_utilityPhaseABasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65014_utility_phase_a_basic_ac_quantities_unpack(
    struct n2k_pgn_65014_utility_phase_a_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65014_utilityPhaseABasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65014_utility_phase_a_basic_ac_quantities_init(struct n2k_pgn_65014_utility_phase_a_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65014_utility_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65014_utility_phase_a_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65015_utilityTotalAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65015_utility_total_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65015_utility_total_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65015_utilityTotalAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65015_utility_total_ac_reactive_power_unpack(
    struct n2k_pgn_65015_utility_total_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65015_utilityTotalAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65015_utility_total_ac_reactive_power_init(struct n2k_pgn_65015_utility_total_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65015_utility_total_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65015_utility_total_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65015_utility_total_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65015_utility_total_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65015_utility_total_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65015_utility_total_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65015_utility_total_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65016_utilityTotalAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65016_utility_total_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65016_utility_total_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65016_utilityTotalAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65016_utility_total_ac_power_unpack(
    struct n2k_pgn_65016_utility_total_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65016_utilityTotalAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65016_utility_total_ac_power_init(struct n2k_pgn_65016_utility_total_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65016_utility_total_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65016_utility_total_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65016_utility_total_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65016_utility_total_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65016_utility_total_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65016_utility_total_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65017_utilityAverageBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65017_utility_average_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65017_utility_average_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65017_utilityAverageBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65017_utility_average_basic_ac_quantities_unpack(
    struct n2k_pgn_65017_utility_average_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65017_utilityAverageBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65017_utility_average_basic_ac_quantities_init(struct n2k_pgn_65017_utility_average_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65017_utility_average_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65017_utility_average_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65017_utility_average_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65017_utility_average_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65017_utility_average_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65017_utility_average_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65017_utility_average_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65017_utility_average_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65017_utility_average_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65017_utility_average_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65017_utility_average_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65017_utility_average_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65018_generatorTotalAcEnergy.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65018_generator_total_ac_energy_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65018_generator_total_ac_energy_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65018_generatorTotalAcEnergy.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65018_generator_total_ac_energy_unpack(
    struct n2k_pgn_65018_generator_total_ac_energy_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65018_generatorTotalAcEnergy.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65018_generator_total_ac_energy_init(struct n2k_pgn_65018_generator_total_ac_energy_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65018_generator_total_ac_energy_total_energy_export_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65018_generator_total_ac_energy_total_energy_export_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65018_generator_total_ac_energy_total_energy_export_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65018_generator_total_ac_energy_total_energy_import_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65018_generator_total_ac_energy_total_energy_import_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65018_generator_total_ac_energy_total_energy_import_is_in_range(uint32_t value);

/**
 * Pack message PGN_65019_generatorPhaseCAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65019_generator_phase_c_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65019_generator_phase_c_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65019_generatorPhaseCAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65019_generator_phase_c_ac_reactive_power_unpack(
    struct n2k_pgn_65019_generator_phase_c_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65019_generatorPhaseCAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65019_generator_phase_c_ac_reactive_power_init(struct n2k_pgn_65019_generator_phase_c_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65019_generator_phase_c_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65019_generator_phase_c_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65019_generator_phase_c_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65019_generator_phase_c_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65019_generator_phase_c_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65019_generator_phase_c_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65019_generator_phase_c_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65020_generatorPhaseCAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65020_generator_phase_c_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65020_generator_phase_c_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65020_generatorPhaseCAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65020_generator_phase_c_ac_power_unpack(
    struct n2k_pgn_65020_generator_phase_c_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65020_generatorPhaseCAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65020_generator_phase_c_ac_power_init(struct n2k_pgn_65020_generator_phase_c_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65020_generator_phase_c_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65020_generator_phase_c_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65020_generator_phase_c_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65020_generator_phase_c_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65020_generator_phase_c_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65020_generator_phase_c_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65021_generatorPhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65021_generator_phase_c_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65021_generator_phase_c_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65021_generatorPhaseCBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65021_generator_phase_c_basic_ac_quantities_unpack(
    struct n2k_pgn_65021_generator_phase_c_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65021_generatorPhaseCBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65021_generator_phase_c_basic_ac_quantities_init(struct n2k_pgn_65021_generator_phase_c_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65021_generator_phase_c_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65021_generator_phase_c_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65022_generatorPhaseBAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65022_generator_phase_b_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65022_generator_phase_b_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65022_generatorPhaseBAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65022_generator_phase_b_ac_reactive_power_unpack(
    struct n2k_pgn_65022_generator_phase_b_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65022_generatorPhaseBAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65022_generator_phase_b_ac_reactive_power_init(struct n2k_pgn_65022_generator_phase_b_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65022_generator_phase_b_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65022_generator_phase_b_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65022_generator_phase_b_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65022_generator_phase_b_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65022_generator_phase_b_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65022_generator_phase_b_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65022_generator_phase_b_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65023_generatorPhaseBAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65023_generator_phase_b_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65023_generator_phase_b_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65023_generatorPhaseBAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65023_generator_phase_b_ac_power_unpack(
    struct n2k_pgn_65023_generator_phase_b_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65023_generatorPhaseBAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65023_generator_phase_b_ac_power_init(struct n2k_pgn_65023_generator_phase_b_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65023_generator_phase_b_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65023_generator_phase_b_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65023_generator_phase_b_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65023_generator_phase_b_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65023_generator_phase_b_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65023_generator_phase_b_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65024_generatorPhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65024_generator_phase_b_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65024_generator_phase_b_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65024_generatorPhaseBBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65024_generator_phase_b_basic_ac_quantities_unpack(
    struct n2k_pgn_65024_generator_phase_b_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65024_generatorPhaseBBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65024_generator_phase_b_basic_ac_quantities_init(struct n2k_pgn_65024_generator_phase_b_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65024_generator_phase_b_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65024_generator_phase_b_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65025_generatorPhaseAAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65025_generator_phase_a_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65025_generator_phase_a_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65025_generatorPhaseAAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65025_generator_phase_a_ac_reactive_power_unpack(
    struct n2k_pgn_65025_generator_phase_a_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65025_generatorPhaseAAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65025_generator_phase_a_ac_reactive_power_init(struct n2k_pgn_65025_generator_phase_a_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65025_generator_phase_a_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65025_generator_phase_a_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65025_generator_phase_a_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65025_generator_phase_a_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65025_generator_phase_a_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65025_generator_phase_a_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65025_generator_phase_a_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65026_generatorPhaseAAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65026_generator_phase_a_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65026_generator_phase_a_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65026_generatorPhaseAAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65026_generator_phase_a_ac_power_unpack(
    struct n2k_pgn_65026_generator_phase_a_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65026_generatorPhaseAAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65026_generator_phase_a_ac_power_init(struct n2k_pgn_65026_generator_phase_a_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65026_generator_phase_a_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65026_generator_phase_a_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65026_generator_phase_a_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65026_generator_phase_a_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65026_generator_phase_a_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65026_generator_phase_a_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65027_generatorPhaseABasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65027_generator_phase_a_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65027_generator_phase_a_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65027_generatorPhaseABasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65027_generator_phase_a_basic_ac_quantities_unpack(
    struct n2k_pgn_65027_generator_phase_a_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65027_generatorPhaseABasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65027_generator_phase_a_basic_ac_quantities_init(struct n2k_pgn_65027_generator_phase_a_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65027_generator_phase_a_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65027_generator_phase_a_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65028_generatorTotalAcReactivePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65028_generator_total_ac_reactive_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65028_generator_total_ac_reactive_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65028_generatorTotalAcReactivePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65028_generator_total_ac_reactive_power_unpack(
    struct n2k_pgn_65028_generator_total_ac_reactive_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65028_generatorTotalAcReactivePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65028_generator_total_ac_reactive_power_init(struct n2k_pgn_65028_generator_total_ac_reactive_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65028_generator_total_ac_reactive_power_reactive_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65028_generator_total_ac_reactive_power_reactive_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65028_generator_total_ac_reactive_power_reactive_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_lagging_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_lagging_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65028_generator_total_ac_reactive_power_power_factor_lagging_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65028_generator_total_ac_reactive_power_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65028_generator_total_ac_reactive_power_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65028_generator_total_ac_reactive_power_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_65029_generatorTotalAcPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65029_generator_total_ac_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65029_generator_total_ac_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65029_generatorTotalAcPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65029_generator_total_ac_power_unpack(
    struct n2k_pgn_65029_generator_total_ac_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65029_generatorTotalAcPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65029_generator_total_ac_power_init(struct n2k_pgn_65029_generator_total_ac_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65029_generator_total_ac_power_real_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65029_generator_total_ac_power_real_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65029_generator_total_ac_power_real_power_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65029_generator_total_ac_power_apparent_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65029_generator_total_ac_power_apparent_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65029_generator_total_ac_power_apparent_power_is_in_range(int32_t value);

/**
 * Pack message PGN_65030_generatorAverageBasicAcQuantities.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65030_generator_average_basic_ac_quantities_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65030_generator_average_basic_ac_quantities_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65030_generatorAverageBasicAcQuantities.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65030_generator_average_basic_ac_quantities_unpack(
    struct n2k_pgn_65030_generator_average_basic_ac_quantities_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65030_generatorAverageBasicAcQuantities.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65030_generator_average_basic_ac_quantities_init(struct n2k_pgn_65030_generator_average_basic_ac_quantities_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65030_generator_average_basic_ac_quantities_line_line_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65030_generator_average_basic_ac_quantities_line_line_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65030_generator_average_basic_ac_quantities_line_line_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65030_generator_average_basic_ac_quantities_line_neutral_ac_rms_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65030_generator_average_basic_ac_quantities_line_neutral_ac_rms_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65030_generator_average_basic_ac_quantities_line_neutral_ac_rms_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65030_generator_average_basic_ac_quantities_ac_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65030_generator_average_basic_ac_quantities_ac_frequency_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65030_generator_average_basic_ac_quantities_ac_frequency_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65030_generator_average_basic_ac_quantities_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65030_generator_average_basic_ac_quantities_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65030_generator_average_basic_ac_quantities_ac_rms_current_is_in_range(uint16_t value);

/**
 * Pack message PGN_65280_furunoHeave.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65280_furuno_heave_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65280_furuno_heave_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65280_furunoHeave.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65280_furuno_heave_unpack(
    struct n2k_pgn_65280_furuno_heave_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65280_furunoHeave.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65280_furuno_heave_init(struct n2k_pgn_65280_furuno_heave_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65280_furuno_heave_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65280_furuno_heave_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65280_furuno_heave_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65280_furuno_heave_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65280_furuno_heave_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65280_furuno_heave_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65280_furuno_heave_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65280_furuno_heave_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65280_furuno_heave_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_65280_furuno_heave_heave_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65280_furuno_heave_heave_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65280_furuno_heave_heave_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65280_furuno_heave_reserved5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65280_furuno_heave_reserved5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65280_furuno_heave_reserved5_is_in_range(uint16_t value);

/**
 * Pack message PGN_65284_maretronProprietaryDcBreakerCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65284_maretron_proprietary_dc_breaker_current_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65284_maretron_proprietary_dc_breaker_current_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65284_maretronProprietaryDcBreakerCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65284_maretron_proprietary_dc_breaker_current_unpack(
    struct n2k_pgn_65284_maretron_proprietary_dc_breaker_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65284_maretronProprietaryDcBreakerCurrent.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65284_maretron_proprietary_dc_breaker_current_init(struct n2k_pgn_65284_maretron_proprietary_dc_breaker_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_bank_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_bank_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_bank_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_indicator_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_indicator_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_indicator_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_breaker_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_breaker_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_breaker_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65284_maretron_proprietary_dc_breaker_current_reserved7_is_in_range(uint16_t value);

/**
 * Pack message PGN_65288_seatalkAlarm.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65288_seatalk_alarm_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65288_seatalk_alarm_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65288_seatalkAlarm.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65288_seatalk_alarm_unpack(
    struct n2k_pgn_65288_seatalk_alarm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65288_seatalkAlarm.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65288_seatalk_alarm_init(struct n2k_pgn_65288_seatalk_alarm_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65288_seatalk_alarm_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_alarm_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_alarm_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_alarm_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_alarm_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_alarm_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_alarm_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65288_seatalk_alarm_alarm_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_alarm_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_alarm_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65288_seatalk_alarm_alarm_priority_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65288_seatalk_alarm_alarm_priority_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65288_seatalk_alarm_alarm_priority_is_in_range(uint16_t value);

/**
 * Pack message PGN_65289_simnetTrimTabSensorCalibration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65289_simnet_trim_tab_sensor_calibration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65289_simnet_trim_tab_sensor_calibration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65289_simnetTrimTabSensorCalibration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65289_simnet_trim_tab_sensor_calibration_unpack(
    struct n2k_pgn_65289_simnet_trim_tab_sensor_calibration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65289_simnetTrimTabSensorCalibration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65289_simnet_trim_tab_sensor_calibration_init(struct n2k_pgn_65289_simnet_trim_tab_sensor_calibration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65289_simnet_trim_tab_sensor_calibration_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65289_simnet_trim_tab_sensor_calibration_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65289_simnet_trim_tab_sensor_calibration_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65289_simnet_trim_tab_sensor_calibration_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65289_simnet_trim_tab_sensor_calibration_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65289_simnet_trim_tab_sensor_calibration_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved4_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65289_simnet_trim_tab_sensor_calibration_reserved4_is_in_range(uint64_t value);

/**
 * Pack message PGN_65290_simnetPaddleWheelSpeedConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65290_simnetPaddleWheelSpeedConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_unpack(
    struct n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65290_simnetPaddleWheelSpeedConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_init(struct n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved4_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65290_simnet_paddle_wheel_speed_configuration_reserved4_is_in_range(uint64_t value);

/**
 * Pack message PGN_65292_simnetClearFluidLevelWarnings.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65292_simnet_clear_fluid_level_warnings_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65292_simnet_clear_fluid_level_warnings_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65292_simnetClearFluidLevelWarnings.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65292_simnet_clear_fluid_level_warnings_unpack(
    struct n2k_pgn_65292_simnet_clear_fluid_level_warnings_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65292_simnetClearFluidLevelWarnings.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65292_simnet_clear_fluid_level_warnings_init(struct n2k_pgn_65292_simnet_clear_fluid_level_warnings_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65292_simnet_clear_fluid_level_warnings_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65292_simnet_clear_fluid_level_warnings_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65292_simnet_clear_fluid_level_warnings_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65292_simnet_clear_fluid_level_warnings_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65292_simnet_clear_fluid_level_warnings_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65292_simnet_clear_fluid_level_warnings_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved4_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65292_simnet_clear_fluid_level_warnings_reserved4_is_in_range(uint64_t value);

/**
 * Pack message PGN_65302_simnetApUnknown1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65302_simnet_ap_unknown1_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65302_simnet_ap_unknown1_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65302_simnetApUnknown1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65302_simnet_ap_unknown1_unpack(
    struct n2k_pgn_65302_simnet_ap_unknown1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65302_simnetApUnknown1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65302_simnet_ap_unknown1_init(struct n2k_pgn_65302_simnet_ap_unknown1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65302_simnet_ap_unknown1_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65302_simnet_ap_unknown1_c_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_c_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_d_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65302_simnet_ap_unknown1_reserved8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65302_simnet_ap_unknown1_reserved8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65302_simnet_ap_unknown1_reserved8_is_in_range(uint8_t value);

/**
 * Pack message PGN_65309_navicoWirelessBatteryStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65309_navico_wireless_battery_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65309_navico_wireless_battery_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65309_navicoWirelessBatteryStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65309_navico_wireless_battery_status_unpack(
    struct n2k_pgn_65309_navico_wireless_battery_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65309_navicoWirelessBatteryStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65309_navico_wireless_battery_status_init(struct n2k_pgn_65309_navico_wireless_battery_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65309_navico_wireless_battery_status_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65309_navico_wireless_battery_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65309_navico_wireless_battery_status_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65309_navico_wireless_battery_status_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65309_navico_wireless_battery_status_battery_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_battery_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_battery_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65309_navico_wireless_battery_status_battery_charge_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_battery_charge_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_battery_charge_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65309_navico_wireless_battery_status_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65309_navico_wireless_battery_status_reserved7_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65309_navico_wireless_battery_status_reserved7_is_in_range(uint32_t value);

/**
 * Pack message PGN_65312_navicoWirelessSignalStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65312_navico_wireless_signal_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65312_navico_wireless_signal_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65312_navicoWirelessSignalStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65312_navico_wireless_signal_status_unpack(
    struct n2k_pgn_65312_navico_wireless_signal_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65312_navicoWirelessSignalStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65312_navico_wireless_signal_status_init(struct n2k_pgn_65312_navico_wireless_signal_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65312_navico_wireless_signal_status_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65312_navico_wireless_signal_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65312_navico_wireless_signal_status_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65312_navico_wireless_signal_status_unknown_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_unknown_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_unknown_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65312_navico_wireless_signal_status_signal_strength_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_signal_strength_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_signal_strength_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65312_navico_wireless_signal_status_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65312_navico_wireless_signal_status_reserved6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65312_navico_wireless_signal_status_reserved6_is_in_range(uint32_t value);

/**
 * Pack message PGN_65340_simnetApUnknown2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65340_simnet_ap_unknown2_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65340_simnet_ap_unknown2_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65340_simnetApUnknown2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65340_simnet_ap_unknown2_unpack(
    struct n2k_pgn_65340_simnet_ap_unknown2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65340_simnetApUnknown2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65340_simnet_ap_unknown2_init(struct n2k_pgn_65340_simnet_ap_unknown2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65340_simnet_ap_unknown2_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_c_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_d_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_e_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65340_simnet_ap_unknown2_reserved9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65340_simnet_ap_unknown2_reserved9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65340_simnet_ap_unknown2_reserved9_is_in_range(uint8_t value);

/**
 * Pack message PGN_65341_simnetAutopilotAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65341_simnet_autopilot_angle_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65341_simnet_autopilot_angle_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65341_simnetAutopilotAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65341_simnet_autopilot_angle_unpack(
    struct n2k_pgn_65341_simnet_autopilot_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65341_simnetAutopilotAngle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65341_simnet_autopilot_angle_init(struct n2k_pgn_65341_simnet_autopilot_angle_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65341_simnet_autopilot_angle_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65341_simnet_autopilot_angle_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65341_simnet_autopilot_angle_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65341_simnet_autopilot_angle_reserved4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_reserved4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_reserved4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65341_simnet_autopilot_angle_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65341_simnet_autopilot_angle_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_reserved6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_reserved6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65341_simnet_autopilot_angle_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65341_simnet_autopilot_angle_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65341_simnet_autopilot_angle_angle_is_in_range(uint16_t value);

/**
 * Pack message PGN_65345_seatalkPilotWindDatum.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65345_seatalk_pilot_wind_datum_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65345_seatalk_pilot_wind_datum_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65345_seatalkPilotWindDatum.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65345_seatalk_pilot_wind_datum_unpack(
    struct n2k_pgn_65345_seatalk_pilot_wind_datum_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65345_seatalkPilotWindDatum.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65345_seatalk_pilot_wind_datum_init(struct n2k_pgn_65345_seatalk_pilot_wind_datum_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65345_seatalk_pilot_wind_datum_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65345_seatalk_pilot_wind_datum_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65345_seatalk_pilot_wind_datum_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65345_seatalk_pilot_wind_datum_wind_datum_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_wind_datum_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_wind_datum_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65345_seatalk_pilot_wind_datum_rolling_average_wind_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_rolling_average_wind_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_rolling_average_wind_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65345_seatalk_pilot_wind_datum_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65345_seatalk_pilot_wind_datum_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65345_seatalk_pilot_wind_datum_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_65350_simnetMagneticField.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65350_simnet_magnetic_field_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65350_simnet_magnetic_field_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65350_simnetMagneticField.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65350_simnet_magnetic_field_unpack(
    struct n2k_pgn_65350_simnet_magnetic_field_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65350_simnetMagneticField.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65350_simnet_magnetic_field_init(struct n2k_pgn_65350_simnet_magnetic_field_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_65350_simnet_magnetic_field_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65350_simnet_magnetic_field_a_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65350_simnet_magnetic_field_a_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65350_simnet_magnetic_field_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65350_simnet_magnetic_field_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65350_simnet_magnetic_field_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_65350_simnet_magnetic_field_c_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65350_simnet_magnetic_field_c_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65350_simnet_magnetic_field_c_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_65350_simnet_magnetic_field_d_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65350_simnet_magnetic_field_d_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65350_simnet_magnetic_field_d_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65350_simnet_magnetic_field_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65350_simnet_magnetic_field_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65350_simnet_magnetic_field_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_65359_seatalkPilotHeading.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65359_seatalk_pilot_heading_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65359_seatalk_pilot_heading_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65359_seatalkPilotHeading.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65359_seatalk_pilot_heading_unpack(
    struct n2k_pgn_65359_seatalk_pilot_heading_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65359_seatalkPilotHeading.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65359_seatalk_pilot_heading_init(struct n2k_pgn_65359_seatalk_pilot_heading_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65359_seatalk_pilot_heading_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65359_seatalk_pilot_heading_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65359_seatalk_pilot_heading_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65359_seatalk_pilot_heading_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65359_seatalk_pilot_heading_heading_true_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_heading_true_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_heading_true_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65359_seatalk_pilot_heading_heading_magnetic_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_heading_magnetic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_heading_magnetic_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65359_seatalk_pilot_heading_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65359_seatalk_pilot_heading_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65359_seatalk_pilot_heading_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_65360_seatalkPilotLockedHeading.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65360_seatalk_pilot_locked_heading_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65360_seatalk_pilot_locked_heading_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65360_seatalkPilotLockedHeading.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65360_seatalk_pilot_locked_heading_unpack(
    struct n2k_pgn_65360_seatalk_pilot_locked_heading_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65360_seatalkPilotLockedHeading.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65360_seatalk_pilot_locked_heading_init(struct n2k_pgn_65360_seatalk_pilot_locked_heading_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65360_seatalk_pilot_locked_heading_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65360_seatalk_pilot_locked_heading_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65360_seatalk_pilot_locked_heading_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65360_seatalk_pilot_locked_heading_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_true_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_true_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_true_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_magnetic_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_magnetic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_target_heading_magnetic_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65360_seatalk_pilot_locked_heading_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65360_seatalk_pilot_locked_heading_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65360_seatalk_pilot_locked_heading_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_65361_seatalkSilenceAlarm.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65361_seatalk_silence_alarm_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65361_seatalk_silence_alarm_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65361_seatalkSilenceAlarm.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65361_seatalk_silence_alarm_unpack(
    struct n2k_pgn_65361_seatalk_silence_alarm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65361_seatalkSilenceAlarm.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65361_seatalk_silence_alarm_init(struct n2k_pgn_65361_seatalk_silence_alarm_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65361_seatalk_silence_alarm_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65361_seatalk_silence_alarm_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65361_seatalk_silence_alarm_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65361_seatalk_silence_alarm_alarm_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_alarm_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_alarm_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65361_seatalk_silence_alarm_alarm_group_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_alarm_group_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_alarm_group_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65361_seatalk_silence_alarm_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65361_seatalk_silence_alarm_reserved6_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65361_seatalk_silence_alarm_reserved6_is_in_range(uint32_t value);

/**
 * Pack message PGN_65371_seatalkKeypadMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65371_seatalk_keypad_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65371_seatalk_keypad_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65371_seatalkKeypadMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65371_seatalk_keypad_message_unpack(
    struct n2k_pgn_65371_seatalk_keypad_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65371_seatalkKeypadMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65371_seatalk_keypad_message_init(struct n2k_pgn_65371_seatalk_keypad_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65371_seatalk_keypad_message_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_proprietary_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_proprietary_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_proprietary_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_first_key_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_first_key_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_first_key_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_second_key_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_second_key_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_second_key_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_first_key_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_first_key_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_first_key_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_second_key_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_second_key_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_second_key_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_reserved9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_reserved9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_reserved9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_encoder_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_encoder_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_encoder_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65371_seatalk_keypad_message_reserved11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65371_seatalk_keypad_message_reserved11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65371_seatalk_keypad_message_reserved11_is_in_range(uint8_t value);

/**
 * Pack message PGN_65374_seatalkKeypadHeartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65374_seatalk_keypad_heartbeat_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65374_seatalk_keypad_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65374_seatalkKeypadHeartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65374_seatalk_keypad_heartbeat_unpack(
    struct n2k_pgn_65374_seatalk_keypad_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65374_seatalkKeypadHeartbeat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65374_seatalk_keypad_heartbeat_init(struct n2k_pgn_65374_seatalk_keypad_heartbeat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65374_seatalk_keypad_heartbeat_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65374_seatalk_keypad_heartbeat_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65374_seatalk_keypad_heartbeat_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65374_seatalk_keypad_heartbeat_proprietary_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_proprietary_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_proprietary_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65374_seatalk_keypad_heartbeat_variant_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_variant_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_variant_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65374_seatalk_keypad_heartbeat_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_65374_seatalk_keypad_heartbeat_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65374_seatalk_keypad_heartbeat_reserved7_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65374_seatalk_keypad_heartbeat_reserved7_is_in_range(uint32_t value);

/**
 * Pack message PGN_65379_seatalkPilotMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65379_seatalk_pilot_mode_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65379_seatalk_pilot_mode_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65379_seatalkPilotMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65379_seatalk_pilot_mode_unpack(
    struct n2k_pgn_65379_seatalk_pilot_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65379_seatalkPilotMode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65379_seatalk_pilot_mode_init(struct n2k_pgn_65379_seatalk_pilot_mode_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65379_seatalk_pilot_mode_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65379_seatalk_pilot_mode_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65379_seatalk_pilot_mode_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65379_seatalk_pilot_mode_sub_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_sub_mode_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_sub_mode_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_data_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_pilot_mode_data_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65379_seatalk_pilot_mode_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65379_seatalk_pilot_mode_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65379_seatalk_pilot_mode_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_65408_airmarDepthQualityFactor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65408_airmar_depth_quality_factor_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65408_airmar_depth_quality_factor_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65408_airmarDepthQualityFactor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65408_airmar_depth_quality_factor_unpack(
    struct n2k_pgn_65408_airmar_depth_quality_factor_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65408_airmarDepthQualityFactor.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65408_airmar_depth_quality_factor_init(struct n2k_pgn_65408_airmar_depth_quality_factor_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65408_airmar_depth_quality_factor_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65408_airmar_depth_quality_factor_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65408_airmar_depth_quality_factor_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65408_airmar_depth_quality_factor_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65408_airmar_depth_quality_factor_depth_quality_factor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_depth_quality_factor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_depth_quality_factor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_65408_airmar_depth_quality_factor_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65408_airmar_depth_quality_factor_reserved6_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65408_airmar_depth_quality_factor_reserved6_is_in_range(uint64_t value);

/**
 * Pack message PGN_65409_airmarSpeedPulseCount.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65409_airmar_speed_pulse_count_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65409_airmar_speed_pulse_count_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65409_airmarSpeedPulseCount.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65409_airmar_speed_pulse_count_unpack(
    struct n2k_pgn_65409_airmar_speed_pulse_count_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65409_airmarSpeedPulseCount.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65409_airmar_speed_pulse_count_init(struct n2k_pgn_65409_airmar_speed_pulse_count_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65409_airmar_speed_pulse_count_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65409_airmar_speed_pulse_count_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65409_airmar_speed_pulse_count_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65409_airmar_speed_pulse_count_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65409_airmar_speed_pulse_count_duration_of_interval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_duration_of_interval_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_duration_of_interval_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65409_airmar_speed_pulse_count_number_of_pulses_received_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_number_of_pulses_received_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_number_of_pulses_received_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65409_airmar_speed_pulse_count_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65409_airmar_speed_pulse_count_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65409_airmar_speed_pulse_count_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_65410_airmarDeviceInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65410_airmar_device_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65410_airmar_device_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65410_airmarDeviceInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65410_airmar_device_information_unpack(
    struct n2k_pgn_65410_airmar_device_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65410_airmarDeviceInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65410_airmar_device_information_init(struct n2k_pgn_65410_airmar_device_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65410_airmar_device_information_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65410_airmar_device_information_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65410_airmar_device_information_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65410_airmar_device_information_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65410_airmar_device_information_internal_device_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_internal_device_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_internal_device_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65410_airmar_device_information_supply_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_supply_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_supply_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65410_airmar_device_information_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65410_airmar_device_information_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65410_airmar_device_information_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_65420_simnetApUnknown3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65420_simnet_ap_unknown3_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65420_simnet_ap_unknown3_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65420_simnetApUnknown3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65420_simnet_ap_unknown3_unpack(
    struct n2k_pgn_65420_simnet_ap_unknown3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65420_simnetApUnknown3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65420_simnet_ap_unknown3_init(struct n2k_pgn_65420_simnet_ap_unknown3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65420_simnet_ap_unknown3_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_a_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_a_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_a_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_b_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_b_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_b_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_c_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_d_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_e_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_e_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_e_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65420_simnet_ap_unknown3_reserved9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65420_simnet_ap_unknown3_reserved9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65420_simnet_ap_unknown3_reserved9_is_in_range(uint8_t value);

/**
 * Pack message PGN_65480_simnetAutopilotMode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_65480_simnet_autopilot_mode_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_65480_simnet_autopilot_mode_t *src_p,
    size_t size);

/**
 * Unpack message PGN_65480_simnetAutopilotMode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_65480_simnet_autopilot_mode_unpack(
    struct n2k_pgn_65480_simnet_autopilot_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_65480_simnetAutopilotMode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_65480_simnet_autopilot_mode_init(struct n2k_pgn_65480_simnet_autopilot_mode_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_65480_simnet_autopilot_mode_manufacturer_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65480_simnet_autopilot_mode_manufacturer_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65480_simnet_autopilot_mode_manufacturer_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65480_simnet_autopilot_mode_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65480_simnet_autopilot_mode_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65480_simnet_autopilot_mode_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_65480_simnet_autopilot_mode_industry_code_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65480_simnet_autopilot_mode_industry_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65480_simnet_autopilot_mode_industry_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_65480_simnet_autopilot_mode_reserved4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_65480_simnet_autopilot_mode_reserved4_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_65480_simnet_autopilot_mode_reserved4_is_in_range(uint64_t value);

/**
 * Pack message PGN_126464_pgnListTransmitAndReceive.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126464_pgn_list_transmit_and_receive_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126464_pgn_list_transmit_and_receive_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126464_pgnListTransmitAndReceive.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126464_pgn_list_transmit_and_receive_unpack(
    struct n2k_pgn_126464_pgn_list_transmit_and_receive_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126464_pgnListTransmitAndReceive.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126464_pgn_list_transmit_and_receive_init(struct n2k_pgn_126464_pgn_list_transmit_and_receive_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126464_pgn_list_transmit_and_receive_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126983_alert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126983_alert_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126983_alert_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126983_alert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126983_alert_unpack(
    struct n2k_pgn_126983_alert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126983_alert.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126983_alert_init(struct n2k_pgn_126983_alert_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126983_alert_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126983_alert_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126983_alert_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126983_alert_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126983_alert_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126983_alert_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126984_alertResponse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126984_alert_response_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126984_alert_response_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126984_alertResponse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126984_alert_response_unpack(
    struct n2k_pgn_126984_alert_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126984_alertResponse.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126984_alert_response_init(struct n2k_pgn_126984_alert_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126984_alert_response_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126984_alert_response_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126984_alert_response_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126984_alert_response_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126984_alert_response_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126984_alert_response_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126985_alertText.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126985_alert_text_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126985_alert_text_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126985_alertText.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126985_alert_text_unpack(
    struct n2k_pgn_126985_alert_text_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126985_alertText.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126985_alert_text_init(struct n2k_pgn_126985_alert_text_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126985_alert_text_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126985_alert_text_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126985_alert_text_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126985_alert_text_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126985_alert_text_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126985_alert_text_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126986_alertConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126986_alert_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126986_alert_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126986_alertConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126986_alert_configuration_unpack(
    struct n2k_pgn_126986_alert_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126986_alertConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126986_alert_configuration_init(struct n2k_pgn_126986_alert_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126986_alert_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126986_alert_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126986_alert_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126986_alert_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126986_alert_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126986_alert_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126987_alertThreshold.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126987_alert_threshold_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126987_alert_threshold_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126987_alertThreshold.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126987_alert_threshold_unpack(
    struct n2k_pgn_126987_alert_threshold_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126987_alertThreshold.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126987_alert_threshold_init(struct n2k_pgn_126987_alert_threshold_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126987_alert_threshold_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126987_alert_threshold_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126987_alert_threshold_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126987_alert_threshold_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126987_alert_threshold_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126987_alert_threshold_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126988_alertValue.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126988_alert_value_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126988_alert_value_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126988_alertValue.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126988_alert_value_unpack(
    struct n2k_pgn_126988_alert_value_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126988_alertValue.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126988_alert_value_init(struct n2k_pgn_126988_alert_value_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126988_alert_value_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126988_alert_value_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126988_alert_value_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126988_alert_value_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126988_alert_value_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126988_alert_value_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126992_systemTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126992_system_time_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126992_system_time_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126992_systemTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126992_system_time_unpack(
    struct n2k_pgn_126992_system_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126992_systemTime.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126992_system_time_init(struct n2k_pgn_126992_system_time_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126992_system_time_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126992_system_time_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126992_system_time_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126992_system_time_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126992_system_time_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126992_system_time_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126992_system_time_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126992_system_time_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126992_system_time_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_126992_system_time_date_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126992_system_time_date_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126992_system_time_date_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_126992_system_time_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126992_system_time_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126992_system_time_time_is_in_range(uint32_t value);

/**
 * Pack message PGN_126993_heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126993_heartbeat_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126993_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126993_heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126993_heartbeat_unpack(
    struct n2k_pgn_126993_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126993_heartbeat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126993_heartbeat_init(struct n2k_pgn_126993_heartbeat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_126993_heartbeat_data_transmit_offset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_data_transmit_offset_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_data_transmit_offset_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126993_heartbeat_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126993_heartbeat_controller1_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_controller1_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_controller1_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126993_heartbeat_controller2_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_controller2_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_controller2_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126993_heartbeat_equipment_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_equipment_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_equipment_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126993_heartbeat_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126993_heartbeat_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126993_heartbeat_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_126996_productInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126996_product_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126996_product_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126996_productInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126996_product_information_unpack(
    struct n2k_pgn_126996_product_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126996_productInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126996_product_information_init(struct n2k_pgn_126996_product_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126996_product_information_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126996_product_information_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126996_product_information_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126996_product_information_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126996_product_information_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126996_product_information_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_126998_configurationInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_126998_configuration_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_126998_configuration_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_126998_configurationInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_126998_configuration_information_unpack(
    struct n2k_pgn_126998_configuration_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_126998_configurationInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_126998_configuration_information_init(struct n2k_pgn_126998_configuration_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_126998_configuration_information_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126998_configuration_information_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126998_configuration_information_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_126998_configuration_information_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_126998_configuration_information_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_126998_configuration_information_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127233_manOverboardNotification.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127233_man_overboard_notification_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127233_man_overboard_notification_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127233_manOverboardNotification.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127233_man_overboard_notification_unpack(
    struct n2k_pgn_127233_man_overboard_notification_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127233_manOverboardNotification.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127233_man_overboard_notification_init(struct n2k_pgn_127233_man_overboard_notification_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127233_man_overboard_notification_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127233_man_overboard_notification_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127233_man_overboard_notification_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127233_man_overboard_notification_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127233_man_overboard_notification_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127233_man_overboard_notification_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127237_headingTrackControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127237_heading_track_control_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127237_heading_track_control_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127237_headingTrackControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127237_heading_track_control_unpack(
    struct n2k_pgn_127237_heading_track_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127237_headingTrackControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127237_heading_track_control_init(struct n2k_pgn_127237_heading_track_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127237_heading_track_control_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127237_heading_track_control_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127237_heading_track_control_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127237_heading_track_control_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127237_heading_track_control_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127237_heading_track_control_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127245_rudder.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127245_rudder_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127245_rudder_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127245_rudder.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127245_rudder_unpack(
    struct n2k_pgn_127245_rudder_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127245_rudder.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127245_rudder_init(struct n2k_pgn_127245_rudder_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127245_rudder_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127245_rudder_direction_order_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_direction_order_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_direction_order_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127245_rudder_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127245_rudder_angle_order_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_angle_order_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_angle_order_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127245_rudder_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127245_rudder_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127245_rudder_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127245_rudder_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_127250_vesselHeading.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127250_vessel_heading_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127250_vessel_heading_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127250_vesselHeading.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127250_vessel_heading_unpack(
    struct n2k_pgn_127250_vessel_heading_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127250_vesselHeading.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127250_vessel_heading_init(struct n2k_pgn_127250_vessel_heading_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127250_vessel_heading_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127250_vessel_heading_heading_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_heading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_heading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127250_vessel_heading_deviation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_deviation_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_deviation_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127250_vessel_heading_variation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_variation_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_variation_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127250_vessel_heading_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_reference_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_reference_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127250_vessel_heading_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127250_vessel_heading_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127250_vessel_heading_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_127251_rateOfTurn.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127251_rate_of_turn_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127251_rate_of_turn_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127251_rateOfTurn.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127251_rate_of_turn_unpack(
    struct n2k_pgn_127251_rate_of_turn_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127251_rateOfTurn.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127251_rate_of_turn_init(struct n2k_pgn_127251_rate_of_turn_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127251_rate_of_turn_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127251_rate_of_turn_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127251_rate_of_turn_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_127251_rate_of_turn_rate_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127251_rate_of_turn_rate_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127251_rate_of_turn_rate_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_127251_rate_of_turn_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127251_rate_of_turn_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127251_rate_of_turn_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_127252_heave.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127252_heave_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127252_heave_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127252_heave.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127252_heave_unpack(
    struct n2k_pgn_127252_heave_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127252_heave.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127252_heave_init(struct n2k_pgn_127252_heave_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127252_heave_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127252_heave_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127252_heave_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127252_heave_heave_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127252_heave_heave_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127252_heave_heave_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127252_heave_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127252_heave_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127252_heave_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_127257_attitude.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127257_attitude_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127257_attitude_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127257_attitude.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127257_attitude_unpack(
    struct n2k_pgn_127257_attitude_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127257_attitude.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127257_attitude_init(struct n2k_pgn_127257_attitude_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127257_attitude_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127257_attitude_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127257_attitude_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127257_attitude_yaw_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127257_attitude_yaw_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127257_attitude_yaw_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127257_attitude_pitch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127257_attitude_pitch_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127257_attitude_pitch_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127257_attitude_roll_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127257_attitude_roll_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127257_attitude_roll_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127257_attitude_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127257_attitude_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127257_attitude_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_127258_magneticVariation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127258_magnetic_variation_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127258_magnetic_variation_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127258_magneticVariation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127258_magnetic_variation_unpack(
    struct n2k_pgn_127258_magnetic_variation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127258_magneticVariation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127258_magnetic_variation_init(struct n2k_pgn_127258_magnetic_variation_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127258_magnetic_variation_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127258_magnetic_variation_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127258_magnetic_variation_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127258_magnetic_variation_age_of_service_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_age_of_service_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_age_of_service_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127258_magnetic_variation_variation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_variation_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_variation_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127258_magnetic_variation_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127258_magnetic_variation_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127258_magnetic_variation_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_127488_engineParametersRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127488_engine_parameters_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127488_engine_parameters_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127488_engineParametersRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127488_engine_parameters_rapid_update_unpack(
    struct n2k_pgn_127488_engine_parameters_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127488_engineParametersRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127488_engine_parameters_rapid_update_init(struct n2k_pgn_127488_engine_parameters_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127488_engine_parameters_rapid_update_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127488_engine_parameters_rapid_update_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127488_engine_parameters_rapid_update_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127488_engine_parameters_rapid_update_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127488_engine_parameters_rapid_update_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127488_engine_parameters_rapid_update_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127488_engine_parameters_rapid_update_boost_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127488_engine_parameters_rapid_update_boost_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127488_engine_parameters_rapid_update_boost_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t n2k_pgn_127488_engine_parameters_rapid_update_tilt_trim_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127488_engine_parameters_rapid_update_tilt_trim_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127488_engine_parameters_rapid_update_tilt_trim_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127488_engine_parameters_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127488_engine_parameters_rapid_update_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127488_engine_parameters_rapid_update_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_127489_engineParametersDynamic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127489_engine_parameters_dynamic_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127489_engine_parameters_dynamic_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127489_engineParametersDynamic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127489_engine_parameters_dynamic_unpack(
    struct n2k_pgn_127489_engine_parameters_dynamic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127489_engineParametersDynamic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127489_engine_parameters_dynamic_init(struct n2k_pgn_127489_engine_parameters_dynamic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127489_engine_parameters_dynamic_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127489_engine_parameters_dynamic_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127489_engine_parameters_dynamic_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127489_engine_parameters_dynamic_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127489_engine_parameters_dynamic_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127489_engine_parameters_dynamic_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127490_electricDriveStatusDynamic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127490_electric_drive_status_dynamic_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127490_electric_drive_status_dynamic_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127490_electricDriveStatusDynamic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127490_electric_drive_status_dynamic_unpack(
    struct n2k_pgn_127490_electric_drive_status_dynamic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127490_electricDriveStatusDynamic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127490_electric_drive_status_dynamic_init(struct n2k_pgn_127490_electric_drive_status_dynamic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127490_electric_drive_status_dynamic_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127491_electricEnergyStorageStatusDynamic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127491_electric_energy_storage_status_dynamic_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127491_electric_energy_storage_status_dynamic_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127491_electricEnergyStorageStatusDynamic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127491_electric_energy_storage_status_dynamic_unpack(
    struct n2k_pgn_127491_electric_energy_storage_status_dynamic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127491_electricEnergyStorageStatusDynamic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127491_electric_energy_storage_status_dynamic_init(struct n2k_pgn_127491_electric_energy_storage_status_dynamic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127491_electric_energy_storage_status_dynamic_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127493_transmissionParametersDynamic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127493_transmission_parameters_dynamic_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127493_transmission_parameters_dynamic_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127493_transmissionParametersDynamic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127493_transmission_parameters_dynamic_unpack(
    struct n2k_pgn_127493_transmission_parameters_dynamic_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127493_transmissionParametersDynamic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127493_transmission_parameters_dynamic_init(struct n2k_pgn_127493_transmission_parameters_dynamic_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127493_transmission_parameters_dynamic_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127493_transmission_parameters_dynamic_transmission_gear_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_transmission_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_transmission_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127493_transmission_parameters_dynamic_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127493_transmission_parameters_dynamic_oil_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_oil_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_oil_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127493_transmission_parameters_dynamic_oil_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_oil_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_oil_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127493_transmission_parameters_dynamic_discrete_status1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_discrete_status1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_discrete_status1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127493_transmission_parameters_dynamic_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127493_transmission_parameters_dynamic_reserved7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127493_transmission_parameters_dynamic_reserved7_is_in_range(uint8_t value);

/**
 * Pack message PGN_127494_electricDriveInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127494_electric_drive_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127494_electric_drive_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127494_electricDriveInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127494_electric_drive_information_unpack(
    struct n2k_pgn_127494_electric_drive_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127494_electricDriveInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127494_electric_drive_information_init(struct n2k_pgn_127494_electric_drive_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127494_electric_drive_information_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127494_electric_drive_information_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127494_electric_drive_information_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127494_electric_drive_information_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127494_electric_drive_information_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127494_electric_drive_information_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127495_electricEnergyStorageInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127495_electric_energy_storage_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127495_electric_energy_storage_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127495_electricEnergyStorageInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127495_electric_energy_storage_information_unpack(
    struct n2k_pgn_127495_electric_energy_storage_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127495_electricEnergyStorageInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127495_electric_energy_storage_information_init(struct n2k_pgn_127495_electric_energy_storage_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127495_electric_energy_storage_information_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127495_electric_energy_storage_information_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127495_electric_energy_storage_information_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127495_electric_energy_storage_information_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127495_electric_energy_storage_information_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127495_electric_energy_storage_information_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127496_tripParametersVessel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127496_trip_parameters_vessel_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127496_trip_parameters_vessel_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127496_tripParametersVessel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127496_trip_parameters_vessel_unpack(
    struct n2k_pgn_127496_trip_parameters_vessel_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127496_tripParametersVessel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127496_trip_parameters_vessel_init(struct n2k_pgn_127496_trip_parameters_vessel_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127496_trip_parameters_vessel_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127496_trip_parameters_vessel_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127496_trip_parameters_vessel_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127496_trip_parameters_vessel_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127496_trip_parameters_vessel_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127496_trip_parameters_vessel_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127497_tripParametersEngine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127497_trip_parameters_engine_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127497_trip_parameters_engine_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127497_tripParametersEngine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127497_trip_parameters_engine_unpack(
    struct n2k_pgn_127497_trip_parameters_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127497_tripParametersEngine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127497_trip_parameters_engine_init(struct n2k_pgn_127497_trip_parameters_engine_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127497_trip_parameters_engine_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127497_trip_parameters_engine_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127497_trip_parameters_engine_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127497_trip_parameters_engine_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127497_trip_parameters_engine_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127497_trip_parameters_engine_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127498_engineParametersStatic.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127498_engine_parameters_static_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127498_engine_parameters_static_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127498_engineParametersStatic.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127498_engine_parameters_static_unpack(
    struct n2k_pgn_127498_engine_parameters_static_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127498_engineParametersStatic.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127498_engine_parameters_static_init(struct n2k_pgn_127498_engine_parameters_static_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127498_engine_parameters_static_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127498_engine_parameters_static_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127498_engine_parameters_static_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127498_engine_parameters_static_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127498_engine_parameters_static_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127498_engine_parameters_static_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127500_loadControllerConnectionStateControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127500_load_controller_connection_state_control_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127500_load_controller_connection_state_control_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127500_loadControllerConnectionStateControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127500_load_controller_connection_state_control_unpack(
    struct n2k_pgn_127500_load_controller_connection_state_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127500_loadControllerConnectionStateControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127500_load_controller_connection_state_control_init(struct n2k_pgn_127500_load_controller_connection_state_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_sequence_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_sequence_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_sequence_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_connection_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_connection_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_connection_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_operational_status_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_operational_status_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_operational_status_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_pwm_duty_cycle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_pwm_duty_cycle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_pwm_duty_cycle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_timeon_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_timeon_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_timeon_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127500_load_controller_connection_state_control_timeoff_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127500_load_controller_connection_state_control_timeoff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127500_load_controller_connection_state_control_timeoff_is_in_range(uint8_t value);

/**
 * Pack message PGN_127501_binarySwitchBankStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127501_binary_switch_bank_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127501_binary_switch_bank_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127501_binarySwitchBankStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127501_binary_switch_bank_status_unpack(
    struct n2k_pgn_127501_binary_switch_bank_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127501_binarySwitchBankStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127501_binary_switch_bank_status_init(struct n2k_pgn_127501_binary_switch_bank_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator17_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator18_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator19_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator20_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator21_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator22_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator23_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator24_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator25_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator26_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator27_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127501_binary_switch_bank_status_indicator28_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127501_binary_switch_bank_status_indicator28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127501_binary_switch_bank_status_indicator28_is_in_range(uint8_t value);

/**
 * Pack message PGN_127502_switchBankControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127502_switch_bank_control_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127502_switch_bank_control_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127502_switchBankControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127502_switch_bank_control_unpack(
    struct n2k_pgn_127502_switch_bank_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127502_switchBankControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127502_switch_bank_control_init(struct n2k_pgn_127502_switch_bank_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch3_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch4_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch5_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch8_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch9_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch10_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch11_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch12_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch13_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch15_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch16_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch16_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch17_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch17_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch17_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch18_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch18_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch18_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch19_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch19_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch19_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch20_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch20_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch20_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch21_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch21_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch21_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch22_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch22_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch22_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch23_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch23_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch23_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch24_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch24_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch24_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch25_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch25_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch25_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch26_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch26_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch26_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch27_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch27_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch27_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127502_switch_bank_control_switch28_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127502_switch_bank_control_switch28_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127502_switch_bank_control_switch28_is_in_range(uint8_t value);

/**
 * Pack message PGN_127503_acInputStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127503_ac_input_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127503_ac_input_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127503_acInputStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127503_ac_input_status_unpack(
    struct n2k_pgn_127503_ac_input_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127503_acInputStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127503_ac_input_status_init(struct n2k_pgn_127503_ac_input_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127503_ac_input_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127503_ac_input_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127503_ac_input_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127503_ac_input_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127503_ac_input_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127503_ac_input_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127504_acOutputStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127504_ac_output_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127504_ac_output_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127504_acOutputStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127504_ac_output_status_unpack(
    struct n2k_pgn_127504_ac_output_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127504_acOutputStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127504_ac_output_status_init(struct n2k_pgn_127504_ac_output_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127504_ac_output_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127504_ac_output_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127504_ac_output_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127504_ac_output_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127504_ac_output_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127504_ac_output_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127505_fluidLevel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127505_fluid_level_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127505_fluid_level_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127505_fluidLevel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127505_fluid_level_unpack(
    struct n2k_pgn_127505_fluid_level_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127505_fluidLevel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127505_fluid_level_init(struct n2k_pgn_127505_fluid_level_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127505_fluid_level_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127505_fluid_level_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127505_fluid_level_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127505_fluid_level_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127505_fluid_level_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127505_fluid_level_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127505_fluid_level_level_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127505_fluid_level_level_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127505_fluid_level_level_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_127505_fluid_level_capacity_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127505_fluid_level_capacity_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127505_fluid_level_capacity_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127505_fluid_level_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127505_fluid_level_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127505_fluid_level_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_127506_dcDetailedStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127506_dc_detailed_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127506_dc_detailed_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127506_dcDetailedStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127506_dc_detailed_status_unpack(
    struct n2k_pgn_127506_dc_detailed_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127506_dcDetailedStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127506_dc_detailed_status_init(struct n2k_pgn_127506_dc_detailed_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127506_dc_detailed_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127506_dc_detailed_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127506_dc_detailed_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127506_dc_detailed_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127506_dc_detailed_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127506_dc_detailed_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127507_chargerStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127507_charger_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127507_charger_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127507_chargerStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127507_charger_status_unpack(
    struct n2k_pgn_127507_charger_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127507_chargerStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127507_charger_status_init(struct n2k_pgn_127507_charger_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127507_charger_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127507_charger_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127507_charger_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127507_charger_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127507_charger_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127507_charger_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127508_batteryStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127508_battery_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127508_battery_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127508_batteryStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127508_battery_status_unpack(
    struct n2k_pgn_127508_battery_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127508_batteryStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127508_battery_status_init(struct n2k_pgn_127508_battery_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127508_battery_status_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127508_battery_status_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127508_battery_status_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127508_battery_status_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127508_battery_status_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127508_battery_status_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_127508_battery_status_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127508_battery_status_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127508_battery_status_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127508_battery_status_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127508_battery_status_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127508_battery_status_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127508_battery_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127508_battery_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127508_battery_status_sid_is_in_range(uint8_t value);

/**
 * Pack message PGN_127509_inverterStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127509_inverter_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127509_inverter_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127509_inverterStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127509_inverter_status_unpack(
    struct n2k_pgn_127509_inverter_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127509_inverterStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127509_inverter_status_init(struct n2k_pgn_127509_inverter_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127509_inverter_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127509_inverter_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127509_inverter_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127509_inverter_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127509_inverter_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127509_inverter_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127510_chargerConfigurationStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127510_charger_configuration_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127510_charger_configuration_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127510_chargerConfigurationStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127510_charger_configuration_status_unpack(
    struct n2k_pgn_127510_charger_configuration_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127510_chargerConfigurationStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127510_charger_configuration_status_init(struct n2k_pgn_127510_charger_configuration_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127510_charger_configuration_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127510_charger_configuration_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127510_charger_configuration_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127510_charger_configuration_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127510_charger_configuration_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127510_charger_configuration_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127511_inverterConfigurationStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127511_inverter_configuration_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127511_inverter_configuration_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127511_inverterConfigurationStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127511_inverter_configuration_status_unpack(
    struct n2k_pgn_127511_inverter_configuration_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127511_inverterConfigurationStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127511_inverter_configuration_status_init(struct n2k_pgn_127511_inverter_configuration_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_ac_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_ac_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_ac_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_dc_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_dc_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_dc_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_inverter_enable_disable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_inverter_enable_disable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_inverter_enable_disable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_inverter_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_inverter_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_inverter_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_load_sense_enable_disable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_load_sense_enable_disable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_load_sense_enable_disable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_load_sense_power_threshold_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_load_sense_power_threshold_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_load_sense_power_threshold_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127511_inverter_configuration_status_load_sense_interval_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127511_inverter_configuration_status_load_sense_interval_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127511_inverter_configuration_status_load_sense_interval_is_in_range(uint8_t value);

/**
 * Pack message PGN_127512_agsConfigurationStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127512_ags_configuration_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127512_ags_configuration_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127512_agsConfigurationStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127512_ags_configuration_status_unpack(
    struct n2k_pgn_127512_ags_configuration_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127512_agsConfigurationStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127512_ags_configuration_status_init(struct n2k_pgn_127512_ags_configuration_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127512_ags_configuration_status_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127512_ags_configuration_status_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127512_ags_configuration_status_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127512_ags_configuration_status_generator_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127512_ags_configuration_status_generator_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127512_ags_configuration_status_generator_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127512_ags_configuration_status_ags_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127512_ags_configuration_status_ags_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127512_ags_configuration_status_ags_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127512_ags_configuration_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127512_ags_configuration_status_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127512_ags_configuration_status_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_127513_batteryConfigurationStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127513_battery_configuration_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127513_battery_configuration_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127513_batteryConfigurationStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127513_battery_configuration_status_unpack(
    struct n2k_pgn_127513_battery_configuration_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127513_batteryConfigurationStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127513_battery_configuration_status_init(struct n2k_pgn_127513_battery_configuration_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127513_battery_configuration_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127513_battery_configuration_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127513_battery_configuration_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_127513_battery_configuration_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127513_battery_configuration_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127513_battery_configuration_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_127514_agsStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127514_ags_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127514_ags_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127514_agsStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127514_ags_status_unpack(
    struct n2k_pgn_127514_ags_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127514_agsStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127514_ags_status_init(struct n2k_pgn_127514_ags_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_generator_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_generator_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_generator_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_ags_operating_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_ags_operating_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_ags_operating_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_generator_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_generator_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_generator_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_generator_on_reason_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_generator_on_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_generator_on_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127514_ags_status_generator_off_reason_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_generator_off_reason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_generator_off_reason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127514_ags_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127514_ags_status_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127514_ags_status_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_127744_acPowerCurrentPhaseA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127744_ac_power_current_phase_a_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127744_ac_power_current_phase_a_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127744_acPowerCurrentPhaseA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127744_ac_power_current_phase_a_unpack(
    struct n2k_pgn_127744_ac_power_current_phase_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127744_acPowerCurrentPhaseA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127744_ac_power_current_phase_a_init(struct n2k_pgn_127744_ac_power_current_phase_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127744_ac_power_current_phase_a_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127744_ac_power_current_phase_a_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127744_ac_power_current_phase_a_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127744_ac_power_current_phase_a_connection_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127744_ac_power_current_phase_a_connection_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127744_ac_power_current_phase_a_connection_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127744_ac_power_current_phase_a_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127744_ac_power_current_phase_a_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127744_ac_power_current_phase_a_ac_rms_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_127744_ac_power_current_phase_a_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127744_ac_power_current_phase_a_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127744_ac_power_current_phase_a_power_is_in_range(int32_t value);

/**
 * Pack message PGN_127745_acPowerCurrentPhaseB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127745_ac_power_current_phase_b_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127745_ac_power_current_phase_b_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127745_acPowerCurrentPhaseB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127745_ac_power_current_phase_b_unpack(
    struct n2k_pgn_127745_ac_power_current_phase_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127745_acPowerCurrentPhaseB.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127745_ac_power_current_phase_b_init(struct n2k_pgn_127745_ac_power_current_phase_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127745_ac_power_current_phase_b_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127745_ac_power_current_phase_b_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127745_ac_power_current_phase_b_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127745_ac_power_current_phase_b_connection_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127745_ac_power_current_phase_b_connection_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127745_ac_power_current_phase_b_connection_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127745_ac_power_current_phase_b_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127745_ac_power_current_phase_b_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127745_ac_power_current_phase_b_ac_rms_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_127745_ac_power_current_phase_b_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127745_ac_power_current_phase_b_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127745_ac_power_current_phase_b_power_is_in_range(int32_t value);

/**
 * Pack message PGN_127746_acPowerCurrentPhaseC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127746_ac_power_current_phase_c_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127746_ac_power_current_phase_c_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127746_acPowerCurrentPhaseC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127746_ac_power_current_phase_c_unpack(
    struct n2k_pgn_127746_ac_power_current_phase_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127746_acPowerCurrentPhaseC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127746_ac_power_current_phase_c_init(struct n2k_pgn_127746_ac_power_current_phase_c_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127746_ac_power_current_phase_c_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127746_ac_power_current_phase_c_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127746_ac_power_current_phase_c_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127746_ac_power_current_phase_c_connection_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127746_ac_power_current_phase_c_connection_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127746_ac_power_current_phase_c_connection_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127746_ac_power_current_phase_c_ac_rms_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127746_ac_power_current_phase_c_ac_rms_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127746_ac_power_current_phase_c_ac_rms_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_127746_ac_power_current_phase_c_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127746_ac_power_current_phase_c_power_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127746_ac_power_current_phase_c_power_is_in_range(int32_t value);

/**
 * Pack message PGN_127750_converterStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127750_converter_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127750_converter_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127750_converterStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127750_converter_status_unpack(
    struct n2k_pgn_127750_converter_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127750_converterStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127750_converter_status_init(struct n2k_pgn_127750_converter_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_connection_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_connection_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_connection_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_operating_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_operating_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_operating_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_temperature_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_temperature_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_temperature_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_overload_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_overload_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_overload_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_low_dc_voltage_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_low_dc_voltage_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_low_dc_voltage_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127750_converter_status_ripple_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_ripple_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_ripple_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_127750_converter_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127750_converter_status_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127750_converter_status_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_127751_dcVoltageCurrent.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_127751_dc_voltage_current_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_127751_dc_voltage_current_t *src_p,
    size_t size);

/**
 * Unpack message PGN_127751_dcVoltageCurrent.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_127751_dc_voltage_current_unpack(
    struct n2k_pgn_127751_dc_voltage_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_127751_dcVoltageCurrent.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_127751_dc_voltage_current_init(struct n2k_pgn_127751_dc_voltage_current_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127751_dc_voltage_current_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127751_dc_voltage_current_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127751_dc_voltage_current_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127751_dc_voltage_current_connection_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127751_dc_voltage_current_connection_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127751_dc_voltage_current_connection_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_127751_dc_voltage_current_dc_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127751_dc_voltage_current_dc_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127751_dc_voltage_current_dc_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_127751_dc_voltage_current_dc_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127751_dc_voltage_current_dc_current_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127751_dc_voltage_current_dc_current_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_127751_dc_voltage_current_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_127751_dc_voltage_current_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_127751_dc_voltage_current_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_128000_leewayAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128000_leeway_angle_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128000_leeway_angle_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128000_leewayAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128000_leeway_angle_unpack(
    struct n2k_pgn_128000_leeway_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128000_leewayAngle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128000_leeway_angle_init(struct n2k_pgn_128000_leeway_angle_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128000_leeway_angle_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128000_leeway_angle_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128000_leeway_angle_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128000_leeway_angle_leeway_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128000_leeway_angle_leeway_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128000_leeway_angle_leeway_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_128000_leeway_angle_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128000_leeway_angle_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128000_leeway_angle_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_128001_vesselAcceleration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128001_vessel_acceleration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128001_vessel_acceleration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128001_vesselAcceleration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128001_vessel_acceleration_unpack(
    struct n2k_pgn_128001_vessel_acceleration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128001_vesselAcceleration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128001_vessel_acceleration_init(struct n2k_pgn_128001_vessel_acceleration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128001_vessel_acceleration_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128001_vessel_acceleration_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128001_vessel_acceleration_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128001_vessel_acceleration_longitudinal_acceleration_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128001_vessel_acceleration_longitudinal_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128001_vessel_acceleration_longitudinal_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128001_vessel_acceleration_transverse_acceleration_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128001_vessel_acceleration_transverse_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128001_vessel_acceleration_transverse_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128001_vessel_acceleration_vertical_acceleration_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128001_vessel_acceleration_vertical_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128001_vessel_acceleration_vertical_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128001_vessel_acceleration_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128001_vessel_acceleration_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128001_vessel_acceleration_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_128002_electricDriveStatusRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128002_electric_drive_status_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128002_electric_drive_status_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128002_electricDriveStatusRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128002_electric_drive_status_rapid_update_unpack(
    struct n2k_pgn_128002_electric_drive_status_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128002_electricDriveStatusRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128002_electric_drive_status_rapid_update_init(struct n2k_pgn_128002_electric_drive_status_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128002_electric_drive_status_rapid_update_inverter_motor_controller_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_inverter_motor_controller_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_inverter_motor_controller_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128002_electric_drive_status_rapid_update_active_motor_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_active_motor_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_active_motor_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128002_electric_drive_status_rapid_update_brake_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_brake_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_brake_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128002_electric_drive_status_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128002_electric_drive_status_rapid_update_rotational_shaft_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_rotational_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_rotational_shaft_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128002_electric_drive_status_rapid_update_motor_dc_current_is_in_range(int16_t value);

/**
 * Pack message PGN_128003_electricEnergyStorageStatusRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128003_electric_energy_storage_status_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128003_electric_energy_storage_status_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128003_electricEnergyStorageStatusRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128003_electric_energy_storage_status_rapid_update_unpack(
    struct n2k_pgn_128003_electric_energy_storage_status_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128003_electricEnergyStorageStatusRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128003_electric_energy_storage_status_rapid_update_init(struct n2k_pgn_128003_electric_energy_storage_status_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_energy_storage_identifier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_energy_storage_identifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_energy_storage_identifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_isolation_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_isolation_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_isolation_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_error_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_battery_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128003_electric_energy_storage_status_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128003_electric_energy_storage_status_rapid_update_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128003_electric_energy_storage_status_rapid_update_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_128006_thrusterControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128006_thruster_control_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128006_thruster_control_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128006_thrusterControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128006_thruster_control_status_unpack(
    struct n2k_pgn_128006_thruster_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128006_thrusterControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128006_thruster_control_status_init(struct n2k_pgn_128006_thruster_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_identifier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_identifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_identifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_direction_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_direction_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_direction_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_power_enabled_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_power_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_power_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_retract_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_retract_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_retract_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_speed_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_speed_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_speed_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_control_events_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_control_events_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_control_events_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128006_thruster_control_status_command_timeout_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_command_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_command_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128006_thruster_control_status_azimuth_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128006_thruster_control_status_azimuth_control_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128006_thruster_control_status_azimuth_control_is_in_range(uint16_t value);

/**
 * Pack message PGN_128007_thrusterInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128007_thruster_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128007_thruster_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128007_thrusterInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128007_thruster_information_unpack(
    struct n2k_pgn_128007_thruster_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128007_thrusterInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128007_thruster_information_init(struct n2k_pgn_128007_thruster_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128007_thruster_information_identifier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_identifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_identifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128007_thruster_information_motor_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_motor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_motor_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128007_thruster_information_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128007_thruster_information_power_rating_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_power_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_power_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128007_thruster_information_maximum_temperature_rating_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_maximum_temperature_rating_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_maximum_temperature_rating_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128007_thruster_information_maximum_rotational_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128007_thruster_information_maximum_rotational_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128007_thruster_information_maximum_rotational_speed_is_in_range(uint16_t value);

/**
 * Pack message PGN_128008_thrusterMotorStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128008_thruster_motor_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128008_thruster_motor_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128008_thrusterMotorStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128008_thruster_motor_status_unpack(
    struct n2k_pgn_128008_thruster_motor_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128008_thrusterMotorStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128008_thruster_motor_status_init(struct n2k_pgn_128008_thruster_motor_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128008_thruster_motor_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128008_thruster_motor_status_identifier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_identifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_identifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128008_thruster_motor_status_motor_events_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_motor_events_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_motor_events_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128008_thruster_motor_status_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128008_thruster_motor_status_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128008_thruster_motor_status_operating_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128008_thruster_motor_status_operating_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128008_thruster_motor_status_operating_time_is_in_range(uint16_t value);

/**
 * Pack message PGN_128259_speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128259_speed_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128259_speed_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128259_speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128259_speed_unpack(
    struct n2k_pgn_128259_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128259_speed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128259_speed_init(struct n2k_pgn_128259_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128259_speed_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128259_speed_speed_water_referenced_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_speed_water_referenced_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_speed_water_referenced_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128259_speed_speed_ground_referenced_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_speed_ground_referenced_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_speed_ground_referenced_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128259_speed_speed_water_referenced_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_speed_water_referenced_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_speed_water_referenced_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128259_speed_speed_direction_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_speed_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_speed_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128259_speed_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128259_speed_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128259_speed_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_128267_waterDepth.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128267_water_depth_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128267_water_depth_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128267_waterDepth.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128267_water_depth_unpack(
    struct n2k_pgn_128267_water_depth_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128267_waterDepth.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128267_water_depth_init(struct n2k_pgn_128267_water_depth_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128267_water_depth_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128267_water_depth_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128267_water_depth_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_128267_water_depth_depth_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128267_water_depth_depth_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128267_water_depth_depth_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_128267_water_depth_offset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128267_water_depth_offset_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128267_water_depth_offset_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128267_water_depth_range_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128267_water_depth_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128267_water_depth_range_is_in_range(uint8_t value);

/**
 * Pack message PGN_128275_distanceLog.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128275_distance_log_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128275_distance_log_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128275_distanceLog.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128275_distance_log_unpack(
    struct n2k_pgn_128275_distance_log_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128275_distanceLog.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128275_distance_log_init(struct n2k_pgn_128275_distance_log_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128275_distance_log_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128275_distance_log_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128275_distance_log_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_128275_distance_log_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128275_distance_log_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128275_distance_log_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_128520_trackedTargetData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128520_tracked_target_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128520_tracked_target_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128520_trackedTargetData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128520_tracked_target_data_unpack(
    struct n2k_pgn_128520_tracked_target_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128520_trackedTargetData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128520_tracked_target_data_init(struct n2k_pgn_128520_tracked_target_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128520_tracked_target_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128520_tracked_target_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128520_tracked_target_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_128520_tracked_target_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128520_tracked_target_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128520_tracked_target_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_128538_elevatorCarStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128538_elevator_car_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128538_elevator_car_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128538_elevatorCarStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128538_elevator_car_status_unpack(
    struct n2k_pgn_128538_elevator_car_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128538_elevatorCarStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128538_elevator_car_status_init(struct n2k_pgn_128538_elevator_car_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128538_elevator_car_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128538_elevator_car_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128538_elevator_car_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_128538_elevator_car_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128538_elevator_car_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128538_elevator_car_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_128768_elevatorMotorControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128768_elevator_motor_control_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128768_elevator_motor_control_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128768_elevatorMotorControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128768_elevator_motor_control_unpack(
    struct n2k_pgn_128768_elevator_motor_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128768_elevatorMotorControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128768_elevator_motor_control_init(struct n2k_pgn_128768_elevator_motor_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128768_elevator_motor_control_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128768_elevator_motor_control_elevator_car_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_elevator_car_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_elevator_car_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128768_elevator_motor_control_elevator_car_usage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_elevator_car_usage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_elevator_car_usage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128768_elevator_motor_control_motor_acceleration_deceleration_profile_selection_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_motor_acceleration_deceleration_profile_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_motor_acceleration_deceleration_profile_selection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128768_elevator_motor_control_motor_rotational_control_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_motor_rotational_control_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_motor_rotational_control_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_128768_elevator_motor_control_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128768_elevator_motor_control_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128768_elevator_motor_control_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_128769_elevatorDeckPushButton.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128769_elevator_deck_push_button_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128769_elevator_deck_push_button_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128769_elevatorDeckPushButton.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128769_elevator_deck_push_button_unpack(
    struct n2k_pgn_128769_elevator_deck_push_button_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128769_elevatorDeckPushButton.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128769_elevator_deck_push_button_init(struct n2k_pgn_128769_elevator_deck_push_button_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128769_elevator_deck_push_button_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128769_elevator_deck_push_button_elevator_call_button_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_elevator_call_button_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_elevator_call_button_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128769_elevator_deck_push_button_deck_button_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_deck_button_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_deck_button_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128769_elevator_deck_push_button_elevator_car_usage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_elevator_car_usage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_elevator_car_usage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128769_elevator_deck_push_button_elevator_car_button_selection_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_elevator_car_button_selection_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_elevator_car_button_selection_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_128769_elevator_deck_push_button_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128769_elevator_deck_push_button_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128769_elevator_deck_push_button_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_128776_windlassControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128776_windlass_control_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128776_windlass_control_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128776_windlassControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128776_windlass_control_status_unpack(
    struct n2k_pgn_128776_windlass_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128776_windlassControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128776_windlass_control_status_init(struct n2k_pgn_128776_windlass_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_windlass_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_windlass_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_windlass_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_windlass_direction_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_windlass_direction_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_windlass_direction_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_anchor_docking_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_anchor_docking_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_anchor_docking_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_speed_control_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_speed_control_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_speed_control_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_speed_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_speed_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_speed_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_power_enable_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_power_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_power_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_mechanical_lock_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_mechanical_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_mechanical_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_deck_and_anchor_wash_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_deck_and_anchor_wash_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_deck_and_anchor_wash_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_anchor_light_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_anchor_light_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_anchor_light_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_command_timeout_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_command_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_command_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128776_windlass_control_status_windlass_control_events_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_windlass_control_events_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_windlass_control_events_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128776_windlass_control_status_reserved14_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128776_windlass_control_status_reserved14_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128776_windlass_control_status_reserved14_is_in_range(uint16_t value);

/**
 * Pack message PGN_128777_anchorWindlassOperatingStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128777_anchor_windlass_operating_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128777_anchor_windlass_operating_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128777_anchorWindlassOperatingStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128777_anchor_windlass_operating_status_unpack(
    struct n2k_pgn_128777_anchor_windlass_operating_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128777_anchorWindlassOperatingStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128777_anchor_windlass_operating_status_init(struct n2k_pgn_128777_anchor_windlass_operating_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_windlass_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_windlass_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_windlass_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_windlass_direction_control_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_windlass_direction_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_windlass_direction_control_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_windlass_motion_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_windlass_motion_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_windlass_motion_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_rode_type_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_rode_type_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_rode_type_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128777_anchor_windlass_operating_status_rode_counter_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_rode_counter_value_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_rode_counter_value_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128777_anchor_windlass_operating_status_windlass_line_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_windlass_line_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_windlass_line_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_anchor_docking_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_anchor_docking_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_anchor_docking_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128777_anchor_windlass_operating_status_windlass_operating_events_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128777_anchor_windlass_operating_status_windlass_operating_events_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128777_anchor_windlass_operating_status_windlass_operating_events_is_in_range(uint8_t value);

/**
 * Pack message PGN_128778_anchorWindlassMonitoringStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128778_anchor_windlass_monitoring_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128778_anchor_windlass_monitoring_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128778_anchorWindlassMonitoringStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128778_anchor_windlass_monitoring_status_unpack(
    struct n2k_pgn_128778_anchor_windlass_monitoring_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128778_anchorWindlassMonitoringStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128778_anchor_windlass_monitoring_status_init(struct n2k_pgn_128778_anchor_windlass_monitoring_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_monitoring_events_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_monitoring_events_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_windlass_monitoring_events_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_controller_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_controller_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_controller_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_motor_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_motor_current_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_motor_current_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128778_anchor_windlass_monitoring_status_total_motor_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_total_motor_time_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_total_motor_time_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128778_anchor_windlass_monitoring_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128778_anchor_windlass_monitoring_status_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128778_anchor_windlass_monitoring_status_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_128780_linearActuatorControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_128780_linear_actuator_control_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_128780_linear_actuator_control_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_128780_linearActuatorControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_128780_linear_actuator_control_status_unpack(
    struct n2k_pgn_128780_linear_actuator_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_128780_linearActuatorControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_128780_linear_actuator_control_status_init(struct n2k_pgn_128780_linear_actuator_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128780_linear_actuator_control_status_actuator_identifier_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_actuator_identifier_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_actuator_identifier_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128780_linear_actuator_control_status_commanded_device_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_commanded_device_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_commanded_device_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128780_linear_actuator_control_status_device_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_device_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_device_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128780_linear_actuator_control_status_maximum_device_travel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_maximum_device_travel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_maximum_device_travel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_128780_linear_actuator_control_status_direction_of_travel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_direction_of_travel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_direction_of_travel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_128780_linear_actuator_control_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_128780_linear_actuator_control_status_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_128780_linear_actuator_control_status_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_129025_positionRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129025_position_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129025_position_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129025_positionRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129025_position_rapid_update_unpack(
    struct n2k_pgn_129025_position_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129025_positionRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129025_position_rapid_update_init(struct n2k_pgn_129025_position_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_129025_position_rapid_update_latitude_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129025_position_rapid_update_latitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129025_position_rapid_update_latitude_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_129025_position_rapid_update_longitude_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129025_position_rapid_update_longitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129025_position_rapid_update_longitude_is_in_range(int32_t value);

/**
 * Pack message PGN_129026_cogSogRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129026_cog_sog_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129026_cog_sog_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129026_cogSogRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129026_cog_sog_rapid_update_unpack(
    struct n2k_pgn_129026_cog_sog_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129026_cogSogRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129026_cog_sog_rapid_update_init(struct n2k_pgn_129026_cog_sog_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129026_cog_sog_rapid_update_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129026_cog_sog_rapid_update_cog_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_cog_reference_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_cog_reference_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129026_cog_sog_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129026_cog_sog_rapid_update_cog_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_cog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_cog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129026_cog_sog_rapid_update_sog_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_sog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_sog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129026_cog_sog_rapid_update_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129026_cog_sog_rapid_update_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129026_cog_sog_rapid_update_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_129027_positionDeltaRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129027_position_delta_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129027_position_delta_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129027_positionDeltaRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129027_position_delta_rapid_update_unpack(
    struct n2k_pgn_129027_position_delta_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129027_positionDeltaRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129027_position_delta_rapid_update_init(struct n2k_pgn_129027_position_delta_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129027_position_delta_rapid_update_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129027_position_delta_rapid_update_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129027_position_delta_rapid_update_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129027_position_delta_rapid_update_time_delta_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129027_position_delta_rapid_update_time_delta_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129027_position_delta_rapid_update_time_delta_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129027_position_delta_rapid_update_latitude_delta_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129027_position_delta_rapid_update_latitude_delta_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129027_position_delta_rapid_update_latitude_delta_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129027_position_delta_rapid_update_longitude_delta_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129027_position_delta_rapid_update_longitude_delta_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129027_position_delta_rapid_update_longitude_delta_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129027_position_delta_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129027_position_delta_rapid_update_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129027_position_delta_rapid_update_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_129028_altitudeDeltaRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129028_altitude_delta_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129028_altitude_delta_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129028_altitudeDeltaRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129028_altitude_delta_rapid_update_unpack(
    struct n2k_pgn_129028_altitude_delta_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129028_altitudeDeltaRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129028_altitude_delta_rapid_update_init(struct n2k_pgn_129028_altitude_delta_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129028_altitude_delta_rapid_update_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129028_altitude_delta_rapid_update_time_delta_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_time_delta_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_time_delta_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129028_altitude_delta_rapid_update_gnss_quality_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_gnss_quality_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_gnss_quality_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129028_altitude_delta_rapid_update_direction_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_direction_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129028_altitude_delta_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129028_altitude_delta_rapid_update_cog_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_cog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_cog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129028_altitude_delta_rapid_update_altitude_delta_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129028_altitude_delta_rapid_update_altitude_delta_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129028_altitude_delta_rapid_update_altitude_delta_is_in_range(int16_t value);

/**
 * Pack message PGN_129029_gnssPositionData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129029_gnss_position_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129029_gnss_position_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129029_gnssPositionData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129029_gnss_position_data_unpack(
    struct n2k_pgn_129029_gnss_position_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129029_gnssPositionData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129029_gnss_position_data_init(struct n2k_pgn_129029_gnss_position_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129029_gnss_position_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129029_gnss_position_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129029_gnss_position_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129029_gnss_position_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129029_gnss_position_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129029_gnss_position_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129033_timeDate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129033_time_date_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129033_time_date_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129033_timeDate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129033_time_date_unpack(
    struct n2k_pgn_129033_time_date_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129033_timeDate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129033_time_date_init(struct n2k_pgn_129033_time_date_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129033_time_date_date_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129033_time_date_date_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129033_time_date_date_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_129033_time_date_time_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129033_time_date_time_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129033_time_date_time_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129033_time_date_local_offset_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129033_time_date_local_offset_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129033_time_date_local_offset_is_in_range(int16_t value);

/**
 * Pack message PGN_129038_aisClassAPositionReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129038_ais_class_a_position_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129038_ais_class_a_position_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129038_aisClassAPositionReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129038_ais_class_a_position_report_unpack(
    struct n2k_pgn_129038_ais_class_a_position_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129038_aisClassAPositionReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129038_ais_class_a_position_report_init(struct n2k_pgn_129038_ais_class_a_position_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129038_ais_class_a_position_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129038_ais_class_a_position_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129038_ais_class_a_position_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129038_ais_class_a_position_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129038_ais_class_a_position_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129038_ais_class_a_position_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129039_aisClassBPositionReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129039_ais_class_b_position_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129039_ais_class_b_position_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129039_aisClassBPositionReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129039_ais_class_b_position_report_unpack(
    struct n2k_pgn_129039_ais_class_b_position_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129039_aisClassBPositionReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129039_ais_class_b_position_report_init(struct n2k_pgn_129039_ais_class_b_position_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129039_ais_class_b_position_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129039_ais_class_b_position_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129039_ais_class_b_position_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129039_ais_class_b_position_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129039_ais_class_b_position_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129039_ais_class_b_position_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129040_aisClassBExtendedPositionReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129040_ais_class_b_extended_position_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129040_ais_class_b_extended_position_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129040_aisClassBExtendedPositionReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129040_ais_class_b_extended_position_report_unpack(
    struct n2k_pgn_129040_ais_class_b_extended_position_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129040_aisClassBExtendedPositionReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129040_ais_class_b_extended_position_report_init(struct n2k_pgn_129040_ais_class_b_extended_position_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129040_ais_class_b_extended_position_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129041_aisAidsToNavigationAtonReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129041_ais_aids_to_navigation_aton_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129041_ais_aids_to_navigation_aton_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129041_aisAidsToNavigationAtonReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129041_ais_aids_to_navigation_aton_report_unpack(
    struct n2k_pgn_129041_ais_aids_to_navigation_aton_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129041_aisAidsToNavigationAtonReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129041_ais_aids_to_navigation_aton_report_init(struct n2k_pgn_129041_ais_aids_to_navigation_aton_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129041_ais_aids_to_navigation_aton_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129044_datum.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129044_datum_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129044_datum_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129044_datum.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129044_datum_unpack(
    struct n2k_pgn_129044_datum_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129044_datum.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129044_datum_init(struct n2k_pgn_129044_datum_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129044_datum_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129044_datum_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129044_datum_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129044_datum_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129044_datum_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129044_datum_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129045_userDatum.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129045_user_datum_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129045_user_datum_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129045_userDatum.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129045_user_datum_unpack(
    struct n2k_pgn_129045_user_datum_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129045_userDatum.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129045_user_datum_init(struct n2k_pgn_129045_user_datum_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129045_user_datum_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129045_user_datum_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129045_user_datum_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129045_user_datum_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129045_user_datum_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129045_user_datum_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129283_crossTrackError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129283_cross_track_error_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129283_cross_track_error_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129283_crossTrackError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129283_cross_track_error_unpack(
    struct n2k_pgn_129283_cross_track_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129283_crossTrackError.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129283_cross_track_error_init(struct n2k_pgn_129283_cross_track_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129283_cross_track_error_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129283_cross_track_error_xte_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_xte_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_xte_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129283_cross_track_error_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129283_cross_track_error_navigation_terminated_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_navigation_terminated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_navigation_terminated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_129283_cross_track_error_xte_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_xte_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_xte_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129283_cross_track_error_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129283_cross_track_error_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129283_cross_track_error_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_129284_navigationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129284_navigation_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129284_navigation_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129284_navigationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129284_navigation_data_unpack(
    struct n2k_pgn_129284_navigation_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129284_navigationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129284_navigation_data_init(struct n2k_pgn_129284_navigation_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129284_navigation_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129284_navigation_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129284_navigation_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129284_navigation_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129284_navigation_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129284_navigation_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129285_navigationRouteWpInformation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129285_navigation_route_wp_information_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129285_navigation_route_wp_information_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129285_navigationRouteWpInformation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129285_navigation_route_wp_information_unpack(
    struct n2k_pgn_129285_navigation_route_wp_information_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129285_navigationRouteWpInformation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129285_navigation_route_wp_information_init(struct n2k_pgn_129285_navigation_route_wp_information_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129285_navigation_route_wp_information_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129285_navigation_route_wp_information_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129285_navigation_route_wp_information_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129285_navigation_route_wp_information_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129285_navigation_route_wp_information_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129285_navigation_route_wp_information_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129291_setDriftRapidUpdate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129291_set_drift_rapid_update_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129291_set_drift_rapid_update_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129291_setDriftRapidUpdate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129291_set_drift_rapid_update_unpack(
    struct n2k_pgn_129291_set_drift_rapid_update_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129291_setDriftRapidUpdate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129291_set_drift_rapid_update_init(struct n2k_pgn_129291_set_drift_rapid_update_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129291_set_drift_rapid_update_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129291_set_drift_rapid_update_set_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_set_reference_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_set_reference_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129291_set_drift_rapid_update_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129291_set_drift_rapid_update_set_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_set_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_set_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129291_set_drift_rapid_update_drift_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_drift_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_drift_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129291_set_drift_rapid_update_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129291_set_drift_rapid_update_reserved6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129291_set_drift_rapid_update_reserved6_is_in_range(uint16_t value);

/**
 * Pack message PGN_129301_navigationRouteTimeToFromMark.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129301_navigation_route_time_to_from_mark_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129301_navigation_route_time_to_from_mark_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129301_navigationRouteTimeToFromMark.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129301_navigation_route_time_to_from_mark_unpack(
    struct n2k_pgn_129301_navigation_route_time_to_from_mark_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129301_navigationRouteTimeToFromMark.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129301_navigation_route_time_to_from_mark_init(struct n2k_pgn_129301_navigation_route_time_to_from_mark_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129301_navigation_route_time_to_from_mark_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129302_bearingAndDistanceBetweenTwoMarks.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129302_bearing_and_distance_between_two_marks_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129302_bearing_and_distance_between_two_marks_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129302_bearingAndDistanceBetweenTwoMarks.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129302_bearing_and_distance_between_two_marks_unpack(
    struct n2k_pgn_129302_bearing_and_distance_between_two_marks_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129302_bearingAndDistanceBetweenTwoMarks.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129302_bearing_and_distance_between_two_marks_init(struct n2k_pgn_129302_bearing_and_distance_between_two_marks_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129302_bearing_and_distance_between_two_marks_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129538_gnssControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129538_gnss_control_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129538_gnss_control_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129538_gnssControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129538_gnss_control_status_unpack(
    struct n2k_pgn_129538_gnss_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129538_gnssControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129538_gnss_control_status_init(struct n2k_pgn_129538_gnss_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129538_gnss_control_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129538_gnss_control_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129538_gnss_control_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129538_gnss_control_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129538_gnss_control_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129538_gnss_control_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129539_gnssDops.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129539_gnss_dops_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129539_gnss_dops_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129539_gnssDops.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129539_gnss_dops_unpack(
    struct n2k_pgn_129539_gnss_dops_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129539_gnssDops.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129539_gnss_dops_init(struct n2k_pgn_129539_gnss_dops_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129539_gnss_dops_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129539_gnss_dops_desired_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_desired_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_desired_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129539_gnss_dops_actual_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_actual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_actual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129539_gnss_dops_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129539_gnss_dops_hdop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_hdop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_hdop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129539_gnss_dops_vdop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_vdop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_vdop_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129539_gnss_dops_tdop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129539_gnss_dops_tdop_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129539_gnss_dops_tdop_is_in_range(int16_t value);

/**
 * Pack message PGN_129540_gnssSatsInView.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129540_gnss_sats_in_view_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129540_gnss_sats_in_view_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129540_gnssSatsInView.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129540_gnss_sats_in_view_unpack(
    struct n2k_pgn_129540_gnss_sats_in_view_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129540_gnssSatsInView.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129540_gnss_sats_in_view_init(struct n2k_pgn_129540_gnss_sats_in_view_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129540_gnss_sats_in_view_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129540_gnss_sats_in_view_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129540_gnss_sats_in_view_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129540_gnss_sats_in_view_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129540_gnss_sats_in_view_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129540_gnss_sats_in_view_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129541_gpsAlmanacData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129541_gps_almanac_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129541_gps_almanac_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129541_gpsAlmanacData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129541_gps_almanac_data_unpack(
    struct n2k_pgn_129541_gps_almanac_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129541_gpsAlmanacData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129541_gps_almanac_data_init(struct n2k_pgn_129541_gps_almanac_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129541_gps_almanac_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129541_gps_almanac_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129541_gps_almanac_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129541_gps_almanac_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129541_gps_almanac_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129541_gps_almanac_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129542_gnssPseudorangeNoiseStatistics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129542_gnss_pseudorange_noise_statistics_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129542_gnss_pseudorange_noise_statistics_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129542_gnssPseudorangeNoiseStatistics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129542_gnss_pseudorange_noise_statistics_unpack(
    struct n2k_pgn_129542_gnss_pseudorange_noise_statistics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129542_gnssPseudorangeNoiseStatistics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129542_gnss_pseudorange_noise_statistics_init(struct n2k_pgn_129542_gnss_pseudorange_noise_statistics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129542_gnss_pseudorange_noise_statistics_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129545_gnssRaimOutput.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129545_gnss_raim_output_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129545_gnss_raim_output_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129545_gnssRaimOutput.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129545_gnss_raim_output_unpack(
    struct n2k_pgn_129545_gnss_raim_output_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129545_gnssRaimOutput.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129545_gnss_raim_output_init(struct n2k_pgn_129545_gnss_raim_output_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129545_gnss_raim_output_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129545_gnss_raim_output_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129545_gnss_raim_output_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129545_gnss_raim_output_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129545_gnss_raim_output_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129545_gnss_raim_output_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129546_gnssRaimSettings.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129546_gnss_raim_settings_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129546_gnss_raim_settings_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129546_gnssRaimSettings.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129546_gnss_raim_settings_unpack(
    struct n2k_pgn_129546_gnss_raim_settings_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129546_gnssRaimSettings.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129546_gnss_raim_settings_init(struct n2k_pgn_129546_gnss_raim_settings_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_129546_gnss_raim_settings_radial_position_error_maximum_threshold_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129546_gnss_raim_settings_radial_position_error_maximum_threshold_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129546_gnss_raim_settings_radial_position_error_maximum_threshold_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t n2k_pgn_129546_gnss_raim_settings_probability_of_false_alarm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129546_gnss_raim_settings_probability_of_false_alarm_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129546_gnss_raim_settings_probability_of_false_alarm_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t n2k_pgn_129546_gnss_raim_settings_probability_of_missed_detection_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129546_gnss_raim_settings_probability_of_missed_detection_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129546_gnss_raim_settings_probability_of_missed_detection_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129546_gnss_raim_settings_pseudorange_residual_filtering_time_constant_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129546_gnss_raim_settings_pseudorange_residual_filtering_time_constant_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129546_gnss_raim_settings_pseudorange_residual_filtering_time_constant_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_129546_gnss_raim_settings_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129546_gnss_raim_settings_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129546_gnss_raim_settings_reserved_is_in_range(uint16_t value);

/**
 * Pack message PGN_129547_gnssPseudorangeErrorStatistics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129547_gnss_pseudorange_error_statistics_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129547_gnss_pseudorange_error_statistics_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129547_gnssPseudorangeErrorStatistics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129547_gnss_pseudorange_error_statistics_unpack(
    struct n2k_pgn_129547_gnss_pseudorange_error_statistics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129547_gnssPseudorangeErrorStatistics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129547_gnss_pseudorange_error_statistics_init(struct n2k_pgn_129547_gnss_pseudorange_error_statistics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129547_gnss_pseudorange_error_statistics_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129549_dgnssCorrections.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129549_dgnss_corrections_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129549_dgnss_corrections_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129549_dgnssCorrections.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129549_dgnss_corrections_unpack(
    struct n2k_pgn_129549_dgnss_corrections_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129549_dgnssCorrections.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129549_dgnss_corrections_init(struct n2k_pgn_129549_dgnss_corrections_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129549_dgnss_corrections_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129549_dgnss_corrections_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129549_dgnss_corrections_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129549_dgnss_corrections_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129549_dgnss_corrections_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129549_dgnss_corrections_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129550_gnssDifferentialCorrectionReceiverInterface.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129550_gnss_differential_correction_receiver_interface_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129550_gnss_differential_correction_receiver_interface_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129550_gnssDifferentialCorrectionReceiverInterface.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129550_gnss_differential_correction_receiver_interface_unpack(
    struct n2k_pgn_129550_gnss_differential_correction_receiver_interface_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129550_gnssDifferentialCorrectionReceiverInterface.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129550_gnss_differential_correction_receiver_interface_init(struct n2k_pgn_129550_gnss_differential_correction_receiver_interface_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_channel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_frequency_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_frequency_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_frequency_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_bit_rate_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_bit_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_bit_rate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_detection_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_detection_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_serial_interface_detection_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_operation_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_operation_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_differential_operation_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129550_gnss_differential_correction_receiver_interface_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129550_gnss_differential_correction_receiver_interface_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129550_gnss_differential_correction_receiver_interface_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_129551_gnssDifferentialCorrectionReceiverSignal.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129551_gnss_differential_correction_receiver_signal_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129551_gnss_differential_correction_receiver_signal_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129551_gnssDifferentialCorrectionReceiverSignal.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129551_gnss_differential_correction_receiver_signal_unpack(
    struct n2k_pgn_129551_gnss_differential_correction_receiver_signal_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129551_gnssDifferentialCorrectionReceiverSignal.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129551_gnss_differential_correction_receiver_signal_init(struct n2k_pgn_129551_gnss_differential_correction_receiver_signal_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129551_gnss_differential_correction_receiver_signal_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129556_glonassAlmanacData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129556_glonass_almanac_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129556_glonass_almanac_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129556_glonassAlmanacData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129556_glonass_almanac_data_unpack(
    struct n2k_pgn_129556_glonass_almanac_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129556_glonassAlmanacData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129556_glonass_almanac_data_init(struct n2k_pgn_129556_glonass_almanac_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129556_glonass_almanac_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129556_glonass_almanac_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129556_glonass_almanac_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129556_glonass_almanac_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129556_glonass_almanac_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129556_glonass_almanac_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129792_aisDgnssBroadcastBinaryMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129792_ais_dgnss_broadcast_binary_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129792_ais_dgnss_broadcast_binary_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129792_aisDgnssBroadcastBinaryMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129792_ais_dgnss_broadcast_binary_message_unpack(
    struct n2k_pgn_129792_ais_dgnss_broadcast_binary_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129792_aisDgnssBroadcastBinaryMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129792_ais_dgnss_broadcast_binary_message_init(struct n2k_pgn_129792_ais_dgnss_broadcast_binary_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129792_ais_dgnss_broadcast_binary_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129793_aisUtcAndDateReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129793_ais_utc_and_date_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129793_ais_utc_and_date_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129793_aisUtcAndDateReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129793_ais_utc_and_date_report_unpack(
    struct n2k_pgn_129793_ais_utc_and_date_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129793_aisUtcAndDateReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129793_ais_utc_and_date_report_init(struct n2k_pgn_129793_ais_utc_and_date_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129793_ais_utc_and_date_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129793_ais_utc_and_date_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129793_ais_utc_and_date_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129793_ais_utc_and_date_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129793_ais_utc_and_date_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129793_ais_utc_and_date_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129794_aisClassAStaticAndVoyageRelatedData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129794_aisClassAStaticAndVoyageRelatedData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_unpack(
    struct n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129794_aisClassAStaticAndVoyageRelatedData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_init(struct n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129794_ais_class_a_static_and_voyage_related_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129795_aisAddressedBinaryMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129795_ais_addressed_binary_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129795_ais_addressed_binary_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129795_aisAddressedBinaryMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129795_ais_addressed_binary_message_unpack(
    struct n2k_pgn_129795_ais_addressed_binary_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129795_aisAddressedBinaryMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129795_ais_addressed_binary_message_init(struct n2k_pgn_129795_ais_addressed_binary_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129795_ais_addressed_binary_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129795_ais_addressed_binary_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129795_ais_addressed_binary_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129795_ais_addressed_binary_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129795_ais_addressed_binary_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129795_ais_addressed_binary_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129796_aisAcknowledge.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129796_ais_acknowledge_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129796_ais_acknowledge_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129796_aisAcknowledge.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129796_ais_acknowledge_unpack(
    struct n2k_pgn_129796_ais_acknowledge_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129796_aisAcknowledge.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129796_ais_acknowledge_init(struct n2k_pgn_129796_ais_acknowledge_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129796_ais_acknowledge_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129796_ais_acknowledge_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129796_ais_acknowledge_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129796_ais_acknowledge_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129796_ais_acknowledge_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129796_ais_acknowledge_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129797_aisBinaryBroadcastMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129797_ais_binary_broadcast_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129797_ais_binary_broadcast_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129797_aisBinaryBroadcastMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129797_ais_binary_broadcast_message_unpack(
    struct n2k_pgn_129797_ais_binary_broadcast_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129797_aisBinaryBroadcastMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129797_ais_binary_broadcast_message_init(struct n2k_pgn_129797_ais_binary_broadcast_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129797_ais_binary_broadcast_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129798_aisSarAircraftPositionReport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129798_ais_sar_aircraft_position_report_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129798_ais_sar_aircraft_position_report_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129798_aisSarAircraftPositionReport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129798_ais_sar_aircraft_position_report_unpack(
    struct n2k_pgn_129798_ais_sar_aircraft_position_report_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129798_aisSarAircraftPositionReport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129798_ais_sar_aircraft_position_report_init(struct n2k_pgn_129798_ais_sar_aircraft_position_report_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129798_ais_sar_aircraft_position_report_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129799_radioFrequencyModePower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129799_radio_frequency_mode_power_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129799_radio_frequency_mode_power_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129799_radioFrequencyModePower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129799_radio_frequency_mode_power_unpack(
    struct n2k_pgn_129799_radio_frequency_mode_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129799_radioFrequencyModePower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129799_radio_frequency_mode_power_init(struct n2k_pgn_129799_radio_frequency_mode_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129799_radio_frequency_mode_power_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129799_radio_frequency_mode_power_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129799_radio_frequency_mode_power_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129799_radio_frequency_mode_power_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129799_radio_frequency_mode_power_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129799_radio_frequency_mode_power_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129800_aisUtcDateInquiry.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129800_ais_utc_date_inquiry_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129800_ais_utc_date_inquiry_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129800_aisUtcDateInquiry.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129800_ais_utc_date_inquiry_unpack(
    struct n2k_pgn_129800_ais_utc_date_inquiry_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129800_aisUtcDateInquiry.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129800_ais_utc_date_inquiry_init(struct n2k_pgn_129800_ais_utc_date_inquiry_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129800_ais_utc_date_inquiry_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129801_aisAddressedSafetyRelatedMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129801_ais_addressed_safety_related_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129801_ais_addressed_safety_related_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129801_aisAddressedSafetyRelatedMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129801_ais_addressed_safety_related_message_unpack(
    struct n2k_pgn_129801_ais_addressed_safety_related_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129801_aisAddressedSafetyRelatedMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129801_ais_addressed_safety_related_message_init(struct n2k_pgn_129801_ais_addressed_safety_related_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129801_ais_addressed_safety_related_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129802_aisSafetyRelatedBroadcastMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129802_ais_safety_related_broadcast_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129802_ais_safety_related_broadcast_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129802_aisSafetyRelatedBroadcastMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129802_ais_safety_related_broadcast_message_unpack(
    struct n2k_pgn_129802_ais_safety_related_broadcast_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129802_aisSafetyRelatedBroadcastMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129802_ais_safety_related_broadcast_message_init(struct n2k_pgn_129802_ais_safety_related_broadcast_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129802_ais_safety_related_broadcast_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129803_aisInterrogation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129803_ais_interrogation_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129803_ais_interrogation_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129803_aisInterrogation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129803_ais_interrogation_unpack(
    struct n2k_pgn_129803_ais_interrogation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129803_aisInterrogation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129803_ais_interrogation_init(struct n2k_pgn_129803_ais_interrogation_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129803_ais_interrogation_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129803_ais_interrogation_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129803_ais_interrogation_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129803_ais_interrogation_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129803_ais_interrogation_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129803_ais_interrogation_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129804_aisAssignmentModeCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129804_ais_assignment_mode_command_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129804_ais_assignment_mode_command_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129804_aisAssignmentModeCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129804_ais_assignment_mode_command_unpack(
    struct n2k_pgn_129804_ais_assignment_mode_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129804_aisAssignmentModeCommand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129804_ais_assignment_mode_command_init(struct n2k_pgn_129804_ais_assignment_mode_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129804_ais_assignment_mode_command_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129804_ais_assignment_mode_command_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129804_ais_assignment_mode_command_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129804_ais_assignment_mode_command_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129804_ais_assignment_mode_command_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129804_ais_assignment_mode_command_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129805_aisDataLinkManagementMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129805_ais_data_link_management_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129805_ais_data_link_management_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129805_aisDataLinkManagementMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129805_ais_data_link_management_message_unpack(
    struct n2k_pgn_129805_ais_data_link_management_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129805_aisDataLinkManagementMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129805_ais_data_link_management_message_init(struct n2k_pgn_129805_ais_data_link_management_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129805_ais_data_link_management_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129805_ais_data_link_management_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129805_ais_data_link_management_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129805_ais_data_link_management_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129805_ais_data_link_management_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129805_ais_data_link_management_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129806_aisChannelManagement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129806_ais_channel_management_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129806_ais_channel_management_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129806_aisChannelManagement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129806_ais_channel_management_unpack(
    struct n2k_pgn_129806_ais_channel_management_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129806_aisChannelManagement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129806_ais_channel_management_init(struct n2k_pgn_129806_ais_channel_management_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129806_ais_channel_management_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129806_ais_channel_management_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129806_ais_channel_management_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129806_ais_channel_management_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129806_ais_channel_management_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129806_ais_channel_management_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129807_aisClassBGroupAssignment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129807_ais_class_b_group_assignment_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129807_ais_class_b_group_assignment_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129807_aisClassBGroupAssignment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129807_ais_class_b_group_assignment_unpack(
    struct n2k_pgn_129807_ais_class_b_group_assignment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129807_aisClassBGroupAssignment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129807_ais_class_b_group_assignment_init(struct n2k_pgn_129807_ais_class_b_group_assignment_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129807_ais_class_b_group_assignment_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129809_aisClassBStaticDataMsg24PartA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129809_aisClassBStaticDataMsg24PartA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_unpack(
    struct n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129809_aisClassBStaticDataMsg24PartA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_init(struct n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129809_ais_class_b_static_data_msg24_part_a_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_129810_aisClassBStaticDataMsg24PartB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_t *src_p,
    size_t size);

/**
 * Unpack message PGN_129810_aisClassBStaticDataMsg24PartB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_unpack(
    struct n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_129810_aisClassBStaticDataMsg24PartB.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_init(struct n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_129810_ais_class_b_static_data_msg24_part_b_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130052_loranCTdData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130052_loran_c_td_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130052_loran_c_td_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130052_loranCTdData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130052_loran_c_td_data_unpack(
    struct n2k_pgn_130052_loran_c_td_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130052_loranCTdData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130052_loran_c_td_data_init(struct n2k_pgn_130052_loran_c_td_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130052_loran_c_td_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130052_loran_c_td_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130052_loran_c_td_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130052_loran_c_td_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130052_loran_c_td_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130052_loran_c_td_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130053_loranCRangeData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130053_loran_c_range_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130053_loran_c_range_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130053_loranCRangeData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130053_loran_c_range_data_unpack(
    struct n2k_pgn_130053_loran_c_range_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130053_loranCRangeData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130053_loran_c_range_data_init(struct n2k_pgn_130053_loran_c_range_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130053_loran_c_range_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130053_loran_c_range_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130053_loran_c_range_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130053_loran_c_range_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130053_loran_c_range_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130053_loran_c_range_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130054_loranCSignalData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130054_loran_c_signal_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130054_loran_c_signal_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130054_loranCSignalData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130054_loran_c_signal_data_unpack(
    struct n2k_pgn_130054_loran_c_signal_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130054_loranCSignalData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130054_loran_c_signal_data_init(struct n2k_pgn_130054_loran_c_signal_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130054_loran_c_signal_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130054_loran_c_signal_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130054_loran_c_signal_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130054_loran_c_signal_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130054_loran_c_signal_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130054_loran_c_signal_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130060_label.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130060_label_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130060_label_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130060_label.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130060_label_unpack(
    struct n2k_pgn_130060_label_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130060_label.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130060_label_init(struct n2k_pgn_130060_label_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130060_label_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130060_label_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130060_label_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130060_label_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130060_label_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130060_label_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130061_channelSourceConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130061_channel_source_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130061_channel_source_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130061_channelSourceConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130061_channel_source_configuration_unpack(
    struct n2k_pgn_130061_channel_source_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130061_channelSourceConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130061_channel_source_configuration_init(struct n2k_pgn_130061_channel_source_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130061_channel_source_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130061_channel_source_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130061_channel_source_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130061_channel_source_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130061_channel_source_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130061_channel_source_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130064_routeAndWpServiceDatabaseList.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130064_route_and_wp_service_database_list_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130064_route_and_wp_service_database_list_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130064_routeAndWpServiceDatabaseList.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130064_route_and_wp_service_database_list_unpack(
    struct n2k_pgn_130064_route_and_wp_service_database_list_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130064_routeAndWpServiceDatabaseList.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130064_route_and_wp_service_database_list_init(struct n2k_pgn_130064_route_and_wp_service_database_list_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130064_route_and_wp_service_database_list_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130065_routeAndWpServiceRouteList.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130065_route_and_wp_service_route_list_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130065_route_and_wp_service_route_list_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130065_routeAndWpServiceRouteList.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130065_route_and_wp_service_route_list_unpack(
    struct n2k_pgn_130065_route_and_wp_service_route_list_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130065_routeAndWpServiceRouteList.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130065_route_and_wp_service_route_list_init(struct n2k_pgn_130065_route_and_wp_service_route_list_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130065_route_and_wp_service_route_list_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130066_routeAndWpServiceRouteWpListAttributes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130066_routeAndWpServiceRouteWpListAttributes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_unpack(
    struct n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130066_routeAndWpServiceRouteWpListAttributes.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_init(struct n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130066_route_and_wp_service_route_wp_list_attributes_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130067_routeAndWpServiceRouteWpNamePosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130067_route_and_wp_service_route_wp_name_position_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130067_route_and_wp_service_route_wp_name_position_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130067_routeAndWpServiceRouteWpNamePosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130067_route_and_wp_service_route_wp_name_position_unpack(
    struct n2k_pgn_130067_route_and_wp_service_route_wp_name_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130067_routeAndWpServiceRouteWpNamePosition.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130067_route_and_wp_service_route_wp_name_position_init(struct n2k_pgn_130067_route_and_wp_service_route_wp_name_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130067_route_and_wp_service_route_wp_name_position_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130068_routeAndWpServiceRouteWpName.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130068_route_and_wp_service_route_wp_name_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130068_route_and_wp_service_route_wp_name_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130068_routeAndWpServiceRouteWpName.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130068_route_and_wp_service_route_wp_name_unpack(
    struct n2k_pgn_130068_route_and_wp_service_route_wp_name_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130068_routeAndWpServiceRouteWpName.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130068_route_and_wp_service_route_wp_name_init(struct n2k_pgn_130068_route_and_wp_service_route_wp_name_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130068_route_and_wp_service_route_wp_name_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130069_routeAndWpServiceXteLimitNavigationMethod.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130069_routeAndWpServiceXteLimitNavigationMethod.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_unpack(
    struct n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130069_routeAndWpServiceXteLimitNavigationMethod.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_init(struct n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130069_route_and_wp_service_xte_limit_navigation_method_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130070_routeAndWpServiceWpComment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130070_route_and_wp_service_wp_comment_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130070_route_and_wp_service_wp_comment_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130070_routeAndWpServiceWpComment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130070_route_and_wp_service_wp_comment_unpack(
    struct n2k_pgn_130070_route_and_wp_service_wp_comment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130070_routeAndWpServiceWpComment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130070_route_and_wp_service_wp_comment_init(struct n2k_pgn_130070_route_and_wp_service_wp_comment_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130070_route_and_wp_service_wp_comment_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130071_routeAndWpServiceRouteComment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130071_route_and_wp_service_route_comment_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130071_route_and_wp_service_route_comment_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130071_routeAndWpServiceRouteComment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130071_route_and_wp_service_route_comment_unpack(
    struct n2k_pgn_130071_route_and_wp_service_route_comment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130071_routeAndWpServiceRouteComment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130071_route_and_wp_service_route_comment_init(struct n2k_pgn_130071_route_and_wp_service_route_comment_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130071_route_and_wp_service_route_comment_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130072_routeAndWpServiceDatabaseComment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130072_route_and_wp_service_database_comment_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130072_route_and_wp_service_database_comment_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130072_routeAndWpServiceDatabaseComment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130072_route_and_wp_service_database_comment_unpack(
    struct n2k_pgn_130072_route_and_wp_service_database_comment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130072_routeAndWpServiceDatabaseComment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130072_route_and_wp_service_database_comment_init(struct n2k_pgn_130072_route_and_wp_service_database_comment_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130072_route_and_wp_service_database_comment_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130073_routeAndWpServiceRadiusOfTurn.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130073_route_and_wp_service_radius_of_turn_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130073_route_and_wp_service_radius_of_turn_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130073_routeAndWpServiceRadiusOfTurn.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130073_route_and_wp_service_radius_of_turn_unpack(
    struct n2k_pgn_130073_route_and_wp_service_radius_of_turn_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130073_routeAndWpServiceRadiusOfTurn.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130073_route_and_wp_service_radius_of_turn_init(struct n2k_pgn_130073_route_and_wp_service_radius_of_turn_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130073_route_and_wp_service_radius_of_turn_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130074_routeAndWpServiceWpListWpNamePosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130074_routeAndWpServiceWpListWpNamePosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_unpack(
    struct n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130074_routeAndWpServiceWpListWpNamePosition.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_init(struct n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130074_route_and_wp_service_wp_list_wp_name_position_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130306_windData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130306_wind_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130306_wind_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130306_windData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130306_wind_data_unpack(
    struct n2k_pgn_130306_wind_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130306_windData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130306_wind_data_init(struct n2k_pgn_130306_wind_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130306_wind_data_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130306_wind_data_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130306_wind_data_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130306_wind_data_wind_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130306_wind_data_wind_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130306_wind_data_wind_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130306_wind_data_wind_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130306_wind_data_wind_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130306_wind_data_wind_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130306_wind_data_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130306_wind_data_reference_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130306_wind_data_reference_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_130306_wind_data_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130306_wind_data_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130306_wind_data_reserved_is_in_range(uint32_t value);

/**
 * Pack message PGN_130310_environmentalParametersObsolete.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130310_environmental_parameters_obsolete_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130310_environmental_parameters_obsolete_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130310_environmentalParametersObsolete.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130310_environmental_parameters_obsolete_unpack(
    struct n2k_pgn_130310_environmental_parameters_obsolete_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130310_environmentalParametersObsolete.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130310_environmental_parameters_obsolete_init(struct n2k_pgn_130310_environmental_parameters_obsolete_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130310_environmental_parameters_obsolete_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130310_environmental_parameters_obsolete_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130310_environmental_parameters_obsolete_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130310_environmental_parameters_obsolete_water_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130310_environmental_parameters_obsolete_water_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130310_environmental_parameters_obsolete_water_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130310_environmental_parameters_obsolete_outside_ambient_air_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130310_environmental_parameters_obsolete_outside_ambient_air_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130310_environmental_parameters_obsolete_outside_ambient_air_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130310_environmental_parameters_obsolete_atmospheric_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130310_environmental_parameters_obsolete_atmospheric_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130310_environmental_parameters_obsolete_atmospheric_pressure_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130310_environmental_parameters_obsolete_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130310_environmental_parameters_obsolete_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130310_environmental_parameters_obsolete_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_130311_environmentalParameters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130311_environmental_parameters_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130311_environmental_parameters_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130311_environmentalParameters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130311_environmental_parameters_unpack(
    struct n2k_pgn_130311_environmental_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130311_environmentalParameters.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130311_environmental_parameters_init(struct n2k_pgn_130311_environmental_parameters_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130311_environmental_parameters_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130311_environmental_parameters_temperature_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_temperature_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_temperature_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130311_environmental_parameters_humidity_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_humidity_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_humidity_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130311_environmental_parameters_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_130311_environmental_parameters_humidity_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_humidity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_humidity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130311_environmental_parameters_atmospheric_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130311_environmental_parameters_atmospheric_pressure_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130311_environmental_parameters_atmospheric_pressure_is_in_range(uint16_t value);

/**
 * Pack message PGN_130312_temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130312_temperature_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130312_temperature_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130312_temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130312_temperature_unpack(
    struct n2k_pgn_130312_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130312_temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130312_temperature_init(struct n2k_pgn_130312_temperature_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130312_temperature_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130312_temperature_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130312_temperature_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130312_temperature_actual_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_actual_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_actual_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130312_temperature_set_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_set_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_set_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130312_temperature_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130312_temperature_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130312_temperature_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_130313_humidity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130313_humidity_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130313_humidity_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130313_humidity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130313_humidity_unpack(
    struct n2k_pgn_130313_humidity_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130313_humidity.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130313_humidity_init(struct n2k_pgn_130313_humidity_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130313_humidity_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130313_humidity_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130313_humidity_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_130313_humidity_actual_humidity_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_actual_humidity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_actual_humidity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t n2k_pgn_130313_humidity_set_humidity_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_set_humidity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_set_humidity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130313_humidity_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130313_humidity_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130313_humidity_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_130314_actualPressure.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130314_actual_pressure_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130314_actual_pressure_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130314_actualPressure.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130314_actual_pressure_unpack(
    struct n2k_pgn_130314_actual_pressure_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130314_actualPressure.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130314_actual_pressure_init(struct n2k_pgn_130314_actual_pressure_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130314_actual_pressure_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130314_actual_pressure_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130314_actual_pressure_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130314_actual_pressure_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130314_actual_pressure_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130314_actual_pressure_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130314_actual_pressure_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130314_actual_pressure_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130314_actual_pressure_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t n2k_pgn_130314_actual_pressure_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130314_actual_pressure_pressure_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130314_actual_pressure_pressure_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130314_actual_pressure_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130314_actual_pressure_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130314_actual_pressure_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_130315_setPressure.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130315_set_pressure_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130315_set_pressure_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130315_setPressure.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130315_set_pressure_unpack(
    struct n2k_pgn_130315_set_pressure_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130315_setPressure.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130315_set_pressure_init(struct n2k_pgn_130315_set_pressure_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130315_set_pressure_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130315_set_pressure_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130315_set_pressure_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130315_set_pressure_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130315_set_pressure_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130315_set_pressure_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130315_set_pressure_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130315_set_pressure_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130315_set_pressure_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_130315_set_pressure_pressure_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130315_set_pressure_pressure_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130315_set_pressure_pressure_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130315_set_pressure_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130315_set_pressure_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130315_set_pressure_reserved_is_in_range(uint8_t value);

/**
 * Pack message PGN_130316_temperatureExtendedRange.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130316_temperature_extended_range_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130316_temperature_extended_range_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130316_temperatureExtendedRange.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130316_temperature_extended_range_unpack(
    struct n2k_pgn_130316_temperature_extended_range_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130316_temperatureExtendedRange.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130316_temperature_extended_range_init(struct n2k_pgn_130316_temperature_extended_range_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130316_temperature_extended_range_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130316_temperature_extended_range_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130316_temperature_extended_range_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130316_temperature_extended_range_instance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130316_temperature_extended_range_instance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130316_temperature_extended_range_instance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130316_temperature_extended_range_source_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130316_temperature_extended_range_source_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130316_temperature_extended_range_source_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_130316_temperature_extended_range_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130316_temperature_extended_range_temperature_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130316_temperature_extended_range_temperature_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t n2k_pgn_130316_temperature_extended_range_set_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130316_temperature_extended_range_set_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130316_temperature_extended_range_set_temperature_is_in_range(uint16_t value);

/**
 * Pack message PGN_130320_tideStationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130320_tide_station_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130320_tide_station_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130320_tideStationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130320_tide_station_data_unpack(
    struct n2k_pgn_130320_tide_station_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130320_tideStationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130320_tide_station_data_init(struct n2k_pgn_130320_tide_station_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130320_tide_station_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130320_tide_station_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130320_tide_station_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130320_tide_station_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130320_tide_station_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130320_tide_station_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130321_salinityStationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130321_salinity_station_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130321_salinity_station_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130321_salinityStationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130321_salinity_station_data_unpack(
    struct n2k_pgn_130321_salinity_station_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130321_salinityStationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130321_salinity_station_data_init(struct n2k_pgn_130321_salinity_station_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130321_salinity_station_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130321_salinity_station_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130321_salinity_station_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130321_salinity_station_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130321_salinity_station_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130321_salinity_station_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130322_currentStationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130322_current_station_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130322_current_station_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130322_currentStationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130322_current_station_data_unpack(
    struct n2k_pgn_130322_current_station_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130322_currentStationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130322_current_station_data_init(struct n2k_pgn_130322_current_station_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130322_current_station_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130322_current_station_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130322_current_station_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130322_current_station_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130322_current_station_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130322_current_station_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130323_meteorologicalStationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130323_meteorological_station_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130323_meteorological_station_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130323_meteorologicalStationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130323_meteorological_station_data_unpack(
    struct n2k_pgn_130323_meteorological_station_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130323_meteorologicalStationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130323_meteorological_station_data_init(struct n2k_pgn_130323_meteorological_station_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130323_meteorological_station_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130323_meteorological_station_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130323_meteorological_station_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130323_meteorological_station_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130323_meteorological_station_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130323_meteorological_station_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130324_mooredBuoyStationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130324_moored_buoy_station_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130324_moored_buoy_station_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130324_mooredBuoyStationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130324_moored_buoy_station_data_unpack(
    struct n2k_pgn_130324_moored_buoy_station_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130324_mooredBuoyStationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130324_moored_buoy_station_data_init(struct n2k_pgn_130324_moored_buoy_station_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130324_moored_buoy_station_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130324_moored_buoy_station_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130324_moored_buoy_station_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130324_moored_buoy_station_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130324_moored_buoy_station_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130324_moored_buoy_station_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130330_lightingSystemSettings.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130330_lighting_system_settings_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130330_lighting_system_settings_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130330_lightingSystemSettings.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130330_lighting_system_settings_unpack(
    struct n2k_pgn_130330_lighting_system_settings_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130330_lightingSystemSettings.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130330_lighting_system_settings_init(struct n2k_pgn_130330_lighting_system_settings_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130330_lighting_system_settings_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130330_lighting_system_settings_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130330_lighting_system_settings_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130330_lighting_system_settings_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130330_lighting_system_settings_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130330_lighting_system_settings_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130560_payloadMass.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130560_payload_mass_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130560_payload_mass_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130560_payloadMass.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130560_payload_mass_unpack(
    struct n2k_pgn_130560_payload_mass_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130560_payloadMass.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130560_payload_mass_init(struct n2k_pgn_130560_payload_mass_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130560_payload_mass_sid_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_sid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_sid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130560_payload_mass_measurement_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_measurement_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_measurement_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130560_payload_mass_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130560_payload_mass_measurement_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_measurement_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_measurement_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_130560_payload_mass_payload_mass_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_payload_mass_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_payload_mass_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130560_payload_mass_reserved6_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130560_payload_mass_reserved6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130560_payload_mass_reserved6_is_in_range(uint8_t value);

/**
 * Pack message PGN_130561_lightingZone.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130561_lighting_zone_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130561_lighting_zone_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130561_lightingZone.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130561_lighting_zone_unpack(
    struct n2k_pgn_130561_lighting_zone_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130561_lightingZone.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130561_lighting_zone_init(struct n2k_pgn_130561_lighting_zone_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130561_lighting_zone_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130561_lighting_zone_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130561_lighting_zone_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130561_lighting_zone_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130561_lighting_zone_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130561_lighting_zone_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130562_lightingScene.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130562_lighting_scene_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130562_lighting_scene_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130562_lightingScene.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130562_lighting_scene_unpack(
    struct n2k_pgn_130562_lighting_scene_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130562_lightingScene.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130562_lighting_scene_init(struct n2k_pgn_130562_lighting_scene_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130562_lighting_scene_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130562_lighting_scene_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130562_lighting_scene_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130562_lighting_scene_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130562_lighting_scene_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130562_lighting_scene_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130563_lightingDevice.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130563_lighting_device_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130563_lighting_device_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130563_lightingDevice.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130563_lighting_device_unpack(
    struct n2k_pgn_130563_lighting_device_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130563_lightingDevice.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130563_lighting_device_init(struct n2k_pgn_130563_lighting_device_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130563_lighting_device_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130563_lighting_device_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130563_lighting_device_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130563_lighting_device_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130563_lighting_device_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130563_lighting_device_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130564_lightingDeviceEnumeration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130564_lighting_device_enumeration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130564_lighting_device_enumeration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130564_lightingDeviceEnumeration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130564_lighting_device_enumeration_unpack(
    struct n2k_pgn_130564_lighting_device_enumeration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130564_lightingDeviceEnumeration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130564_lighting_device_enumeration_init(struct n2k_pgn_130564_lighting_device_enumeration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130564_lighting_device_enumeration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130564_lighting_device_enumeration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130564_lighting_device_enumeration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130564_lighting_device_enumeration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130564_lighting_device_enumeration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130564_lighting_device_enumeration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130565_lightingColorSequence.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130565_lighting_color_sequence_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130565_lighting_color_sequence_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130565_lightingColorSequence.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130565_lighting_color_sequence_unpack(
    struct n2k_pgn_130565_lighting_color_sequence_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130565_lightingColorSequence.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130565_lighting_color_sequence_init(struct n2k_pgn_130565_lighting_color_sequence_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130565_lighting_color_sequence_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130565_lighting_color_sequence_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130565_lighting_color_sequence_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130565_lighting_color_sequence_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130565_lighting_color_sequence_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130565_lighting_color_sequence_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130566_lightingProgram.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130566_lighting_program_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130566_lighting_program_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130566_lightingProgram.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130566_lighting_program_unpack(
    struct n2k_pgn_130566_lighting_program_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130566_lightingProgram.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130566_lighting_program_init(struct n2k_pgn_130566_lighting_program_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130566_lighting_program_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130566_lighting_program_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130566_lighting_program_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130566_lighting_program_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130566_lighting_program_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130566_lighting_program_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130567_watermakerInputSettingAndStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130567_watermaker_input_setting_and_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130567_watermaker_input_setting_and_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130567_watermakerInputSettingAndStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130567_watermaker_input_setting_and_status_unpack(
    struct n2k_pgn_130567_watermaker_input_setting_and_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130567_watermakerInputSettingAndStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130567_watermaker_input_setting_and_status_init(struct n2k_pgn_130567_watermaker_input_setting_and_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130567_watermaker_input_setting_and_status_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130569_currentStatusAndFile.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130569_current_status_and_file_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130569_current_status_and_file_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130569_currentStatusAndFile.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130569_current_status_and_file_unpack(
    struct n2k_pgn_130569_current_status_and_file_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130569_currentStatusAndFile.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130569_current_status_and_file_init(struct n2k_pgn_130569_current_status_and_file_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130569_current_status_and_file_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130569_current_status_and_file_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130569_current_status_and_file_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130569_current_status_and_file_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130569_current_status_and_file_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130569_current_status_and_file_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130570_libraryDataFile.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130570_library_data_file_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130570_library_data_file_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130570_libraryDataFile.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130570_library_data_file_unpack(
    struct n2k_pgn_130570_library_data_file_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130570_libraryDataFile.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130570_library_data_file_init(struct n2k_pgn_130570_library_data_file_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130570_library_data_file_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130570_library_data_file_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130570_library_data_file_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130570_library_data_file_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130570_library_data_file_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130570_library_data_file_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130571_libraryDataGroup.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130571_library_data_group_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130571_library_data_group_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130571_libraryDataGroup.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130571_library_data_group_unpack(
    struct n2k_pgn_130571_library_data_group_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130571_libraryDataGroup.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130571_library_data_group_init(struct n2k_pgn_130571_library_data_group_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130571_library_data_group_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130571_library_data_group_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130571_library_data_group_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130571_library_data_group_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130571_library_data_group_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130571_library_data_group_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130572_libraryDataSearch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130572_library_data_search_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130572_library_data_search_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130572_libraryDataSearch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130572_library_data_search_unpack(
    struct n2k_pgn_130572_library_data_search_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130572_libraryDataSearch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130572_library_data_search_init(struct n2k_pgn_130572_library_data_search_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130572_library_data_search_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130572_library_data_search_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130572_library_data_search_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130572_library_data_search_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130572_library_data_search_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130572_library_data_search_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130573_supportedSourceData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130573_supported_source_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130573_supported_source_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130573_supportedSourceData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130573_supported_source_data_unpack(
    struct n2k_pgn_130573_supported_source_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130573_supportedSourceData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130573_supported_source_data_init(struct n2k_pgn_130573_supported_source_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130573_supported_source_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130573_supported_source_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130573_supported_source_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130573_supported_source_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130573_supported_source_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130573_supported_source_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130574_supportedZoneData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130574_supported_zone_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130574_supported_zone_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130574_supportedZoneData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130574_supported_zone_data_unpack(
    struct n2k_pgn_130574_supported_zone_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130574_supportedZoneData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130574_supported_zone_data_init(struct n2k_pgn_130574_supported_zone_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130574_supported_zone_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130574_supported_zone_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130574_supported_zone_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130574_supported_zone_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130574_supported_zone_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130574_supported_zone_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130576_smallCraftStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130576_small_craft_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130576_small_craft_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130576_smallCraftStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130576_small_craft_status_unpack(
    struct n2k_pgn_130576_small_craft_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130576_smallCraftStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130576_small_craft_status_init(struct n2k_pgn_130576_small_craft_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t n2k_pgn_130576_small_craft_status_port_trim_tab_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130576_small_craft_status_port_trim_tab_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130576_small_craft_status_port_trim_tab_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t n2k_pgn_130576_small_craft_status_starboard_trim_tab_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130576_small_craft_status_starboard_trim_tab_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130576_small_craft_status_starboard_trim_tab_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130576_small_craft_status_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130576_small_craft_status_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130576_small_craft_status_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_130577_directionData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130577_direction_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130577_direction_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130577_directionData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130577_direction_data_unpack(
    struct n2k_pgn_130577_direction_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130577_directionData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130577_direction_data_init(struct n2k_pgn_130577_direction_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130577_direction_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130577_direction_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130577_direction_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130577_direction_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130577_direction_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130577_direction_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130578_vesselSpeedComponents.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130578_vessel_speed_components_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130578_vessel_speed_components_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130578_vesselSpeedComponents.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130578_vessel_speed_components_unpack(
    struct n2k_pgn_130578_vessel_speed_components_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130578_vesselSpeedComponents.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130578_vessel_speed_components_init(struct n2k_pgn_130578_vessel_speed_components_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130578_vessel_speed_components_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130578_vessel_speed_components_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130578_vessel_speed_components_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130578_vessel_speed_components_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130578_vessel_speed_components_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130578_vessel_speed_components_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130579_systemConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130579_system_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130579_system_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130579_systemConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130579_system_configuration_unpack(
    struct n2k_pgn_130579_system_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130579_systemConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130579_system_configuration_init(struct n2k_pgn_130579_system_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130579_system_configuration_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_power_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_power_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130579_system_configuration_default_settings_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_default_settings_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_default_settings_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130579_system_configuration_tuner_regions_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_tuner_regions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_tuner_regions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130579_system_configuration_max_favorites_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_max_favorites_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_max_favorites_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130579_system_configuration_video_protocols_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_video_protocols_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_video_protocols_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130579_system_configuration_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130579_system_configuration_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130579_system_configuration_reserved_is_in_range(uint64_t value);

/**
 * Pack message PGN_130580_systemConfigurationDeprecated.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130580_system_configuration_deprecated_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130580_system_configuration_deprecated_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130580_systemConfigurationDeprecated.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130580_system_configuration_deprecated_unpack(
    struct n2k_pgn_130580_system_configuration_deprecated_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130580_systemConfigurationDeprecated.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130580_system_configuration_deprecated_init(struct n2k_pgn_130580_system_configuration_deprecated_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130580_system_configuration_deprecated_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130580_system_configuration_deprecated_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130580_system_configuration_deprecated_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130580_system_configuration_deprecated_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130580_system_configuration_deprecated_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130580_system_configuration_deprecated_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130581_zoneConfigurationDeprecated.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130581_zone_configuration_deprecated_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130581_zone_configuration_deprecated_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130581_zoneConfigurationDeprecated.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130581_zone_configuration_deprecated_unpack(
    struct n2k_pgn_130581_zone_configuration_deprecated_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130581_zoneConfigurationDeprecated.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130581_zone_configuration_deprecated_init(struct n2k_pgn_130581_zone_configuration_deprecated_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130581_zone_configuration_deprecated_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130581_zone_configuration_deprecated_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130581_zone_configuration_deprecated_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130581_zone_configuration_deprecated_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130581_zone_configuration_deprecated_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130581_zone_configuration_deprecated_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130582_zoneVolume.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130582_zone_volume_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130582_zone_volume_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130582_zoneVolume.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130582_zone_volume_unpack(
    struct n2k_pgn_130582_zone_volume_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130582_zoneVolume.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130582_zone_volume_init(struct n2k_pgn_130582_zone_volume_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_zone_id_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_zone_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_zone_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_volume_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_volume_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_volume_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_volume_change_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_volume_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_volume_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_mute_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_mute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_mute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_reserved_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130582_zone_volume_channel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t n2k_pgn_130582_zone_volume_reserved7_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130582_zone_volume_reserved7_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130582_zone_volume_reserved7_is_in_range(uint32_t value);

/**
 * Pack message PGN_130583_availableAudioEqPresets.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130583_available_audio_eq_presets_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130583_available_audio_eq_presets_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130583_availableAudioEqPresets.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130583_available_audio_eq_presets_unpack(
    struct n2k_pgn_130583_available_audio_eq_presets_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130583_availableAudioEqPresets.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130583_available_audio_eq_presets_init(struct n2k_pgn_130583_available_audio_eq_presets_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130583_available_audio_eq_presets_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130583_available_audio_eq_presets_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130583_available_audio_eq_presets_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130583_available_audio_eq_presets_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130583_available_audio_eq_presets_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130583_available_audio_eq_presets_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130584_availableBluetoothAddresses.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130584_available_bluetooth_addresses_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130584_available_bluetooth_addresses_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130584_availableBluetoothAddresses.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130584_available_bluetooth_addresses_unpack(
    struct n2k_pgn_130584_available_bluetooth_addresses_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130584_availableBluetoothAddresses.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130584_available_bluetooth_addresses_init(struct n2k_pgn_130584_available_bluetooth_addresses_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130584_available_bluetooth_addresses_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130584_available_bluetooth_addresses_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130584_available_bluetooth_addresses_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130584_available_bluetooth_addresses_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130584_available_bluetooth_addresses_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130584_available_bluetooth_addresses_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130585_bluetoothSourceStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130585_bluetooth_source_status_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130585_bluetooth_source_status_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130585_bluetoothSourceStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130585_bluetooth_source_status_unpack(
    struct n2k_pgn_130585_bluetooth_source_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130585_bluetoothSourceStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130585_bluetooth_source_status_init(struct n2k_pgn_130585_bluetooth_source_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130585_bluetooth_source_status_source_number_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130585_bluetooth_source_status_source_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130585_bluetooth_source_status_source_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130585_bluetooth_source_status_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130585_bluetooth_source_status_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130585_bluetooth_source_status_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130585_bluetooth_source_status_forget_device_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130585_bluetooth_source_status_forget_device_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130585_bluetooth_source_status_forget_device_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130585_bluetooth_source_status_discovering_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130585_bluetooth_source_status_discovering_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130585_bluetooth_source_status_discovering_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130585_bluetooth_source_status_bluetooth_address_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130585_bluetooth_source_status_bluetooth_address_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130585_bluetooth_source_status_bluetooth_address_is_in_range(uint64_t value);

/**
 * Pack message PGN_130586_zoneConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130586_zone_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130586_zone_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130586_zoneConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130586_zone_configuration_unpack(
    struct n2k_pgn_130586_zone_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130586_zoneConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130586_zone_configuration_init(struct n2k_pgn_130586_zone_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130586_zone_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130586_zone_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130586_zone_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130586_zone_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130586_zone_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130586_zone_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130818_simnetReprogramData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130818_simnet_reprogram_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130818_simnet_reprogram_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130818_simnetReprogramData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130818_simnet_reprogram_data_unpack(
    struct n2k_pgn_130818_simnet_reprogram_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130818_simnetReprogramData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130818_simnet_reprogram_data_init(struct n2k_pgn_130818_simnet_reprogram_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130818_simnet_reprogram_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130818_simnet_reprogram_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130818_simnet_reprogram_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130818_simnet_reprogram_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130818_simnet_reprogram_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130818_simnet_reprogram_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130819_simnetRequestReprogram.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130819_simnet_request_reprogram_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130819_simnet_request_reprogram_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130819_simnetRequestReprogram.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130819_simnet_request_reprogram_unpack(
    struct n2k_pgn_130819_simnet_request_reprogram_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130819_simnetRequestReprogram.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130819_simnet_request_reprogram_init(struct n2k_pgn_130819_simnet_request_reprogram_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130819_simnet_request_reprogram_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130819_simnet_request_reprogram_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130819_simnet_request_reprogram_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130819_simnet_request_reprogram_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130819_simnet_request_reprogram_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130819_simnet_request_reprogram_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130822_navicoUnknown1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130822_navico_unknown1_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130822_navico_unknown1_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130822_navicoUnknown1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130822_navico_unknown1_unpack(
    struct n2k_pgn_130822_navico_unknown1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130822_navicoUnknown1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130822_navico_unknown1_init(struct n2k_pgn_130822_navico_unknown1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130822_navico_unknown1_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130822_navico_unknown1_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130822_navico_unknown1_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130822_navico_unknown1_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130822_navico_unknown1_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130822_navico_unknown1_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130823_maretronProprietaryTemperatureHighRange.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130823_maretron_proprietary_temperature_high_range_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130823_maretron_proprietary_temperature_high_range_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130823_maretronProprietaryTemperatureHighRange.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130823_maretron_proprietary_temperature_high_range_unpack(
    struct n2k_pgn_130823_maretron_proprietary_temperature_high_range_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130823_maretronProprietaryTemperatureHighRange.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130823_maretron_proprietary_temperature_high_range_init(struct n2k_pgn_130823_maretron_proprietary_temperature_high_range_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130823_maretron_proprietary_temperature_high_range_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130825_navicoUnknown2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130825_navico_unknown2_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130825_navico_unknown2_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130825_navicoUnknown2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130825_navico_unknown2_unpack(
    struct n2k_pgn_130825_navico_unknown2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130825_navicoUnknown2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130825_navico_unknown2_init(struct n2k_pgn_130825_navico_unknown2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130825_navico_unknown2_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130825_navico_unknown2_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130825_navico_unknown2_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130825_navico_unknown2_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130825_navico_unknown2_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130825_navico_unknown2_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130827_lowranceUnknown.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130827_lowrance_unknown_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130827_lowrance_unknown_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130827_lowranceUnknown.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130827_lowrance_unknown_unpack(
    struct n2k_pgn_130827_lowrance_unknown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130827_lowranceUnknown.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130827_lowrance_unknown_init(struct n2k_pgn_130827_lowrance_unknown_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130827_lowrance_unknown_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130827_lowrance_unknown_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130827_lowrance_unknown_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130827_lowrance_unknown_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130827_lowrance_unknown_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130827_lowrance_unknown_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130828_simnetSetSerialNumber.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130828_simnet_set_serial_number_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130828_simnet_set_serial_number_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130828_simnetSetSerialNumber.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130828_simnet_set_serial_number_unpack(
    struct n2k_pgn_130828_simnet_set_serial_number_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130828_simnetSetSerialNumber.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130828_simnet_set_serial_number_init(struct n2k_pgn_130828_simnet_set_serial_number_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130828_simnet_set_serial_number_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130828_simnet_set_serial_number_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130828_simnet_set_serial_number_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130828_simnet_set_serial_number_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130828_simnet_set_serial_number_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130828_simnet_set_serial_number_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130831_suzukiEngineAndStorageDeviceConfig.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130831_suzuki_engine_and_storage_device_config_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130831_suzuki_engine_and_storage_device_config_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130831_suzukiEngineAndStorageDeviceConfig.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130831_suzuki_engine_and_storage_device_config_unpack(
    struct n2k_pgn_130831_suzuki_engine_and_storage_device_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130831_suzukiEngineAndStorageDeviceConfig.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130831_suzuki_engine_and_storage_device_config_init(struct n2k_pgn_130831_suzuki_engine_and_storage_device_config_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130831_suzuki_engine_and_storage_device_config_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130832_simnetFuelUsedHighResolution.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130832_simnet_fuel_used_high_resolution_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130832_simnet_fuel_used_high_resolution_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130832_simnetFuelUsedHighResolution.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130832_simnet_fuel_used_high_resolution_unpack(
    struct n2k_pgn_130832_simnet_fuel_used_high_resolution_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130832_simnetFuelUsedHighResolution.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130832_simnet_fuel_used_high_resolution_init(struct n2k_pgn_130832_simnet_fuel_used_high_resolution_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130832_simnet_fuel_used_high_resolution_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130833_bGUserAndRemoteRename.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130833_b_g_user_and_remote_rename_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130833_b_g_user_and_remote_rename_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130833_bGUserAndRemoteRename.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130833_b_g_user_and_remote_rename_unpack(
    struct n2k_pgn_130833_b_g_user_and_remote_rename_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130833_bGUserAndRemoteRename.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130833_b_g_user_and_remote_rename_init(struct n2k_pgn_130833_b_g_user_and_remote_rename_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130833_b_g_user_and_remote_rename_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130834_simnetEngineAndTankConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130834_simnet_engine_and_tank_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130834_simnet_engine_and_tank_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130834_simnetEngineAndTankConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130834_simnet_engine_and_tank_configuration_unpack(
    struct n2k_pgn_130834_simnet_engine_and_tank_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130834_simnetEngineAndTankConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130834_simnet_engine_and_tank_configuration_init(struct n2k_pgn_130834_simnet_engine_and_tank_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130834_simnet_engine_and_tank_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130835_simnetSetEngineAndTankConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130835_simnet_set_engine_and_tank_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130835_simnet_set_engine_and_tank_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130835_simnetSetEngineAndTankConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130835_simnet_set_engine_and_tank_configuration_unpack(
    struct n2k_pgn_130835_simnet_set_engine_and_tank_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130835_simnetSetEngineAndTankConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130835_simnet_set_engine_and_tank_configuration_init(struct n2k_pgn_130835_simnet_set_engine_and_tank_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130835_simnet_set_engine_and_tank_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130838_simnetFluidLevelWarning.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130838_simnet_fluid_level_warning_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130838_simnet_fluid_level_warning_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130838_simnetFluidLevelWarning.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130838_simnet_fluid_level_warning_unpack(
    struct n2k_pgn_130838_simnet_fluid_level_warning_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130838_simnetFluidLevelWarning.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130838_simnet_fluid_level_warning_init(struct n2k_pgn_130838_simnet_fluid_level_warning_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130838_simnet_fluid_level_warning_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130839_simnetPressureSensorConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130839_simnet_pressure_sensor_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130839_simnet_pressure_sensor_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130839_simnetPressureSensorConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130839_simnet_pressure_sensor_configuration_unpack(
    struct n2k_pgn_130839_simnet_pressure_sensor_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130839_simnetPressureSensorConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130839_simnet_pressure_sensor_configuration_init(struct n2k_pgn_130839_simnet_pressure_sensor_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130839_simnet_pressure_sensor_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130840_simnetDataUserGroupConfiguration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130840_simnet_data_user_group_configuration_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130840_simnet_data_user_group_configuration_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130840_simnetDataUserGroupConfiguration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130840_simnet_data_user_group_configuration_unpack(
    struct n2k_pgn_130840_simnet_data_user_group_configuration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130840_simnetDataUserGroupConfiguration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130840_simnet_data_user_group_configuration_init(struct n2k_pgn_130840_simnet_data_user_group_configuration_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130840_simnet_data_user_group_configuration_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130847_seatalkNodeStatistics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130847_seatalk_node_statistics_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130847_seatalk_node_statistics_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130847_seatalkNodeStatistics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130847_seatalk_node_statistics_unpack(
    struct n2k_pgn_130847_seatalk_node_statistics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130847_seatalkNodeStatistics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130847_seatalk_node_statistics_init(struct n2k_pgn_130847_seatalk_node_statistics_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130847_seatalk_node_statistics_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130847_seatalk_node_statistics_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130847_seatalk_node_statistics_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130847_seatalk_node_statistics_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130847_seatalk_node_statistics_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130847_seatalk_node_statistics_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130851_simnetEventReplyApCommand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130851_simnet_event_reply_ap_command_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130851_simnet_event_reply_ap_command_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130851_simnetEventReplyApCommand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130851_simnet_event_reply_ap_command_unpack(
    struct n2k_pgn_130851_simnet_event_reply_ap_command_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130851_simnetEventReplyApCommand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130851_simnet_event_reply_ap_command_init(struct n2k_pgn_130851_simnet_event_reply_ap_command_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130851_simnet_event_reply_ap_command_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130856_simnetAlarmMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130856_simnet_alarm_message_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130856_simnet_alarm_message_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130856_simnetAlarmMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130856_simnet_alarm_message_unpack(
    struct n2k_pgn_130856_simnet_alarm_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130856_simnetAlarmMessage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130856_simnet_alarm_message_init(struct n2k_pgn_130856_simnet_alarm_message_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130856_simnet_alarm_message_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130856_simnet_alarm_message_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130856_simnet_alarm_message_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130856_simnet_alarm_message_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130856_simnet_alarm_message_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130856_simnet_alarm_message_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130860_simnetApUnknown4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130860_simnet_ap_unknown4_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130860_simnet_ap_unknown4_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130860_simnetApUnknown4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130860_simnet_ap_unknown4_unpack(
    struct n2k_pgn_130860_simnet_ap_unknown4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130860_simnetApUnknown4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130860_simnet_ap_unknown4_init(struct n2k_pgn_130860_simnet_ap_unknown4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130860_simnet_ap_unknown4_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130860_simnet_ap_unknown4_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130860_simnet_ap_unknown4_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130860_simnet_ap_unknown4_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130860_simnet_ap_unknown4_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130860_simnet_ap_unknown4_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130880_airmarAdditionalWeatherData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130880_airmar_additional_weather_data_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130880_airmar_additional_weather_data_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130880_airmarAdditionalWeatherData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130880_airmar_additional_weather_data_unpack(
    struct n2k_pgn_130880_airmar_additional_weather_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130880_airmarAdditionalWeatherData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130880_airmar_additional_weather_data_init(struct n2k_pgn_130880_airmar_additional_weather_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130880_airmar_additional_weather_data_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130880_airmar_additional_weather_data_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130880_airmar_additional_weather_data_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130880_airmar_additional_weather_data_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130880_airmar_additional_weather_data_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130880_airmar_additional_weather_data_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130881_airmarHeaterControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130881_airmar_heater_control_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130881_airmar_heater_control_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130881_airmarHeaterControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130881_airmar_heater_control_unpack(
    struct n2k_pgn_130881_airmar_heater_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130881_airmarHeaterControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130881_airmar_heater_control_init(struct n2k_pgn_130881_airmar_heater_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130881_airmar_heater_control_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130881_airmar_heater_control_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130881_airmar_heater_control_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130881_airmar_heater_control_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130881_airmar_heater_control_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130881_airmar_heater_control_fast_packet_data_is_in_range(uint64_t value);

/**
 * Pack message PGN_130944_airmarPost.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int n2k_pgn_130944_airmar_post_pack(
    uint8_t *dst_p,
    const struct n2k_pgn_130944_airmar_post_t *src_p,
    size_t size);

/**
 * Unpack message PGN_130944_airmarPost.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int n2k_pgn_130944_airmar_post_unpack(
    struct n2k_pgn_130944_airmar_post_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PGN_130944_airmarPost.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int n2k_pgn_130944_airmar_post_init(struct n2k_pgn_130944_airmar_post_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t n2k_pgn_130944_airmar_post_fast_packet_sequence_counter_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130944_airmar_post_fast_packet_sequence_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130944_airmar_post_fast_packet_sequence_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t n2k_pgn_130944_airmar_post_fast_packet_data_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float n2k_pgn_130944_airmar_post_fast_packet_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool n2k_pgn_130944_airmar_post_fast_packet_data_is_in_range(uint64_t value);


#ifdef __cplusplus
}
#endif

#endif
