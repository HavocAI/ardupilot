/**
 * @file ilmor.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Sun Mar 16 21:05:01 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef ILMOR_H
#define ILMOR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define ILMOR_UNMANNED_THROTTLE_CONTROL_FRAME_ID (0x4ff43f2u)
#define ILMOR_INVERTER_STATUS_FRAME_7_FRAME_ID (0x3b40u)
#define ILMOR_R3_STATUS_FRAME_1_FRAME_ID (0xcff31f2u)
#define ILMOR_R3_STATUS_FRAME_2_FRAME_ID (0xcff32f2u)
#define ILMOR_R3_STATUS_FRAME_3_FRAME_ID (0xcff33f2u)
#define ILMOR_PASSWORD_CHANGE_REQUEST_FRAME_ID (0x4ff41f2u)
#define ILMOR_PASSWORD_SAVE_REQUEST_FRAME_ID (0x4ff42f2u)
#define ILMOR_DS2_FRAME_ID (0x4ff52f2u)
#define ILMOR_DS3_FRAME_ID (0x4ff53f2u)
#define ILMOR_MT1_FRAME_ID (0x8ff71f2u)
#define ILMOR_MT2_FRAME_ID (0x8ff72f2u)
#define ILMOR_ICU_STATUS_FRAME_1_FRAME_ID (0x8ff01efu)
#define ILMOR_ICU_STATUS_FRAME_2_FRAME_ID (0x8ff02efu)
#define ILMOR_ICU_STATUS_FRAME_3_FRAME_ID (0x8ff03efu)
#define ILMOR_ICU_STATUS_FRAME_4_FRAME_ID (0x8ff04efu)
#define ILMOR_ICU_STATUS_FRAME_5_FRAME_ID (0x8ff05efu)
#define ILMOR_ICU_STATUS_FRAME_6_FRAME_ID (0x8ff06efu)
#define ILMOR_ICU_STATUS_FRAME_7_FRAME_ID (0x8ff07efu)
#define ILMOR_ICU_STATUS_FRAME_8_FRAME_ID (0x8ff08efu)
#define ILMOR_PASSWORD_CHANGE_ECHO_FRAME_ID (0x4ff11efu)
#define ILMOR_PASSWORD_SAVE_CONFIRMATION_FRAME_ID (0x4ff12efu)
#define ILMOR_INVERTER_STATUS_FRAME_1_FRAME_ID (0x940u)
#define ILMOR_INVERTER_STATUS_FRAME_2_FRAME_ID (0xe40u)
#define ILMOR_INVERTER_STATUS_FRAME_3_FRAME_ID (0xf40u)
#define ILMOR_INVERTER_STATUS_FRAME_4_FRAME_ID (0x1040u)
#define ILMOR_INVERTER_STATUS_FRAME_5_FRAME_ID (0x1b40u)
#define ILMOR_INVERTER_STATUS_FRAME_6_FRAME_ID (0x3a40u)

/* Frame lengths in bytes. */
#define ILMOR_UNMANNED_THROTTLE_CONTROL_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_7_LENGTH (8u)
#define ILMOR_R3_STATUS_FRAME_1_LENGTH (8u)
#define ILMOR_R3_STATUS_FRAME_2_LENGTH (8u)
#define ILMOR_R3_STATUS_FRAME_3_LENGTH (8u)
#define ILMOR_PASSWORD_CHANGE_REQUEST_LENGTH (8u)
#define ILMOR_PASSWORD_SAVE_REQUEST_LENGTH (8u)
#define ILMOR_DS2_LENGTH (8u)
#define ILMOR_DS3_LENGTH (8u)
#define ILMOR_MT1_LENGTH (8u)
#define ILMOR_MT2_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_1_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_2_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_3_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_4_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_5_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_6_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_7_LENGTH (8u)
#define ILMOR_ICU_STATUS_FRAME_8_LENGTH (8u)
#define ILMOR_PASSWORD_CHANGE_ECHO_LENGTH (8u)
#define ILMOR_PASSWORD_SAVE_CONFIRMATION_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_1_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_2_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_3_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_4_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_5_LENGTH (8u)
#define ILMOR_INVERTER_STATUS_FRAME_6_LENGTH (8u)

/* Extended or standard frame types. */
#define ILMOR_UNMANNED_THROTTLE_CONTROL_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_7_IS_EXTENDED (1)
#define ILMOR_R3_STATUS_FRAME_1_IS_EXTENDED (1)
#define ILMOR_R3_STATUS_FRAME_2_IS_EXTENDED (1)
#define ILMOR_R3_STATUS_FRAME_3_IS_EXTENDED (1)
#define ILMOR_PASSWORD_CHANGE_REQUEST_IS_EXTENDED (1)
#define ILMOR_PASSWORD_SAVE_REQUEST_IS_EXTENDED (1)
#define ILMOR_DS2_IS_EXTENDED (1)
#define ILMOR_DS3_IS_EXTENDED (1)
#define ILMOR_MT1_IS_EXTENDED (1)
#define ILMOR_MT2_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_1_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_2_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_3_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_4_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_5_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_6_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_7_IS_EXTENDED (1)
#define ILMOR_ICU_STATUS_FRAME_8_IS_EXTENDED (1)
#define ILMOR_PASSWORD_CHANGE_ECHO_IS_EXTENDED (1)
#define ILMOR_PASSWORD_SAVE_CONFIRMATION_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_1_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_2_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_3_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_4_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_5_IS_EXTENDED (1)
#define ILMOR_INVERTER_STATUS_FRAME_6_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define ILMOR_UNMANNED_THROTTLE_CONTROL_NAME "Unmanned_Throttle_Control"
#define ILMOR_INVERTER_STATUS_FRAME_7_NAME "Inverter_Status_Frame_7"
#define ILMOR_R3_STATUS_FRAME_1_NAME "R3_Status_Frame_1"
#define ILMOR_R3_STATUS_FRAME_2_NAME "R3_Status_Frame_2"
#define ILMOR_R3_STATUS_FRAME_3_NAME "R3_Status_Frame_3"
#define ILMOR_PASSWORD_CHANGE_REQUEST_NAME "Password_Change_Request"
#define ILMOR_PASSWORD_SAVE_REQUEST_NAME "Password_Save_Request"
#define ILMOR_DS2_NAME "DS2"
#define ILMOR_DS3_NAME "DS3"
#define ILMOR_MT1_NAME "MT1"
#define ILMOR_MT2_NAME "MT2"
#define ILMOR_ICU_STATUS_FRAME_1_NAME "ICU_Status_Frame_1"
#define ILMOR_ICU_STATUS_FRAME_2_NAME "ICU_Status_Frame_2"
#define ILMOR_ICU_STATUS_FRAME_3_NAME "ICU_Status_Frame_3"
#define ILMOR_ICU_STATUS_FRAME_4_NAME "ICU_Status_Frame_4"
#define ILMOR_ICU_STATUS_FRAME_5_NAME "ICU_Status_Frame_5"
#define ILMOR_ICU_STATUS_FRAME_6_NAME "ICU_Status_Frame_6"
#define ILMOR_ICU_STATUS_FRAME_7_NAME "ICU_Status_Frame_7"
#define ILMOR_ICU_STATUS_FRAME_8_NAME "ICU_Status_Frame_8"
#define ILMOR_PASSWORD_CHANGE_ECHO_NAME "Password_Change_Echo"
#define ILMOR_PASSWORD_SAVE_CONFIRMATION_NAME "Password_Save_Confirmation"
#define ILMOR_INVERTER_STATUS_FRAME_1_NAME "Inverter_Status_Frame_1"
#define ILMOR_INVERTER_STATUS_FRAME_2_NAME "Inverter_Status_Frame_2"
#define ILMOR_INVERTER_STATUS_FRAME_3_NAME "Inverter_Status_Frame_3"
#define ILMOR_INVERTER_STATUS_FRAME_4_NAME "Inverter_Status_Frame_4"
#define ILMOR_INVERTER_STATUS_FRAME_5_NAME "Inverter_Status_Frame_5"
#define ILMOR_INVERTER_STATUS_FRAME_6_NAME "Inverter_Status_Frame_6"

/* Signal Names. */
#define ILMOR_UNMANNED_THROTTLE_CONTROL_UNMANNED_CONTROL_KEY_NAME "Unmanned_Control_Key"
#define ILMOR_UNMANNED_THROTTLE_CONTROL_UNMANNED_P_RPM_DEMAND_NAME "Unmanned_pRPM_Demand"
#define ILMOR_INVERTER_STATUS_FRAME_7_HIGH_PRECISION_BATTERY_VOLTAGE_NAME "High_Precision_Battery_Voltage"
#define ILMOR_R3_STATUS_FRAME_1_SYSTEM_STATE_NAME "System_State"
#define ILMOR_R3_STATUS_FRAME_1_THROTTLE_LOCKOUT_NAME "Throttle_Lockout"
#define ILMOR_R3_STATUS_FRAME_1_SAFE_START_NAME "Safe_Start"
#define ILMOR_R3_STATUS_FRAME_1_BATTERY_CHEMISTRY_TYPE_NAME "Battery_Chemistry_Type"
#define ILMOR_R3_STATUS_FRAME_1_BATTERY_VOLTAGE_TYPE_NAME "Battery_Voltage_Type"
#define ILMOR_R3_STATUS_FRAME_1_BATTERY_CAPACITY_NAME "Battery_Capacity"
#define ILMOR_R3_STATUS_FRAME_1_SERVER_MODE_NAME "Server_Mode"
#define ILMOR_R3_STATUS_FRAME_2_LED_HUE_NAME "LED_Hue"
#define ILMOR_R3_STATUS_FRAME_2_LED_SATURATION_NAME "LED_Saturation"
#define ILMOR_R3_STATUS_FRAME_2_LED_VALUE_NAME "LED_Value"
#define ILMOR_R3_STATUS_FRAME_2_LED_RAINBOW_MODE_NAME "LED_Rainbow_Mode"
#define ILMOR_R3_STATUS_FRAME_2_LED_PATTERN_NAME "LED_Pattern"
#define ILMOR_R3_STATUS_FRAME_2_TRIM_DEMAND_NAME "Trim_Demand"
#define ILMOR_R3_STATUS_FRAME_3_DISPLAY_STORAGE_STATE_NAME "Display_Storage_State"
#define ILMOR_R3_STATUS_FRAME_3_CALIBRATION_MODE_NAME "Calibration_Mode"
#define ILMOR_R3_STATUS_FRAME_3_LOGGING_MODE_NAME "Logging_Mode"
#define ILMOR_R3_STATUS_FRAME_3_SCALING_SOC_NAME "Scaling_SOC"
#define ILMOR_ICU_STATUS_FRAME_1_TRIM_POSITION_NAME "Trim_Position"
#define ILMOR_ICU_STATUS_FRAME_1_TRIM_POSITION_ADJUSTED_NAME "Trim_Position_Adjusted"
#define ILMOR_ICU_STATUS_FRAME_1_PROP_OUT_OF_WATER_NAME "Prop_Out_of_Water"
#define ILMOR_ICU_STATUS_FRAME_1_DISPLAYED_SOC_NAME "Displayed_SOC"
#define ILMOR_ICU_STATUS_FRAME_1_INPUT_POWER_NAME "Input_Power"
#define ILMOR_ICU_STATUS_FRAME_2_THROTTLE_DEMAND_NAME "Throttle_Demand"
#define ILMOR_ICU_STATUS_FRAME_2_SHIFT_POSITION_NAME "Shift_Position"
#define ILMOR_ICU_STATUS_FRAME_2_SOFTWARE_VERSION_MAJOR_NAME "Software_Version_Major"
#define ILMOR_ICU_STATUS_FRAME_2_SOFTWARE_VERSION_MINOR_NAME "Software_Version_Minor"
#define ILMOR_ICU_STATUS_FRAME_2_SOFTWARE_VERSION_PATCH_NAME "Software_Version_Patch"
#define ILMOR_ICU_STATUS_FRAME_3_THROTTLE_SENSOR_1_POSITION_NAME "Throttle_Sensor_1_Position"
#define ILMOR_ICU_STATUS_FRAME_3_THROTTLE_SENSOR_2_POSITION_NAME "Throttle_Sensor_2_Position"
#define ILMOR_ICU_STATUS_FRAME_3_THROTTLE_SENSOR_AVERAGE_POSITION_NAME "Throttle_Sensor_Average_Position"
#define ILMOR_ICU_STATUS_FRAME_3_FIVE_V_VSENSE_REFERENCE_NAME "FiveV_Vsense_Reference"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_YEAR_NAME "GPS_Year"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_MONTH_NAME "GPS_Month"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_DAY_NAME "GPS_Day"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_HOUR_NAME "GPS_Hour"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_MINUTE_NAME "GPS_Minute"
#define ILMOR_ICU_STATUS_FRAME_4_GPS_SECOND_NAME "GPS_Second"
#define ILMOR_ICU_STATUS_FRAME_4_SOFTWARE_VERSION_DEV_STAGE_NAME "Software_Version_Dev_Stage"
#define ILMOR_ICU_STATUS_FRAME_5_GPS_LATITUDE_NAME "GPS_Latitude"
#define ILMOR_ICU_STATUS_FRAME_5_GPS_LONGITUDE_NAME "GPS_Longitude"
#define ILMOR_ICU_STATUS_FRAME_6_GPS_SOG_NAME "GPS_SOG"
#define ILMOR_ICU_STATUS_FRAME_6_GPS_COG_NAME "GPS_COG"
#define ILMOR_ICU_STATUS_FRAME_6_GPS_HDOP_NAME "GPS_HDOP"
#define ILMOR_ICU_STATUS_FRAME_6_GPS_SATELLITE_COUNT_NAME "GPS_Satellite_Count"
#define ILMOR_ICU_STATUS_FRAME_6_SOFTWARE_VER_DEV_STAGE_REV_NAME "Software_Ver_Dev_Stage_Rev"
#define ILMOR_ICU_STATUS_FRAME_7_FILTERED_PRECISE_BATTERY_VOLTAGE_NAME "Filtered_Precise_Battery_Voltage"
#define ILMOR_ICU_STATUS_FRAME_7_TRIM_DEMAND_REQUEST_FROM_BUTTONS_NAME "Trim_Demand_Request_from_Buttons"
#define ILMOR_ICU_STATUS_FRAME_7_CHARGING_MODE_NAME "Charging_Mode"
#define ILMOR_ICU_STATUS_FRAME_7_REAL_SOC_NAME "Real_SOC"
#define ILMOR_ICU_STATUS_FRAME_8_LOG_FILE_SIZE_NAME "Log_File_Size"
#define ILMOR_ICU_STATUS_FRAME_8_LOG_SIZE_LIMIT_NAME "Log_Size_Limit"
#define ILMOR_INVERTER_STATUS_FRAME_1_E_RPM_NAME "eRPM"
#define ILMOR_INVERTER_STATUS_FRAME_1_MOTOR_CURRENT_NAME "Motor_Current"
#define ILMOR_INVERTER_STATUS_FRAME_1_DUTY_CYCLE_NAME "Duty_Cycle"
#define ILMOR_INVERTER_STATUS_FRAME_2_AH_CONSUMED_NAME "Ah_Consumed"
#define ILMOR_INVERTER_STATUS_FRAME_2_AH_REGENERATED_NAME "Ah_Regenerated"
#define ILMOR_INVERTER_STATUS_FRAME_3_WH_CONSUMED_NAME "Wh_Consumed"
#define ILMOR_INVERTER_STATUS_FRAME_3_WH_REGENERATED_NAME "Wh_Regenerated"
#define ILMOR_INVERTER_STATUS_FRAME_4_MOSFET_TEMPERATURE_NAME "MOSFET_Temperature"
#define ILMOR_INVERTER_STATUS_FRAME_4_MOTOR_TEMPERATURE_NAME "Motor_Temperature"
#define ILMOR_INVERTER_STATUS_FRAME_4_BATTERY_CURRENT_NAME "Battery_Current"
#define ILMOR_INVERTER_STATUS_FRAME_4_MOTOR_PID_POSITION_NAME "Motor_PID_Position"
#define ILMOR_INVERTER_STATUS_FRAME_5_MOTOR_TACH_NAME "Motor_Tach"
#define ILMOR_INVERTER_STATUS_FRAME_5_LOW_PRECISION_BATTERY_VOLTAGE_NAME "Low_Precision_Battery_Voltage"
#define ILMOR_INVERTER_STATUS_FRAME_6_ADC1_READING_NAME "ADC1_Reading"
#define ILMOR_INVERTER_STATUS_FRAME_6_ADC2_READING_NAME "ADC2_Reading"
#define ILMOR_INVERTER_STATUS_FRAME_6_ADC3_READING_NAME "ADC3_Reading"
#define ILMOR_INVERTER_STATUS_FRAME_6_PPM_NAME "PPM"

/**
 * Signals in message Unmanned_Throttle_Control.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_unmanned_throttle_control_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t unmanned_control_key;

    /**
     * Range: -32768..32767 (-32768..32767 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t unmanned_p_rpm_demand;
};

/**
 * Signals in message Inverter_Status_Frame_7.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_7_t {
    /**
     * Range: -2147483648..2147483647 (-2147.48365..2147.48365 V)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t high_precision_battery_voltage;
};

/**
 * Signals in message R3_Status_Frame_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_r3_status_frame_1_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle_lockout;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t safe_start;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_chemistry_type;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery_voltage_type;

    /**
     * Range: 0..65535 (0..6553.5 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_capacity;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t server_mode;
};

/**
 * Signals in message R3_Status_Frame_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_r3_status_frame_2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t led_hue;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t led_saturation;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t led_value;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t led_rainbow_mode;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t led_pattern;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trim_demand;
};

/**
 * Signals in message R3_Status_Frame_3.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_r3_status_frame_3_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t display_storage_state;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t calibration_mode;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t logging_mode;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t scaling_soc;
};

/**
 * Signals in message Password_Change_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_password_change_request_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Password_Save_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_password_save_request_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DS2.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_ds2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DS3.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_ds3_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MT1.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_mt1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message MT2.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_mt2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ICU_Status_Frame_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_1_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trim_position;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trim_position_adjusted;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t prop_out_of_water;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t displayed_soc;

    /**
     * Range: -128..127 (-128..127 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t input_power;
};

/**
 * Signals in message ICU_Status_Frame_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_2_t {
    /**
     * Range: -2147483648..2147483647 (-2147483.648..2147483.647 -)
     * Scale: 0.001
     * Offset: 0
     */
    int32_t throttle_demand;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_position;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_version_major;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_version_minor;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_version_patch;
};

/**
 * Signals in message ICU_Status_Frame_3.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_3_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_sensor_1_position;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_sensor_2_position;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t throttle_sensor_average_position;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t five_v_vsense_reference;
};

/**
 * Signals in message ICU_Status_Frame_4.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_4_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_year;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_month;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_day;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_hour;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_minute;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_second;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_version_dev_stage;
};

/**
 * Signals in message ICU_Status_Frame_5.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_5_t {
    /**
     * Range: -2147483648..2147483647 (-214.74836..214.74836 -)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t gps_latitude;

    /**
     * Range: -2147483648..2147483647 (-214.74836..214.74836 -)
     * Scale: 1e-07
     * Offset: 0
     */
    int32_t gps_longitude;
};

/**
 * Signals in message ICU_Status_Frame_6.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_6_t {
    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t gps_sog;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t gps_cog;

    /**
     * Range: 0..65535 (0..65.535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t gps_hdop;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_satellite_count;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_ver_dev_stage_rev;
};

/**
 * Signals in message ICU_Status_Frame_7.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_7_t {
    /**
     * Range: 0..4294967295 (0..4294.9673 -)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t filtered_precise_battery_voltage;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trim_demand_request_from_buttons;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charging_mode;

    /**
     * Range: 0..65535 (0..655.35 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t real_soc;
};

/**
 * Signals in message ICU_Status_Frame_8.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_icu_status_frame_8_t {
    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t log_file_size;

    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t log_size_limit;
};

/**
 * Signals in message Password_Change_Echo.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_password_change_echo_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Password_Save_Confirmation.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_password_save_confirmation_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Inverter_Status_Frame_1.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_1_t {
    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t e_rpm;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t motor_current;

    /**
     * Range: -32768..32767 (-32.768..32.767 -)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t duty_cycle;
};

/**
 * Signals in message Inverter_Status_Frame_2.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_2_t {
    /**
     * Range: 0..4294967295 (0..429496.7295 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t ah_consumed;

    /**
     * Range: 0..4294967295 (0..429496.7295 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t ah_regenerated;
};

/**
 * Signals in message Inverter_Status_Frame_3.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_3_t {
    /**
     * Range: 0..4294967295 (0..429496.7295 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t wh_consumed;

    /**
     * Range: 0..4294967295 (0..429496.7295 -)
     * Scale: 0.0001
     * Offset: 0
     */
    uint32_t wh_regenerated;
};

/**
 * Signals in message Inverter_Status_Frame_4.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_4_t {
    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t mosfet_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t motor_temperature;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_pid_position;
};

/**
 * Signals in message Inverter_Status_Frame_5.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_5_t {
    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t motor_tach;

    /**
     * Range: -32768..32767 (-3276.8..3276.7 -)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t low_precision_battery_voltage;
};

/**
 * Signals in message Inverter_Status_Frame_6.
 *
 * All signal values are as on the CAN bus.
 */
struct ilmor_inverter_status_frame_6_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t adc1_reading;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t adc2_reading;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t adc3_reading;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t ppm;
};

/**
 * Pack message Unmanned_Throttle_Control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_unmanned_throttle_control_pack(
    uint8_t *dst_p,
    const struct ilmor_unmanned_throttle_control_t *src_p,
    size_t size);

/**
 * Unpack message Unmanned_Throttle_Control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_unmanned_throttle_control_unpack(
    struct ilmor_unmanned_throttle_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Unmanned_Throttle_Control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_unmanned_throttle_control_init(struct ilmor_unmanned_throttle_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_unmanned_throttle_control_unmanned_control_key_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_unmanned_throttle_control_unmanned_control_key_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_unmanned_throttle_control_unmanned_control_key_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_unmanned_throttle_control_unmanned_p_rpm_demand_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_unmanned_throttle_control_unmanned_p_rpm_demand_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_unmanned_throttle_control_unmanned_p_rpm_demand_is_in_range(int16_t value);

/**
 * Pack message Inverter_Status_Frame_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_7_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_7_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_7_unpack(
    struct ilmor_inverter_status_frame_7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_7_init(struct ilmor_inverter_status_frame_7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ilmor_inverter_status_frame_7_high_precision_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_7_high_precision_battery_voltage_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_7_high_precision_battery_voltage_is_in_range(int32_t value);

/**
 * Pack message R3_Status_Frame_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_r3_status_frame_1_pack(
    uint8_t *dst_p,
    const struct ilmor_r3_status_frame_1_t *src_p,
    size_t size);

/**
 * Unpack message R3_Status_Frame_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_r3_status_frame_1_unpack(
    struct ilmor_r3_status_frame_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from R3_Status_Frame_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_r3_status_frame_1_init(struct ilmor_r3_status_frame_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_system_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_system_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_system_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_throttle_lockout_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_throttle_lockout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_throttle_lockout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_safe_start_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_safe_start_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_safe_start_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_battery_chemistry_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_battery_chemistry_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_battery_chemistry_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_battery_voltage_type_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_battery_voltage_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_battery_voltage_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_r3_status_frame_1_battery_capacity_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_battery_capacity_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_battery_capacity_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_1_server_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_1_server_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_1_server_mode_is_in_range(uint8_t value);

/**
 * Pack message R3_Status_Frame_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_r3_status_frame_2_pack(
    uint8_t *dst_p,
    const struct ilmor_r3_status_frame_2_t *src_p,
    size_t size);

/**
 * Unpack message R3_Status_Frame_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_r3_status_frame_2_unpack(
    struct ilmor_r3_status_frame_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from R3_Status_Frame_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_r3_status_frame_2_init(struct ilmor_r3_status_frame_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_led_hue_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_led_hue_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_led_hue_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_led_saturation_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_led_saturation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_led_saturation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_led_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_led_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_led_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_led_rainbow_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_led_rainbow_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_led_rainbow_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_led_pattern_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_led_pattern_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_led_pattern_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_2_trim_demand_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_2_trim_demand_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_2_trim_demand_is_in_range(uint8_t value);

/**
 * Pack message R3_Status_Frame_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_r3_status_frame_3_pack(
    uint8_t *dst_p,
    const struct ilmor_r3_status_frame_3_t *src_p,
    size_t size);

/**
 * Unpack message R3_Status_Frame_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_r3_status_frame_3_unpack(
    struct ilmor_r3_status_frame_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from R3_Status_Frame_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_r3_status_frame_3_init(struct ilmor_r3_status_frame_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_3_display_storage_state_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_3_display_storage_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_3_display_storage_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_3_calibration_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_3_calibration_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_3_calibration_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_r3_status_frame_3_logging_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_3_logging_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_3_logging_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_r3_status_frame_3_scaling_soc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_r3_status_frame_3_scaling_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_r3_status_frame_3_scaling_soc_is_in_range(uint16_t value);

/**
 * Pack message Password_Change_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_password_change_request_pack(
    uint8_t *dst_p,
    const struct ilmor_password_change_request_t *src_p,
    size_t size);

/**
 * Unpack message Password_Change_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_password_change_request_unpack(
    struct ilmor_password_change_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Password_Change_Request.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_password_change_request_init(struct ilmor_password_change_request_t *msg_p);

/**
 * Pack message Password_Save_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_password_save_request_pack(
    uint8_t *dst_p,
    const struct ilmor_password_save_request_t *src_p,
    size_t size);

/**
 * Unpack message Password_Save_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_password_save_request_unpack(
    struct ilmor_password_save_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Password_Save_Request.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_password_save_request_init(struct ilmor_password_save_request_t *msg_p);

/**
 * Pack message DS2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_ds2_pack(
    uint8_t *dst_p,
    const struct ilmor_ds2_t *src_p,
    size_t size);

/**
 * Unpack message DS2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_ds2_unpack(
    struct ilmor_ds2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DS2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_ds2_init(struct ilmor_ds2_t *msg_p);

/**
 * Pack message DS3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_ds3_pack(
    uint8_t *dst_p,
    const struct ilmor_ds3_t *src_p,
    size_t size);

/**
 * Unpack message DS3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_ds3_unpack(
    struct ilmor_ds3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DS3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_ds3_init(struct ilmor_ds3_t *msg_p);

/**
 * Pack message MT1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_mt1_pack(
    uint8_t *dst_p,
    const struct ilmor_mt1_t *src_p,
    size_t size);

/**
 * Unpack message MT1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_mt1_unpack(
    struct ilmor_mt1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MT1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_mt1_init(struct ilmor_mt1_t *msg_p);

/**
 * Pack message MT2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_mt2_pack(
    uint8_t *dst_p,
    const struct ilmor_mt2_t *src_p,
    size_t size);

/**
 * Unpack message MT2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_mt2_unpack(
    struct ilmor_mt2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MT2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_mt2_init(struct ilmor_mt2_t *msg_p);

/**
 * Pack message ICU_Status_Frame_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_1_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_1_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_1_unpack(
    struct ilmor_icu_status_frame_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_1_init(struct ilmor_icu_status_frame_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_1_trim_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_1_trim_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_1_trim_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_1_trim_position_adjusted_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_1_trim_position_adjusted_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_1_trim_position_adjusted_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_1_prop_out_of_water_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_1_prop_out_of_water_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_1_prop_out_of_water_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_1_displayed_soc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_1_displayed_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_1_displayed_soc_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ilmor_icu_status_frame_1_input_power_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_1_input_power_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_1_input_power_is_in_range(int8_t value);

/**
 * Pack message ICU_Status_Frame_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_2_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_2_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_2_unpack(
    struct ilmor_icu_status_frame_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_2_init(struct ilmor_icu_status_frame_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ilmor_icu_status_frame_2_throttle_demand_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_2_throttle_demand_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_2_throttle_demand_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_2_shift_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_2_shift_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_2_shift_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_2_software_version_major_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_2_software_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_2_software_version_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_2_software_version_minor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_2_software_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_2_software_version_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_2_software_version_patch_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_2_software_version_patch_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_2_software_version_patch_is_in_range(uint8_t value);

/**
 * Pack message ICU_Status_Frame_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_3_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_3_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_3_unpack(
    struct ilmor_icu_status_frame_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_3_init(struct ilmor_icu_status_frame_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_3_throttle_sensor_1_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_3_throttle_sensor_1_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_3_throttle_sensor_1_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_3_throttle_sensor_2_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_3_throttle_sensor_2_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_3_throttle_sensor_2_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_3_throttle_sensor_average_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_3_throttle_sensor_average_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_3_throttle_sensor_average_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_3_five_v_vsense_reference_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_3_five_v_vsense_reference_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_3_five_v_vsense_reference_is_in_range(uint16_t value);

/**
 * Pack message ICU_Status_Frame_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_4_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_4_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_4_unpack(
    struct ilmor_icu_status_frame_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_4_init(struct ilmor_icu_status_frame_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_4_gps_year_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_year_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_year_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_gps_month_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_month_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_month_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_gps_day_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_day_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_day_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_gps_hour_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_hour_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_hour_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_gps_minute_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_minute_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_minute_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_gps_second_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_gps_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_gps_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_4_software_version_dev_stage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_4_software_version_dev_stage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_4_software_version_dev_stage_is_in_range(uint8_t value);

/**
 * Pack message ICU_Status_Frame_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_5_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_5_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_5_unpack(
    struct ilmor_icu_status_frame_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_5_init(struct ilmor_icu_status_frame_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ilmor_icu_status_frame_5_gps_latitude_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_5_gps_latitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_5_gps_latitude_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ilmor_icu_status_frame_5_gps_longitude_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_5_gps_longitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_5_gps_longitude_is_in_range(int32_t value);

/**
 * Pack message ICU_Status_Frame_6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_6_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_6_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_6_unpack(
    struct ilmor_icu_status_frame_6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_6_init(struct ilmor_icu_status_frame_6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_6_gps_sog_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_6_gps_sog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_6_gps_sog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_6_gps_cog_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_6_gps_cog_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_6_gps_cog_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_6_gps_hdop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_6_gps_hdop_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_6_gps_hdop_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_6_gps_satellite_count_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_6_gps_satellite_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_6_gps_satellite_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_6_software_ver_dev_stage_rev_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_6_software_ver_dev_stage_rev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_6_software_ver_dev_stage_rev_is_in_range(uint8_t value);

/**
 * Pack message ICU_Status_Frame_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_7_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_7_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_7_unpack(
    struct ilmor_icu_status_frame_7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_7_init(struct ilmor_icu_status_frame_7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_icu_status_frame_7_filtered_precise_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_7_filtered_precise_battery_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_7_filtered_precise_battery_voltage_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_7_trim_demand_request_from_buttons_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_7_trim_demand_request_from_buttons_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_7_trim_demand_request_from_buttons_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ilmor_icu_status_frame_7_charging_mode_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_7_charging_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_7_charging_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_icu_status_frame_7_real_soc_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_7_real_soc_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_7_real_soc_is_in_range(uint16_t value);

/**
 * Pack message ICU_Status_Frame_8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_icu_status_frame_8_pack(
    uint8_t *dst_p,
    const struct ilmor_icu_status_frame_8_t *src_p,
    size_t size);

/**
 * Unpack message ICU_Status_Frame_8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_icu_status_frame_8_unpack(
    struct ilmor_icu_status_frame_8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ICU_Status_Frame_8.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_icu_status_frame_8_init(struct ilmor_icu_status_frame_8_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_icu_status_frame_8_log_file_size_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_8_log_file_size_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_8_log_file_size_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_icu_status_frame_8_log_size_limit_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_icu_status_frame_8_log_size_limit_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_icu_status_frame_8_log_size_limit_is_in_range(uint32_t value);

/**
 * Pack message Password_Change_Echo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_password_change_echo_pack(
    uint8_t *dst_p,
    const struct ilmor_password_change_echo_t *src_p,
    size_t size);

/**
 * Unpack message Password_Change_Echo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_password_change_echo_unpack(
    struct ilmor_password_change_echo_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Password_Change_Echo.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_password_change_echo_init(struct ilmor_password_change_echo_t *msg_p);

/**
 * Pack message Password_Save_Confirmation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_password_save_confirmation_pack(
    uint8_t *dst_p,
    const struct ilmor_password_save_confirmation_t *src_p,
    size_t size);

/**
 * Unpack message Password_Save_Confirmation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_password_save_confirmation_unpack(
    struct ilmor_password_save_confirmation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Password_Save_Confirmation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_password_save_confirmation_init(struct ilmor_password_save_confirmation_t *msg_p);

/**
 * Pack message Inverter_Status_Frame_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_1_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_1_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_1_unpack(
    struct ilmor_inverter_status_frame_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_1_init(struct ilmor_inverter_status_frame_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ilmor_inverter_status_frame_1_e_rpm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_1_e_rpm_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_1_e_rpm_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_1_motor_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_1_motor_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_1_motor_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_1_duty_cycle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_1_duty_cycle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_1_duty_cycle_is_in_range(int16_t value);

/**
 * Pack message Inverter_Status_Frame_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_2_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_2_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_2_unpack(
    struct ilmor_inverter_status_frame_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_2_init(struct ilmor_inverter_status_frame_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_inverter_status_frame_2_ah_consumed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_2_ah_consumed_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_2_ah_consumed_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_inverter_status_frame_2_ah_regenerated_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_2_ah_regenerated_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_2_ah_regenerated_is_in_range(uint32_t value);

/**
 * Pack message Inverter_Status_Frame_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_3_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_3_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_3_unpack(
    struct ilmor_inverter_status_frame_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_3_init(struct ilmor_inverter_status_frame_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_inverter_status_frame_3_wh_consumed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_3_wh_consumed_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_3_wh_consumed_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_inverter_status_frame_3_wh_regenerated_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_3_wh_regenerated_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_3_wh_regenerated_is_in_range(uint32_t value);

/**
 * Pack message Inverter_Status_Frame_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_4_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_4_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_4_unpack(
    struct ilmor_inverter_status_frame_4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_4_init(struct ilmor_inverter_status_frame_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_4_mosfet_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_4_mosfet_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_4_mosfet_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_4_motor_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_4_motor_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_4_motor_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_4_battery_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_4_battery_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_4_battery_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_inverter_status_frame_4_motor_pid_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_4_motor_pid_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_4_motor_pid_position_is_in_range(uint16_t value);

/**
 * Pack message Inverter_Status_Frame_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_5_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_5_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_5_unpack(
    struct ilmor_inverter_status_frame_5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_5_init(struct ilmor_inverter_status_frame_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t ilmor_inverter_status_frame_5_motor_tach_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_5_motor_tach_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_5_motor_tach_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ilmor_inverter_status_frame_5_low_precision_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_5_low_precision_battery_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_5_low_precision_battery_voltage_is_in_range(int16_t value);

/**
 * Pack message Inverter_Status_Frame_6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ilmor_inverter_status_frame_6_pack(
    uint8_t *dst_p,
    const struct ilmor_inverter_status_frame_6_t *src_p,
    size_t size);

/**
 * Unpack message Inverter_Status_Frame_6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ilmor_inverter_status_frame_6_unpack(
    struct ilmor_inverter_status_frame_6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Inverter_Status_Frame_6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int ilmor_inverter_status_frame_6_init(struct ilmor_inverter_status_frame_6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_inverter_status_frame_6_adc1_reading_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_6_adc1_reading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_6_adc1_reading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_inverter_status_frame_6_adc2_reading_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_6_adc2_reading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_6_adc2_reading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_inverter_status_frame_6_adc3_reading_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_6_adc3_reading_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_6_adc3_reading_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ilmor_inverter_status_frame_6_ppm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float ilmor_inverter_status_frame_6_ppm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ilmor_inverter_status_frame_6_ppm_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
